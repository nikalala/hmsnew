// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class CheckinreservationsettingsBean
// extends+ 

// extends- 

{
    private Integer checkinreservationsettingsid;
    private boolean checkinreservationsettingsid_is_modified = false;
    private boolean checkinreservationsettingsid_is_initialized = false;
    
    private Boolean hours24;
    private boolean hours24_is_modified = false;
    private boolean hours24_is_initialized = false;
    
    private java.util.Date checkintime;
    private boolean checkintime_is_modified = false;
    private boolean checkintime_is_initialized = false;
    
    private java.util.Date checkouttime;
    private boolean checkouttime_is_modified = false;
    private boolean checkouttime_is_initialized = false;
    
    private Boolean autopostdayuse;
    private boolean autopostdayuse_is_modified = false;
    private boolean autopostdayuse_is_initialized = false;
    
    private Double graceperioddayuse;
    private boolean graceperioddayuse_is_modified = false;
    private boolean graceperioddayuse_is_initialized = false;
    
    private Double dayusecharge;
    private boolean dayusecharge_is_modified = false;
    private boolean dayusecharge_is_initialized = false;
    
    private Boolean autopostforlatecheckout;
    private boolean autopostforlatecheckout_is_modified = false;
    private boolean autopostforlatecheckout_is_initialized = false;
    
    private Double graceperiodlate;
    private boolean graceperiodlate_is_modified = false;
    private boolean graceperiodlate_is_initialized = false;
    
    private Double latecheckoutcharge;
    private boolean latecheckoutcharge_is_modified = false;
    private boolean latecheckoutcharge_is_initialized = false;
    
    private Boolean autopostearly;
    private boolean autopostearly_is_modified = false;
    private boolean autopostearly_is_initialized = false;
    
    private Double graceperiodearly;
    private boolean graceperiodearly_is_modified = false;
    private boolean graceperiodearly_is_initialized = false;
    
    private Double earlycheckoutcahrge;
    private boolean earlycheckoutcahrge_is_modified = false;
    private boolean earlycheckoutcahrge_is_initialized = false;
    
    private Integer postcancellationfee;
    private boolean postcancellationfee_is_modified = false;
    private boolean postcancellationfee_is_initialized = false;
    
    private Double amountcancell;
    private boolean amountcancell_is_modified = false;
    private boolean amountcancell_is_initialized = false;
    
    private Boolean totalchargecancell;
    private boolean totalchargecancell_is_modified = false;
    private boolean totalchargecancell_is_initialized = false;
    
    private Integer beyond;
    private boolean beyond_is_modified = false;
    private boolean beyond_is_initialized = false;
    
    private Integer within;
    private boolean within_is_modified = false;
    private boolean within_is_initialized = false;
    
    private Integer postnoshowfee;
    private boolean postnoshowfee_is_modified = false;
    private boolean postnoshowfee_is_initialized = false;
    
    private Double amountnoshow;
    private boolean amountnoshow_is_modified = false;
    private boolean amountnoshow_is_initialized = false;
    
    private Boolean totalchargenoshow;
    private boolean totalchargenoshow_is_modified = false;
    private boolean totalchargenoshow_is_initialized = false;
    
    private Integer finstartmonth;
    private boolean finstartmonth_is_modified = false;
    private boolean finstartmonth_is_initialized = false;
    
    private Integer finstartday;
    private boolean finstartday_is_modified = false;
    private boolean finstartday_is_initialized = false;
    
    private Integer finendmonth;
    private boolean finendmonth_is_modified = false;
    private boolean finendmonth_is_initialized = false;
    
    private Integer finendday;
    private boolean finendday_is_modified = false;
    private boolean finendday_is_initialized = false;
    
    private Boolean guestnamereserv;
    private boolean guestnamereserv_is_modified = false;
    private boolean guestnamereserv_is_initialized = false;
    
    private Boolean guestnamewalkin;
    private boolean guestnamewalkin_is_modified = false;
    private boolean guestnamewalkin_is_initialized = false;
    
    private Boolean guestidnreserv;
    private boolean guestidnreserv_is_modified = false;
    private boolean guestidnreserv_is_initialized = false;
    
    private Boolean guestidnwalkin;
    private boolean guestidnwalkin_is_modified = false;
    private boolean guestidnwalkin_is_initialized = false;
    
    private Boolean marketcodereserv;
    private boolean marketcodereserv_is_modified = false;
    private boolean marketcodereserv_is_initialized = false;
    
    private Boolean marketcodewalkin;
    private boolean marketcodewalkin_is_modified = false;
    private boolean marketcodewalkin_is_initialized = false;
    
    private Boolean paymenttypereserv;
    private boolean paymenttypereserv_is_modified = false;
    private boolean paymenttypereserv_is_initialized = false;
    
    private Boolean paymenttypewalkin;
    private boolean paymenttypewalkin_is_modified = false;
    private boolean paymenttypewalkin_is_initialized = false;
    
    private Boolean tareserv;
    private boolean tareserv_is_modified = false;
    private boolean tareserv_is_initialized = false;
    
    private Boolean tawalkin;
    private boolean tawalkin_is_modified = false;
    private boolean tawalkin_is_initialized = false;
    
    private Boolean companyreserv;
    private boolean companyreserv_is_modified = false;
    private boolean companyreserv_is_initialized = false;
    
    private Boolean companywalkin;
    private boolean companywalkin_is_modified = false;
    private boolean companywalkin_is_initialized = false;
    
    private Boolean bsourcereserv;
    private boolean bsourcereserv_is_modified = false;
    private boolean bsourcereserv_is_initialized = false;
    
    private Boolean bsourcewalkin;
    private boolean bsourcewalkin_is_modified = false;
    private boolean bsourcewalkin_is_initialized = false;
    
    private Boolean nationalityreserv;
    private boolean nationalityreserv_is_modified = false;
    private boolean nationalityreserv_is_initialized = false;
    
    private Boolean nationalitywalkin;
    private boolean nationalitywalkin_is_modified = false;
    private boolean nationalitywalkin_is_initialized = false;
    
    private Boolean emailreservationvoucher;
    private boolean emailreservationvoucher_is_modified = false;
    private boolean emailreservationvoucher_is_initialized = false;
    
    private Boolean nightauditdirty;
    private boolean nightauditdirty_is_modified = false;
    private boolean nightauditdirty_is_initialized = false;
    
    private Boolean overbooking;
    private boolean overbooking_is_modified = false;
    private boolean overbooking_is_initialized = false;
    
    private Boolean baseoccupancy;
    private boolean baseoccupancy_is_modified = false;
    private boolean baseoccupancy_is_initialized = false;
    
    private Boolean frontratemoderegular;
    private boolean frontratemoderegular_is_modified = false;
    private boolean frontratemoderegular_is_initialized = false;
    
    private Boolean sendreviewtoall;
    private boolean sendreviewtoall_is_modified = false;
    private boolean sendreviewtoall_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Boolean addressreserv;
    private boolean addressreserv_is_modified = false;
    private boolean addressreserv_is_initialized = false;
    
    private Boolean addresswalkin;
    private boolean addresswalkin_is_modified = false;
    private boolean addresswalkin_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    CheckinreservationsettingsBean()
    {
    }
    
    /**
     * Getter method for checkinreservationsettingsid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.checkinreservationsettingsid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of checkinreservationsettingsid
     */
    public Integer getCheckinreservationsettingsid()
    {
        return checkinreservationsettingsid; 
    }

    /**
     * Setter method for checkinreservationsettingsid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to checkinreservationsettingsid
     */
    public void setCheckinreservationsettingsid(Integer newVal) {
        if ((newVal != null && this.checkinreservationsettingsid != null && (newVal.compareTo(this.checkinreservationsettingsid) == 0)) || 
            (newVal == null && this.checkinreservationsettingsid == null && checkinreservationsettingsid_is_initialized)) {
            return; 
        } 
        this.checkinreservationsettingsid = newVal; 
        checkinreservationsettingsid_is_modified = true; 
        checkinreservationsettingsid_is_initialized = true; 
    }

    /**
     * Setter method for checkinreservationsettingsid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to checkinreservationsettingsid
     */
    public void setCheckinreservationsettingsid(int newVal) {
        setCheckinreservationsettingsid(new Integer(newVal));
    }

    /**
     * Determines if the checkinreservationsettingsid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCheckinreservationsettingsidModified() {
        return checkinreservationsettingsid_is_modified; 
    }

    /**
     * Determines if the checkinreservationsettingsid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCheckinreservationsettingsidInitialized() {
        return checkinreservationsettingsid_is_initialized; 
    }

    /**
     * Getter method for hours24.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.hours24
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of hours24
     */
    public Boolean getHours24()
    {
        return hours24; 
    }

    /**
     * Setter method for hours24.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to hours24
     */
    public void setHours24(Boolean newVal) {
        if ((newVal != null && this.hours24 != null && newVal.equals(this.hours24)) || 
            (newVal == null && this.hours24 == null && hours24_is_initialized)) {
            return; 
        } 
        this.hours24 = newVal; 
        hours24_is_modified = true; 
        hours24_is_initialized = true; 
    }

    /**
     * Setter method for hours24.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to hours24
     */
    public void setHours24(boolean newVal) {
        setHours24(new Boolean(newVal));
    }

    /**
     * Determines if the hours24 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isHours24Modified() {
        return hours24_is_modified; 
    }

    /**
     * Determines if the hours24 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isHours24Initialized() {
        return hours24_is_initialized; 
    }

    /**
     * Getter method for checkintime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.checkintime
     * <li>column size: 15
     * <li>jdbc type returned by the driver: Types.TIME
     * </ul>
     *
     * @return the value of checkintime
     */
    public java.util.Date getCheckintime()
    {
        return checkintime; 
    }

    /**
     * Setter method for checkintime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to checkintime
     */
    public void setCheckintime(java.util.Date newVal) {
        if ((newVal != null && this.checkintime != null && (newVal.compareTo(this.checkintime) == 0)) || 
            (newVal == null && this.checkintime == null && checkintime_is_initialized)) {
            return; 
        } 
        this.checkintime = newVal; 
        checkintime_is_modified = true; 
        checkintime_is_initialized = true; 
    }

    /**
     * Setter method for checkintime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to checkintime
     */
    public void setCheckintime(long newVal) {
        setCheckintime(new java.util.Date(newVal));
    }

    /**
     * Determines if the checkintime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCheckintimeModified() {
        return checkintime_is_modified; 
    }

    /**
     * Determines if the checkintime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCheckintimeInitialized() {
        return checkintime_is_initialized; 
    }

    /**
     * Getter method for checkouttime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.checkouttime
     * <li>column size: 15
     * <li>jdbc type returned by the driver: Types.TIME
     * </ul>
     *
     * @return the value of checkouttime
     */
    public java.util.Date getCheckouttime()
    {
        return checkouttime; 
    }

    /**
     * Setter method for checkouttime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to checkouttime
     */
    public void setCheckouttime(java.util.Date newVal) {
        if ((newVal != null && this.checkouttime != null && (newVal.compareTo(this.checkouttime) == 0)) || 
            (newVal == null && this.checkouttime == null && checkouttime_is_initialized)) {
            return; 
        } 
        this.checkouttime = newVal; 
        checkouttime_is_modified = true; 
        checkouttime_is_initialized = true; 
    }

    /**
     * Setter method for checkouttime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to checkouttime
     */
    public void setCheckouttime(long newVal) {
        setCheckouttime(new java.util.Date(newVal));
    }

    /**
     * Determines if the checkouttime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCheckouttimeModified() {
        return checkouttime_is_modified; 
    }

    /**
     * Determines if the checkouttime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCheckouttimeInitialized() {
        return checkouttime_is_initialized; 
    }

    /**
     * Getter method for autopostdayuse.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.autopostdayuse
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of autopostdayuse
     */
    public Boolean getAutopostdayuse()
    {
        return autopostdayuse; 
    }

    /**
     * Setter method for autopostdayuse.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to autopostdayuse
     */
    public void setAutopostdayuse(Boolean newVal) {
        if ((newVal != null && this.autopostdayuse != null && newVal.equals(this.autopostdayuse)) || 
            (newVal == null && this.autopostdayuse == null && autopostdayuse_is_initialized)) {
            return; 
        } 
        this.autopostdayuse = newVal; 
        autopostdayuse_is_modified = true; 
        autopostdayuse_is_initialized = true; 
    }

    /**
     * Setter method for autopostdayuse.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to autopostdayuse
     */
    public void setAutopostdayuse(boolean newVal) {
        setAutopostdayuse(new Boolean(newVal));
    }

    /**
     * Determines if the autopostdayuse has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAutopostdayuseModified() {
        return autopostdayuse_is_modified; 
    }

    /**
     * Determines if the autopostdayuse has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAutopostdayuseInitialized() {
        return autopostdayuse_is_initialized; 
    }

    /**
     * Getter method for graceperioddayuse.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.graceperioddayuse
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of graceperioddayuse
     */
    public Double getGraceperioddayuse()
    {
        return graceperioddayuse; 
    }

    /**
     * Setter method for graceperioddayuse.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to graceperioddayuse
     */
    public void setGraceperioddayuse(Double newVal) {
        if ((newVal != null && this.graceperioddayuse != null && (newVal.compareTo(this.graceperioddayuse) == 0)) || 
            (newVal == null && this.graceperioddayuse == null && graceperioddayuse_is_initialized)) {
            return; 
        } 
        this.graceperioddayuse = newVal; 
        graceperioddayuse_is_modified = true; 
        graceperioddayuse_is_initialized = true; 
    }

    /**
     * Setter method for graceperioddayuse.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to graceperioddayuse
     */
    public void setGraceperioddayuse(double newVal) {
        setGraceperioddayuse(new Double(newVal));
    }

    /**
     * Determines if the graceperioddayuse has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGraceperioddayuseModified() {
        return graceperioddayuse_is_modified; 
    }

    /**
     * Determines if the graceperioddayuse has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGraceperioddayuseInitialized() {
        return graceperioddayuse_is_initialized; 
    }

    /**
     * Getter method for dayusecharge.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.dayusecharge
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of dayusecharge
     */
    public Double getDayusecharge()
    {
        return dayusecharge; 
    }

    /**
     * Setter method for dayusecharge.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to dayusecharge
     */
    public void setDayusecharge(Double newVal) {
        if ((newVal != null && this.dayusecharge != null && (newVal.compareTo(this.dayusecharge) == 0)) || 
            (newVal == null && this.dayusecharge == null && dayusecharge_is_initialized)) {
            return; 
        } 
        this.dayusecharge = newVal; 
        dayusecharge_is_modified = true; 
        dayusecharge_is_initialized = true; 
    }

    /**
     * Setter method for dayusecharge.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to dayusecharge
     */
    public void setDayusecharge(double newVal) {
        setDayusecharge(new Double(newVal));
    }

    /**
     * Determines if the dayusecharge has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDayusechargeModified() {
        return dayusecharge_is_modified; 
    }

    /**
     * Determines if the dayusecharge has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDayusechargeInitialized() {
        return dayusecharge_is_initialized; 
    }

    /**
     * Getter method for autopostforlatecheckout.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.autopostforlatecheckout
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of autopostforlatecheckout
     */
    public Boolean getAutopostforlatecheckout()
    {
        return autopostforlatecheckout; 
    }

    /**
     * Setter method for autopostforlatecheckout.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to autopostforlatecheckout
     */
    public void setAutopostforlatecheckout(Boolean newVal) {
        if ((newVal != null && this.autopostforlatecheckout != null && newVal.equals(this.autopostforlatecheckout)) || 
            (newVal == null && this.autopostforlatecheckout == null && autopostforlatecheckout_is_initialized)) {
            return; 
        } 
        this.autopostforlatecheckout = newVal; 
        autopostforlatecheckout_is_modified = true; 
        autopostforlatecheckout_is_initialized = true; 
    }

    /**
     * Setter method for autopostforlatecheckout.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to autopostforlatecheckout
     */
    public void setAutopostforlatecheckout(boolean newVal) {
        setAutopostforlatecheckout(new Boolean(newVal));
    }

    /**
     * Determines if the autopostforlatecheckout has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAutopostforlatecheckoutModified() {
        return autopostforlatecheckout_is_modified; 
    }

    /**
     * Determines if the autopostforlatecheckout has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAutopostforlatecheckoutInitialized() {
        return autopostforlatecheckout_is_initialized; 
    }

    /**
     * Getter method for graceperiodlate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.graceperiodlate
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of graceperiodlate
     */
    public Double getGraceperiodlate()
    {
        return graceperiodlate; 
    }

    /**
     * Setter method for graceperiodlate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to graceperiodlate
     */
    public void setGraceperiodlate(Double newVal) {
        if ((newVal != null && this.graceperiodlate != null && (newVal.compareTo(this.graceperiodlate) == 0)) || 
            (newVal == null && this.graceperiodlate == null && graceperiodlate_is_initialized)) {
            return; 
        } 
        this.graceperiodlate = newVal; 
        graceperiodlate_is_modified = true; 
        graceperiodlate_is_initialized = true; 
    }

    /**
     * Setter method for graceperiodlate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to graceperiodlate
     */
    public void setGraceperiodlate(double newVal) {
        setGraceperiodlate(new Double(newVal));
    }

    /**
     * Determines if the graceperiodlate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGraceperiodlateModified() {
        return graceperiodlate_is_modified; 
    }

    /**
     * Determines if the graceperiodlate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGraceperiodlateInitialized() {
        return graceperiodlate_is_initialized; 
    }

    /**
     * Getter method for latecheckoutcharge.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.latecheckoutcharge
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of latecheckoutcharge
     */
    public Double getLatecheckoutcharge()
    {
        return latecheckoutcharge; 
    }

    /**
     * Setter method for latecheckoutcharge.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to latecheckoutcharge
     */
    public void setLatecheckoutcharge(Double newVal) {
        if ((newVal != null && this.latecheckoutcharge != null && (newVal.compareTo(this.latecheckoutcharge) == 0)) || 
            (newVal == null && this.latecheckoutcharge == null && latecheckoutcharge_is_initialized)) {
            return; 
        } 
        this.latecheckoutcharge = newVal; 
        latecheckoutcharge_is_modified = true; 
        latecheckoutcharge_is_initialized = true; 
    }

    /**
     * Setter method for latecheckoutcharge.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to latecheckoutcharge
     */
    public void setLatecheckoutcharge(double newVal) {
        setLatecheckoutcharge(new Double(newVal));
    }

    /**
     * Determines if the latecheckoutcharge has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLatecheckoutchargeModified() {
        return latecheckoutcharge_is_modified; 
    }

    /**
     * Determines if the latecheckoutcharge has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLatecheckoutchargeInitialized() {
        return latecheckoutcharge_is_initialized; 
    }

    /**
     * Getter method for autopostearly.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.autopostearly
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of autopostearly
     */
    public Boolean getAutopostearly()
    {
        return autopostearly; 
    }

    /**
     * Setter method for autopostearly.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to autopostearly
     */
    public void setAutopostearly(Boolean newVal) {
        if ((newVal != null && this.autopostearly != null && newVal.equals(this.autopostearly)) || 
            (newVal == null && this.autopostearly == null && autopostearly_is_initialized)) {
            return; 
        } 
        this.autopostearly = newVal; 
        autopostearly_is_modified = true; 
        autopostearly_is_initialized = true; 
    }

    /**
     * Setter method for autopostearly.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to autopostearly
     */
    public void setAutopostearly(boolean newVal) {
        setAutopostearly(new Boolean(newVal));
    }

    /**
     * Determines if the autopostearly has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAutopostearlyModified() {
        return autopostearly_is_modified; 
    }

    /**
     * Determines if the autopostearly has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAutopostearlyInitialized() {
        return autopostearly_is_initialized; 
    }

    /**
     * Getter method for graceperiodearly.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.graceperiodearly
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of graceperiodearly
     */
    public Double getGraceperiodearly()
    {
        return graceperiodearly; 
    }

    /**
     * Setter method for graceperiodearly.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to graceperiodearly
     */
    public void setGraceperiodearly(Double newVal) {
        if ((newVal != null && this.graceperiodearly != null && (newVal.compareTo(this.graceperiodearly) == 0)) || 
            (newVal == null && this.graceperiodearly == null && graceperiodearly_is_initialized)) {
            return; 
        } 
        this.graceperiodearly = newVal; 
        graceperiodearly_is_modified = true; 
        graceperiodearly_is_initialized = true; 
    }

    /**
     * Setter method for graceperiodearly.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to graceperiodearly
     */
    public void setGraceperiodearly(double newVal) {
        setGraceperiodearly(new Double(newVal));
    }

    /**
     * Determines if the graceperiodearly has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGraceperiodearlyModified() {
        return graceperiodearly_is_modified; 
    }

    /**
     * Determines if the graceperiodearly has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGraceperiodearlyInitialized() {
        return graceperiodearly_is_initialized; 
    }

    /**
     * Getter method for earlycheckoutcahrge.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.earlycheckoutcahrge
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of earlycheckoutcahrge
     */
    public Double getEarlycheckoutcahrge()
    {
        return earlycheckoutcahrge; 
    }

    /**
     * Setter method for earlycheckoutcahrge.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to earlycheckoutcahrge
     */
    public void setEarlycheckoutcahrge(Double newVal) {
        if ((newVal != null && this.earlycheckoutcahrge != null && (newVal.compareTo(this.earlycheckoutcahrge) == 0)) || 
            (newVal == null && this.earlycheckoutcahrge == null && earlycheckoutcahrge_is_initialized)) {
            return; 
        } 
        this.earlycheckoutcahrge = newVal; 
        earlycheckoutcahrge_is_modified = true; 
        earlycheckoutcahrge_is_initialized = true; 
    }

    /**
     * Setter method for earlycheckoutcahrge.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to earlycheckoutcahrge
     */
    public void setEarlycheckoutcahrge(double newVal) {
        setEarlycheckoutcahrge(new Double(newVal));
    }

    /**
     * Determines if the earlycheckoutcahrge has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEarlycheckoutcahrgeModified() {
        return earlycheckoutcahrge_is_modified; 
    }

    /**
     * Determines if the earlycheckoutcahrge has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEarlycheckoutcahrgeInitialized() {
        return earlycheckoutcahrge_is_initialized; 
    }

    /**
     * Getter method for postcancellationfee.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.postcancellationfee
     * <li>comments: 1 %, 2 fixed, 3 flat
     * <li>default value: 0
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of postcancellationfee
     */
    public Integer getPostcancellationfee()
    {
        return postcancellationfee; 
    }

    /**
     * Setter method for postcancellationfee.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to postcancellationfee
     */
    public void setPostcancellationfee(Integer newVal) {
        if ((newVal != null && this.postcancellationfee != null && (newVal.compareTo(this.postcancellationfee) == 0)) || 
            (newVal == null && this.postcancellationfee == null && postcancellationfee_is_initialized)) {
            return; 
        } 
        this.postcancellationfee = newVal; 
        postcancellationfee_is_modified = true; 
        postcancellationfee_is_initialized = true; 
    }

    /**
     * Setter method for postcancellationfee.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to postcancellationfee
     */
    public void setPostcancellationfee(int newVal) {
        setPostcancellationfee(new Integer(newVal));
    }

    /**
     * Determines if the postcancellationfee has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPostcancellationfeeModified() {
        return postcancellationfee_is_modified; 
    }

    /**
     * Determines if the postcancellationfee has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPostcancellationfeeInitialized() {
        return postcancellationfee_is_initialized; 
    }

    /**
     * Getter method for amountcancell.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.amountcancell
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of amountcancell
     */
    public Double getAmountcancell()
    {
        return amountcancell; 
    }

    /**
     * Setter method for amountcancell.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to amountcancell
     */
    public void setAmountcancell(Double newVal) {
        if ((newVal != null && this.amountcancell != null && (newVal.compareTo(this.amountcancell) == 0)) || 
            (newVal == null && this.amountcancell == null && amountcancell_is_initialized)) {
            return; 
        } 
        this.amountcancell = newVal; 
        amountcancell_is_modified = true; 
        amountcancell_is_initialized = true; 
    }

    /**
     * Setter method for amountcancell.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to amountcancell
     */
    public void setAmountcancell(double newVal) {
        setAmountcancell(new Double(newVal));
    }

    /**
     * Determines if the amountcancell has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAmountcancellModified() {
        return amountcancell_is_modified; 
    }

    /**
     * Determines if the amountcancell has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAmountcancellInitialized() {
        return amountcancell_is_initialized; 
    }

    /**
     * Getter method for totalchargecancell.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.totalchargecancell
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of totalchargecancell
     */
    public Boolean getTotalchargecancell()
    {
        return totalchargecancell; 
    }

    /**
     * Setter method for totalchargecancell.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to totalchargecancell
     */
    public void setTotalchargecancell(Boolean newVal) {
        if ((newVal != null && this.totalchargecancell != null && newVal.equals(this.totalchargecancell)) || 
            (newVal == null && this.totalchargecancell == null && totalchargecancell_is_initialized)) {
            return; 
        } 
        this.totalchargecancell = newVal; 
        totalchargecancell_is_modified = true; 
        totalchargecancell_is_initialized = true; 
    }

    /**
     * Setter method for totalchargecancell.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to totalchargecancell
     */
    public void setTotalchargecancell(boolean newVal) {
        setTotalchargecancell(new Boolean(newVal));
    }

    /**
     * Determines if the totalchargecancell has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTotalchargecancellModified() {
        return totalchargecancell_is_modified; 
    }

    /**
     * Determines if the totalchargecancell has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTotalchargecancellInitialized() {
        return totalchargecancell_is_initialized; 
    }

    /**
     * Getter method for beyond.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.beyond
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of beyond
     */
    public Integer getBeyond()
    {
        return beyond; 
    }

    /**
     * Setter method for beyond.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to beyond
     */
    public void setBeyond(Integer newVal) {
        if ((newVal != null && this.beyond != null && (newVal.compareTo(this.beyond) == 0)) || 
            (newVal == null && this.beyond == null && beyond_is_initialized)) {
            return; 
        } 
        this.beyond = newVal; 
        beyond_is_modified = true; 
        beyond_is_initialized = true; 
    }

    /**
     * Setter method for beyond.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to beyond
     */
    public void setBeyond(int newVal) {
        setBeyond(new Integer(newVal));
    }

    /**
     * Determines if the beyond has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBeyondModified() {
        return beyond_is_modified; 
    }

    /**
     * Determines if the beyond has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBeyondInitialized() {
        return beyond_is_initialized; 
    }

    /**
     * Getter method for within.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.within
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of within
     */
    public Integer getWithin()
    {
        return within; 
    }

    /**
     * Setter method for within.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to within
     */
    public void setWithin(Integer newVal) {
        if ((newVal != null && this.within != null && (newVal.compareTo(this.within) == 0)) || 
            (newVal == null && this.within == null && within_is_initialized)) {
            return; 
        } 
        this.within = newVal; 
        within_is_modified = true; 
        within_is_initialized = true; 
    }

    /**
     * Setter method for within.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to within
     */
    public void setWithin(int newVal) {
        setWithin(new Integer(newVal));
    }

    /**
     * Determines if the within has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWithinModified() {
        return within_is_modified; 
    }

    /**
     * Determines if the within has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWithinInitialized() {
        return within_is_initialized; 
    }

    /**
     * Getter method for postnoshowfee.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.postnoshowfee
     * <li>comments: 1 %, 2 fixed, 3 flat
     * <li>default value: 0
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of postnoshowfee
     */
    public Integer getPostnoshowfee()
    {
        return postnoshowfee; 
    }

    /**
     * Setter method for postnoshowfee.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to postnoshowfee
     */
    public void setPostnoshowfee(Integer newVal) {
        if ((newVal != null && this.postnoshowfee != null && (newVal.compareTo(this.postnoshowfee) == 0)) || 
            (newVal == null && this.postnoshowfee == null && postnoshowfee_is_initialized)) {
            return; 
        } 
        this.postnoshowfee = newVal; 
        postnoshowfee_is_modified = true; 
        postnoshowfee_is_initialized = true; 
    }

    /**
     * Setter method for postnoshowfee.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to postnoshowfee
     */
    public void setPostnoshowfee(int newVal) {
        setPostnoshowfee(new Integer(newVal));
    }

    /**
     * Determines if the postnoshowfee has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPostnoshowfeeModified() {
        return postnoshowfee_is_modified; 
    }

    /**
     * Determines if the postnoshowfee has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPostnoshowfeeInitialized() {
        return postnoshowfee_is_initialized; 
    }

    /**
     * Getter method for amountnoshow.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.amountnoshow
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of amountnoshow
     */
    public Double getAmountnoshow()
    {
        return amountnoshow; 
    }

    /**
     * Setter method for amountnoshow.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to amountnoshow
     */
    public void setAmountnoshow(Double newVal) {
        if ((newVal != null && this.amountnoshow != null && (newVal.compareTo(this.amountnoshow) == 0)) || 
            (newVal == null && this.amountnoshow == null && amountnoshow_is_initialized)) {
            return; 
        } 
        this.amountnoshow = newVal; 
        amountnoshow_is_modified = true; 
        amountnoshow_is_initialized = true; 
    }

    /**
     * Setter method for amountnoshow.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to amountnoshow
     */
    public void setAmountnoshow(double newVal) {
        setAmountnoshow(new Double(newVal));
    }

    /**
     * Determines if the amountnoshow has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAmountnoshowModified() {
        return amountnoshow_is_modified; 
    }

    /**
     * Determines if the amountnoshow has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAmountnoshowInitialized() {
        return amountnoshow_is_initialized; 
    }

    /**
     * Getter method for totalchargenoshow.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.totalchargenoshow
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of totalchargenoshow
     */
    public Boolean getTotalchargenoshow()
    {
        return totalchargenoshow; 
    }

    /**
     * Setter method for totalchargenoshow.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to totalchargenoshow
     */
    public void setTotalchargenoshow(Boolean newVal) {
        if ((newVal != null && this.totalchargenoshow != null && newVal.equals(this.totalchargenoshow)) || 
            (newVal == null && this.totalchargenoshow == null && totalchargenoshow_is_initialized)) {
            return; 
        } 
        this.totalchargenoshow = newVal; 
        totalchargenoshow_is_modified = true; 
        totalchargenoshow_is_initialized = true; 
    }

    /**
     * Setter method for totalchargenoshow.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to totalchargenoshow
     */
    public void setTotalchargenoshow(boolean newVal) {
        setTotalchargenoshow(new Boolean(newVal));
    }

    /**
     * Determines if the totalchargenoshow has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTotalchargenoshowModified() {
        return totalchargenoshow_is_modified; 
    }

    /**
     * Determines if the totalchargenoshow has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTotalchargenoshowInitialized() {
        return totalchargenoshow_is_initialized; 
    }

    /**
     * Getter method for finstartmonth.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.finstartmonth
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of finstartmonth
     */
    public Integer getFinstartmonth()
    {
        return finstartmonth; 
    }

    /**
     * Setter method for finstartmonth.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to finstartmonth
     */
    public void setFinstartmonth(Integer newVal) {
        if ((newVal != null && this.finstartmonth != null && (newVal.compareTo(this.finstartmonth) == 0)) || 
            (newVal == null && this.finstartmonth == null && finstartmonth_is_initialized)) {
            return; 
        } 
        this.finstartmonth = newVal; 
        finstartmonth_is_modified = true; 
        finstartmonth_is_initialized = true; 
    }

    /**
     * Setter method for finstartmonth.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to finstartmonth
     */
    public void setFinstartmonth(int newVal) {
        setFinstartmonth(new Integer(newVal));
    }

    /**
     * Determines if the finstartmonth has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFinstartmonthModified() {
        return finstartmonth_is_modified; 
    }

    /**
     * Determines if the finstartmonth has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFinstartmonthInitialized() {
        return finstartmonth_is_initialized; 
    }

    /**
     * Getter method for finstartday.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.finstartday
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of finstartday
     */
    public Integer getFinstartday()
    {
        return finstartday; 
    }

    /**
     * Setter method for finstartday.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to finstartday
     */
    public void setFinstartday(Integer newVal) {
        if ((newVal != null && this.finstartday != null && (newVal.compareTo(this.finstartday) == 0)) || 
            (newVal == null && this.finstartday == null && finstartday_is_initialized)) {
            return; 
        } 
        this.finstartday = newVal; 
        finstartday_is_modified = true; 
        finstartday_is_initialized = true; 
    }

    /**
     * Setter method for finstartday.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to finstartday
     */
    public void setFinstartday(int newVal) {
        setFinstartday(new Integer(newVal));
    }

    /**
     * Determines if the finstartday has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFinstartdayModified() {
        return finstartday_is_modified; 
    }

    /**
     * Determines if the finstartday has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFinstartdayInitialized() {
        return finstartday_is_initialized; 
    }

    /**
     * Getter method for finendmonth.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.finendmonth
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of finendmonth
     */
    public Integer getFinendmonth()
    {
        return finendmonth; 
    }

    /**
     * Setter method for finendmonth.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to finendmonth
     */
    public void setFinendmonth(Integer newVal) {
        if ((newVal != null && this.finendmonth != null && (newVal.compareTo(this.finendmonth) == 0)) || 
            (newVal == null && this.finendmonth == null && finendmonth_is_initialized)) {
            return; 
        } 
        this.finendmonth = newVal; 
        finendmonth_is_modified = true; 
        finendmonth_is_initialized = true; 
    }

    /**
     * Setter method for finendmonth.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to finendmonth
     */
    public void setFinendmonth(int newVal) {
        setFinendmonth(new Integer(newVal));
    }

    /**
     * Determines if the finendmonth has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFinendmonthModified() {
        return finendmonth_is_modified; 
    }

    /**
     * Determines if the finendmonth has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFinendmonthInitialized() {
        return finendmonth_is_initialized; 
    }

    /**
     * Getter method for finendday.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.finendday
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of finendday
     */
    public Integer getFinendday()
    {
        return finendday; 
    }

    /**
     * Setter method for finendday.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to finendday
     */
    public void setFinendday(Integer newVal) {
        if ((newVal != null && this.finendday != null && (newVal.compareTo(this.finendday) == 0)) || 
            (newVal == null && this.finendday == null && finendday_is_initialized)) {
            return; 
        } 
        this.finendday = newVal; 
        finendday_is_modified = true; 
        finendday_is_initialized = true; 
    }

    /**
     * Setter method for finendday.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to finendday
     */
    public void setFinendday(int newVal) {
        setFinendday(new Integer(newVal));
    }

    /**
     * Determines if the finendday has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFinenddayModified() {
        return finendday_is_modified; 
    }

    /**
     * Determines if the finendday has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFinenddayInitialized() {
        return finendday_is_initialized; 
    }

    /**
     * Getter method for guestnamereserv.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.guestnamereserv
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of guestnamereserv
     */
    public Boolean getGuestnamereserv()
    {
        return guestnamereserv; 
    }

    /**
     * Setter method for guestnamereserv.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to guestnamereserv
     */
    public void setGuestnamereserv(Boolean newVal) {
        if ((newVal != null && this.guestnamereserv != null && newVal.equals(this.guestnamereserv)) || 
            (newVal == null && this.guestnamereserv == null && guestnamereserv_is_initialized)) {
            return; 
        } 
        this.guestnamereserv = newVal; 
        guestnamereserv_is_modified = true; 
        guestnamereserv_is_initialized = true; 
    }

    /**
     * Setter method for guestnamereserv.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to guestnamereserv
     */
    public void setGuestnamereserv(boolean newVal) {
        setGuestnamereserv(new Boolean(newVal));
    }

    /**
     * Determines if the guestnamereserv has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestnamereservModified() {
        return guestnamereserv_is_modified; 
    }

    /**
     * Determines if the guestnamereserv has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestnamereservInitialized() {
        return guestnamereserv_is_initialized; 
    }

    /**
     * Getter method for guestnamewalkin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.guestnamewalkin
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of guestnamewalkin
     */
    public Boolean getGuestnamewalkin()
    {
        return guestnamewalkin; 
    }

    /**
     * Setter method for guestnamewalkin.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to guestnamewalkin
     */
    public void setGuestnamewalkin(Boolean newVal) {
        if ((newVal != null && this.guestnamewalkin != null && newVal.equals(this.guestnamewalkin)) || 
            (newVal == null && this.guestnamewalkin == null && guestnamewalkin_is_initialized)) {
            return; 
        } 
        this.guestnamewalkin = newVal; 
        guestnamewalkin_is_modified = true; 
        guestnamewalkin_is_initialized = true; 
    }

    /**
     * Setter method for guestnamewalkin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to guestnamewalkin
     */
    public void setGuestnamewalkin(boolean newVal) {
        setGuestnamewalkin(new Boolean(newVal));
    }

    /**
     * Determines if the guestnamewalkin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestnamewalkinModified() {
        return guestnamewalkin_is_modified; 
    }

    /**
     * Determines if the guestnamewalkin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestnamewalkinInitialized() {
        return guestnamewalkin_is_initialized; 
    }

    /**
     * Getter method for guestidnreserv.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.guestidnreserv
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of guestidnreserv
     */
    public Boolean getGuestidnreserv()
    {
        return guestidnreserv; 
    }

    /**
     * Setter method for guestidnreserv.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to guestidnreserv
     */
    public void setGuestidnreserv(Boolean newVal) {
        if ((newVal != null && this.guestidnreserv != null && newVal.equals(this.guestidnreserv)) || 
            (newVal == null && this.guestidnreserv == null && guestidnreserv_is_initialized)) {
            return; 
        } 
        this.guestidnreserv = newVal; 
        guestidnreserv_is_modified = true; 
        guestidnreserv_is_initialized = true; 
    }

    /**
     * Setter method for guestidnreserv.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to guestidnreserv
     */
    public void setGuestidnreserv(boolean newVal) {
        setGuestidnreserv(new Boolean(newVal));
    }

    /**
     * Determines if the guestidnreserv has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestidnreservModified() {
        return guestidnreserv_is_modified; 
    }

    /**
     * Determines if the guestidnreserv has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestidnreservInitialized() {
        return guestidnreserv_is_initialized; 
    }

    /**
     * Getter method for guestidnwalkin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.guestidnwalkin
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of guestidnwalkin
     */
    public Boolean getGuestidnwalkin()
    {
        return guestidnwalkin; 
    }

    /**
     * Setter method for guestidnwalkin.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to guestidnwalkin
     */
    public void setGuestidnwalkin(Boolean newVal) {
        if ((newVal != null && this.guestidnwalkin != null && newVal.equals(this.guestidnwalkin)) || 
            (newVal == null && this.guestidnwalkin == null && guestidnwalkin_is_initialized)) {
            return; 
        } 
        this.guestidnwalkin = newVal; 
        guestidnwalkin_is_modified = true; 
        guestidnwalkin_is_initialized = true; 
    }

    /**
     * Setter method for guestidnwalkin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to guestidnwalkin
     */
    public void setGuestidnwalkin(boolean newVal) {
        setGuestidnwalkin(new Boolean(newVal));
    }

    /**
     * Determines if the guestidnwalkin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestidnwalkinModified() {
        return guestidnwalkin_is_modified; 
    }

    /**
     * Determines if the guestidnwalkin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestidnwalkinInitialized() {
        return guestidnwalkin_is_initialized; 
    }

    /**
     * Getter method for marketcodereserv.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.marketcodereserv
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of marketcodereserv
     */
    public Boolean getMarketcodereserv()
    {
        return marketcodereserv; 
    }

    /**
     * Setter method for marketcodereserv.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to marketcodereserv
     */
    public void setMarketcodereserv(Boolean newVal) {
        if ((newVal != null && this.marketcodereserv != null && newVal.equals(this.marketcodereserv)) || 
            (newVal == null && this.marketcodereserv == null && marketcodereserv_is_initialized)) {
            return; 
        } 
        this.marketcodereserv = newVal; 
        marketcodereserv_is_modified = true; 
        marketcodereserv_is_initialized = true; 
    }

    /**
     * Setter method for marketcodereserv.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to marketcodereserv
     */
    public void setMarketcodereserv(boolean newVal) {
        setMarketcodereserv(new Boolean(newVal));
    }

    /**
     * Determines if the marketcodereserv has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMarketcodereservModified() {
        return marketcodereserv_is_modified; 
    }

    /**
     * Determines if the marketcodereserv has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMarketcodereservInitialized() {
        return marketcodereserv_is_initialized; 
    }

    /**
     * Getter method for marketcodewalkin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.marketcodewalkin
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of marketcodewalkin
     */
    public Boolean getMarketcodewalkin()
    {
        return marketcodewalkin; 
    }

    /**
     * Setter method for marketcodewalkin.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to marketcodewalkin
     */
    public void setMarketcodewalkin(Boolean newVal) {
        if ((newVal != null && this.marketcodewalkin != null && newVal.equals(this.marketcodewalkin)) || 
            (newVal == null && this.marketcodewalkin == null && marketcodewalkin_is_initialized)) {
            return; 
        } 
        this.marketcodewalkin = newVal; 
        marketcodewalkin_is_modified = true; 
        marketcodewalkin_is_initialized = true; 
    }

    /**
     * Setter method for marketcodewalkin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to marketcodewalkin
     */
    public void setMarketcodewalkin(boolean newVal) {
        setMarketcodewalkin(new Boolean(newVal));
    }

    /**
     * Determines if the marketcodewalkin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMarketcodewalkinModified() {
        return marketcodewalkin_is_modified; 
    }

    /**
     * Determines if the marketcodewalkin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMarketcodewalkinInitialized() {
        return marketcodewalkin_is_initialized; 
    }

    /**
     * Getter method for paymenttypereserv.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.paymenttypereserv
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of paymenttypereserv
     */
    public Boolean getPaymenttypereserv()
    {
        return paymenttypereserv; 
    }

    /**
     * Setter method for paymenttypereserv.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to paymenttypereserv
     */
    public void setPaymenttypereserv(Boolean newVal) {
        if ((newVal != null && this.paymenttypereserv != null && newVal.equals(this.paymenttypereserv)) || 
            (newVal == null && this.paymenttypereserv == null && paymenttypereserv_is_initialized)) {
            return; 
        } 
        this.paymenttypereserv = newVal; 
        paymenttypereserv_is_modified = true; 
        paymenttypereserv_is_initialized = true; 
    }

    /**
     * Setter method for paymenttypereserv.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to paymenttypereserv
     */
    public void setPaymenttypereserv(boolean newVal) {
        setPaymenttypereserv(new Boolean(newVal));
    }

    /**
     * Determines if the paymenttypereserv has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaymenttypereservModified() {
        return paymenttypereserv_is_modified; 
    }

    /**
     * Determines if the paymenttypereserv has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaymenttypereservInitialized() {
        return paymenttypereserv_is_initialized; 
    }

    /**
     * Getter method for paymenttypewalkin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.paymenttypewalkin
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of paymenttypewalkin
     */
    public Boolean getPaymenttypewalkin()
    {
        return paymenttypewalkin; 
    }

    /**
     * Setter method for paymenttypewalkin.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to paymenttypewalkin
     */
    public void setPaymenttypewalkin(Boolean newVal) {
        if ((newVal != null && this.paymenttypewalkin != null && newVal.equals(this.paymenttypewalkin)) || 
            (newVal == null && this.paymenttypewalkin == null && paymenttypewalkin_is_initialized)) {
            return; 
        } 
        this.paymenttypewalkin = newVal; 
        paymenttypewalkin_is_modified = true; 
        paymenttypewalkin_is_initialized = true; 
    }

    /**
     * Setter method for paymenttypewalkin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to paymenttypewalkin
     */
    public void setPaymenttypewalkin(boolean newVal) {
        setPaymenttypewalkin(new Boolean(newVal));
    }

    /**
     * Determines if the paymenttypewalkin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaymenttypewalkinModified() {
        return paymenttypewalkin_is_modified; 
    }

    /**
     * Determines if the paymenttypewalkin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaymenttypewalkinInitialized() {
        return paymenttypewalkin_is_initialized; 
    }

    /**
     * Getter method for tareserv.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.tareserv
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of tareserv
     */
    public Boolean getTareserv()
    {
        return tareserv; 
    }

    /**
     * Setter method for tareserv.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to tareserv
     */
    public void setTareserv(Boolean newVal) {
        if ((newVal != null && this.tareserv != null && newVal.equals(this.tareserv)) || 
            (newVal == null && this.tareserv == null && tareserv_is_initialized)) {
            return; 
        } 
        this.tareserv = newVal; 
        tareserv_is_modified = true; 
        tareserv_is_initialized = true; 
    }

    /**
     * Setter method for tareserv.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tareserv
     */
    public void setTareserv(boolean newVal) {
        setTareserv(new Boolean(newVal));
    }

    /**
     * Determines if the tareserv has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTareservModified() {
        return tareserv_is_modified; 
    }

    /**
     * Determines if the tareserv has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTareservInitialized() {
        return tareserv_is_initialized; 
    }

    /**
     * Getter method for tawalkin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.tawalkin
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of tawalkin
     */
    public Boolean getTawalkin()
    {
        return tawalkin; 
    }

    /**
     * Setter method for tawalkin.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to tawalkin
     */
    public void setTawalkin(Boolean newVal) {
        if ((newVal != null && this.tawalkin != null && newVal.equals(this.tawalkin)) || 
            (newVal == null && this.tawalkin == null && tawalkin_is_initialized)) {
            return; 
        } 
        this.tawalkin = newVal; 
        tawalkin_is_modified = true; 
        tawalkin_is_initialized = true; 
    }

    /**
     * Setter method for tawalkin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tawalkin
     */
    public void setTawalkin(boolean newVal) {
        setTawalkin(new Boolean(newVal));
    }

    /**
     * Determines if the tawalkin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTawalkinModified() {
        return tawalkin_is_modified; 
    }

    /**
     * Determines if the tawalkin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTawalkinInitialized() {
        return tawalkin_is_initialized; 
    }

    /**
     * Getter method for companyreserv.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.companyreserv
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of companyreserv
     */
    public Boolean getCompanyreserv()
    {
        return companyreserv; 
    }

    /**
     * Setter method for companyreserv.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to companyreserv
     */
    public void setCompanyreserv(Boolean newVal) {
        if ((newVal != null && this.companyreserv != null && newVal.equals(this.companyreserv)) || 
            (newVal == null && this.companyreserv == null && companyreserv_is_initialized)) {
            return; 
        } 
        this.companyreserv = newVal; 
        companyreserv_is_modified = true; 
        companyreserv_is_initialized = true; 
    }

    /**
     * Setter method for companyreserv.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to companyreserv
     */
    public void setCompanyreserv(boolean newVal) {
        setCompanyreserv(new Boolean(newVal));
    }

    /**
     * Determines if the companyreserv has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompanyreservModified() {
        return companyreserv_is_modified; 
    }

    /**
     * Determines if the companyreserv has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompanyreservInitialized() {
        return companyreserv_is_initialized; 
    }

    /**
     * Getter method for companywalkin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.companywalkin
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of companywalkin
     */
    public Boolean getCompanywalkin()
    {
        return companywalkin; 
    }

    /**
     * Setter method for companywalkin.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to companywalkin
     */
    public void setCompanywalkin(Boolean newVal) {
        if ((newVal != null && this.companywalkin != null && newVal.equals(this.companywalkin)) || 
            (newVal == null && this.companywalkin == null && companywalkin_is_initialized)) {
            return; 
        } 
        this.companywalkin = newVal; 
        companywalkin_is_modified = true; 
        companywalkin_is_initialized = true; 
    }

    /**
     * Setter method for companywalkin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to companywalkin
     */
    public void setCompanywalkin(boolean newVal) {
        setCompanywalkin(new Boolean(newVal));
    }

    /**
     * Determines if the companywalkin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompanywalkinModified() {
        return companywalkin_is_modified; 
    }

    /**
     * Determines if the companywalkin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompanywalkinInitialized() {
        return companywalkin_is_initialized; 
    }

    /**
     * Getter method for bsourcereserv.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.bsourcereserv
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of bsourcereserv
     */
    public Boolean getBsourcereserv()
    {
        return bsourcereserv; 
    }

    /**
     * Setter method for bsourcereserv.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to bsourcereserv
     */
    public void setBsourcereserv(Boolean newVal) {
        if ((newVal != null && this.bsourcereserv != null && newVal.equals(this.bsourcereserv)) || 
            (newVal == null && this.bsourcereserv == null && bsourcereserv_is_initialized)) {
            return; 
        } 
        this.bsourcereserv = newVal; 
        bsourcereserv_is_modified = true; 
        bsourcereserv_is_initialized = true; 
    }

    /**
     * Setter method for bsourcereserv.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to bsourcereserv
     */
    public void setBsourcereserv(boolean newVal) {
        setBsourcereserv(new Boolean(newVal));
    }

    /**
     * Determines if the bsourcereserv has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBsourcereservModified() {
        return bsourcereserv_is_modified; 
    }

    /**
     * Determines if the bsourcereserv has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBsourcereservInitialized() {
        return bsourcereserv_is_initialized; 
    }

    /**
     * Getter method for bsourcewalkin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.bsourcewalkin
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of bsourcewalkin
     */
    public Boolean getBsourcewalkin()
    {
        return bsourcewalkin; 
    }

    /**
     * Setter method for bsourcewalkin.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to bsourcewalkin
     */
    public void setBsourcewalkin(Boolean newVal) {
        if ((newVal != null && this.bsourcewalkin != null && newVal.equals(this.bsourcewalkin)) || 
            (newVal == null && this.bsourcewalkin == null && bsourcewalkin_is_initialized)) {
            return; 
        } 
        this.bsourcewalkin = newVal; 
        bsourcewalkin_is_modified = true; 
        bsourcewalkin_is_initialized = true; 
    }

    /**
     * Setter method for bsourcewalkin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to bsourcewalkin
     */
    public void setBsourcewalkin(boolean newVal) {
        setBsourcewalkin(new Boolean(newVal));
    }

    /**
     * Determines if the bsourcewalkin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBsourcewalkinModified() {
        return bsourcewalkin_is_modified; 
    }

    /**
     * Determines if the bsourcewalkin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBsourcewalkinInitialized() {
        return bsourcewalkin_is_initialized; 
    }

    /**
     * Getter method for nationalityreserv.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.nationalityreserv
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of nationalityreserv
     */
    public Boolean getNationalityreserv()
    {
        return nationalityreserv; 
    }

    /**
     * Setter method for nationalityreserv.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to nationalityreserv
     */
    public void setNationalityreserv(Boolean newVal) {
        if ((newVal != null && this.nationalityreserv != null && newVal.equals(this.nationalityreserv)) || 
            (newVal == null && this.nationalityreserv == null && nationalityreserv_is_initialized)) {
            return; 
        } 
        this.nationalityreserv = newVal; 
        nationalityreserv_is_modified = true; 
        nationalityreserv_is_initialized = true; 
    }

    /**
     * Setter method for nationalityreserv.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to nationalityreserv
     */
    public void setNationalityreserv(boolean newVal) {
        setNationalityreserv(new Boolean(newVal));
    }

    /**
     * Determines if the nationalityreserv has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNationalityreservModified() {
        return nationalityreserv_is_modified; 
    }

    /**
     * Determines if the nationalityreserv has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNationalityreservInitialized() {
        return nationalityreserv_is_initialized; 
    }

    /**
     * Getter method for nationalitywalkin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.nationalitywalkin
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of nationalitywalkin
     */
    public Boolean getNationalitywalkin()
    {
        return nationalitywalkin; 
    }

    /**
     * Setter method for nationalitywalkin.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to nationalitywalkin
     */
    public void setNationalitywalkin(Boolean newVal) {
        if ((newVal != null && this.nationalitywalkin != null && newVal.equals(this.nationalitywalkin)) || 
            (newVal == null && this.nationalitywalkin == null && nationalitywalkin_is_initialized)) {
            return; 
        } 
        this.nationalitywalkin = newVal; 
        nationalitywalkin_is_modified = true; 
        nationalitywalkin_is_initialized = true; 
    }

    /**
     * Setter method for nationalitywalkin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to nationalitywalkin
     */
    public void setNationalitywalkin(boolean newVal) {
        setNationalitywalkin(new Boolean(newVal));
    }

    /**
     * Determines if the nationalitywalkin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNationalitywalkinModified() {
        return nationalitywalkin_is_modified; 
    }

    /**
     * Determines if the nationalitywalkin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNationalitywalkinInitialized() {
        return nationalitywalkin_is_initialized; 
    }

    /**
     * Getter method for emailreservationvoucher.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.emailreservationvoucher
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of emailreservationvoucher
     */
    public Boolean getEmailreservationvoucher()
    {
        return emailreservationvoucher; 
    }

    /**
     * Setter method for emailreservationvoucher.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to emailreservationvoucher
     */
    public void setEmailreservationvoucher(Boolean newVal) {
        if ((newVal != null && this.emailreservationvoucher != null && newVal.equals(this.emailreservationvoucher)) || 
            (newVal == null && this.emailreservationvoucher == null && emailreservationvoucher_is_initialized)) {
            return; 
        } 
        this.emailreservationvoucher = newVal; 
        emailreservationvoucher_is_modified = true; 
        emailreservationvoucher_is_initialized = true; 
    }

    /**
     * Setter method for emailreservationvoucher.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to emailreservationvoucher
     */
    public void setEmailreservationvoucher(boolean newVal) {
        setEmailreservationvoucher(new Boolean(newVal));
    }

    /**
     * Determines if the emailreservationvoucher has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEmailreservationvoucherModified() {
        return emailreservationvoucher_is_modified; 
    }

    /**
     * Determines if the emailreservationvoucher has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEmailreservationvoucherInitialized() {
        return emailreservationvoucher_is_initialized; 
    }

    /**
     * Getter method for nightauditdirty.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.nightauditdirty
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of nightauditdirty
     */
    public Boolean getNightauditdirty()
    {
        return nightauditdirty; 
    }

    /**
     * Setter method for nightauditdirty.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to nightauditdirty
     */
    public void setNightauditdirty(Boolean newVal) {
        if ((newVal != null && this.nightauditdirty != null && newVal.equals(this.nightauditdirty)) || 
            (newVal == null && this.nightauditdirty == null && nightauditdirty_is_initialized)) {
            return; 
        } 
        this.nightauditdirty = newVal; 
        nightauditdirty_is_modified = true; 
        nightauditdirty_is_initialized = true; 
    }

    /**
     * Setter method for nightauditdirty.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to nightauditdirty
     */
    public void setNightauditdirty(boolean newVal) {
        setNightauditdirty(new Boolean(newVal));
    }

    /**
     * Determines if the nightauditdirty has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNightauditdirtyModified() {
        return nightauditdirty_is_modified; 
    }

    /**
     * Determines if the nightauditdirty has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNightauditdirtyInitialized() {
        return nightauditdirty_is_initialized; 
    }

    /**
     * Getter method for overbooking.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.overbooking
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of overbooking
     */
    public Boolean getOverbooking()
    {
        return overbooking; 
    }

    /**
     * Setter method for overbooking.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to overbooking
     */
    public void setOverbooking(Boolean newVal) {
        if ((newVal != null && this.overbooking != null && newVal.equals(this.overbooking)) || 
            (newVal == null && this.overbooking == null && overbooking_is_initialized)) {
            return; 
        } 
        this.overbooking = newVal; 
        overbooking_is_modified = true; 
        overbooking_is_initialized = true; 
    }

    /**
     * Setter method for overbooking.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to overbooking
     */
    public void setOverbooking(boolean newVal) {
        setOverbooking(new Boolean(newVal));
    }

    /**
     * Determines if the overbooking has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOverbookingModified() {
        return overbooking_is_modified; 
    }

    /**
     * Determines if the overbooking has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOverbookingInitialized() {
        return overbooking_is_initialized; 
    }

    /**
     * Getter method for baseoccupancy.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.baseoccupancy
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of baseoccupancy
     */
    public Boolean getBaseoccupancy()
    {
        return baseoccupancy; 
    }

    /**
     * Setter method for baseoccupancy.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to baseoccupancy
     */
    public void setBaseoccupancy(Boolean newVal) {
        if ((newVal != null && this.baseoccupancy != null && newVal.equals(this.baseoccupancy)) || 
            (newVal == null && this.baseoccupancy == null && baseoccupancy_is_initialized)) {
            return; 
        } 
        this.baseoccupancy = newVal; 
        baseoccupancy_is_modified = true; 
        baseoccupancy_is_initialized = true; 
    }

    /**
     * Setter method for baseoccupancy.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to baseoccupancy
     */
    public void setBaseoccupancy(boolean newVal) {
        setBaseoccupancy(new Boolean(newVal));
    }

    /**
     * Determines if the baseoccupancy has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBaseoccupancyModified() {
        return baseoccupancy_is_modified; 
    }

    /**
     * Determines if the baseoccupancy has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBaseoccupancyInitialized() {
        return baseoccupancy_is_initialized; 
    }

    /**
     * Getter method for frontratemoderegular.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.frontratemoderegular
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of frontratemoderegular
     */
    public Boolean getFrontratemoderegular()
    {
        return frontratemoderegular; 
    }

    /**
     * Setter method for frontratemoderegular.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to frontratemoderegular
     */
    public void setFrontratemoderegular(Boolean newVal) {
        if ((newVal != null && this.frontratemoderegular != null && newVal.equals(this.frontratemoderegular)) || 
            (newVal == null && this.frontratemoderegular == null && frontratemoderegular_is_initialized)) {
            return; 
        } 
        this.frontratemoderegular = newVal; 
        frontratemoderegular_is_modified = true; 
        frontratemoderegular_is_initialized = true; 
    }

    /**
     * Setter method for frontratemoderegular.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to frontratemoderegular
     */
    public void setFrontratemoderegular(boolean newVal) {
        setFrontratemoderegular(new Boolean(newVal));
    }

    /**
     * Determines if the frontratemoderegular has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFrontratemoderegularModified() {
        return frontratemoderegular_is_modified; 
    }

    /**
     * Determines if the frontratemoderegular has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFrontratemoderegularInitialized() {
        return frontratemoderegular_is_initialized; 
    }

    /**
     * Getter method for sendreviewtoall.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.sendreviewtoall
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of sendreviewtoall
     */
    public Boolean getSendreviewtoall()
    {
        return sendreviewtoall; 
    }

    /**
     * Setter method for sendreviewtoall.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to sendreviewtoall
     */
    public void setSendreviewtoall(Boolean newVal) {
        if ((newVal != null && this.sendreviewtoall != null && newVal.equals(this.sendreviewtoall)) || 
            (newVal == null && this.sendreviewtoall == null && sendreviewtoall_is_initialized)) {
            return; 
        } 
        this.sendreviewtoall = newVal; 
        sendreviewtoall_is_modified = true; 
        sendreviewtoall_is_initialized = true; 
    }

    /**
     * Setter method for sendreviewtoall.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sendreviewtoall
     */
    public void setSendreviewtoall(boolean newVal) {
        setSendreviewtoall(new Boolean(newVal));
    }

    /**
     * Determines if the sendreviewtoall has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSendreviewtoallModified() {
        return sendreviewtoall_is_modified; 
    }

    /**
     * Determines if the sendreviewtoall has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSendreviewtoallInitialized() {
        return sendreviewtoall_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.regbyid
     * <li> foreign key: personnel.personnelid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.regdate
     * <li>default value: now()
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for addressreserv.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.addressreserv
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of addressreserv
     */
    public Boolean getAddressreserv()
    {
        return addressreserv; 
    }

    /**
     * Setter method for addressreserv.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to addressreserv
     */
    public void setAddressreserv(Boolean newVal) {
        if ((newVal != null && this.addressreserv != null && newVal.equals(this.addressreserv)) || 
            (newVal == null && this.addressreserv == null && addressreserv_is_initialized)) {
            return; 
        } 
        this.addressreserv = newVal; 
        addressreserv_is_modified = true; 
        addressreserv_is_initialized = true; 
    }

    /**
     * Setter method for addressreserv.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to addressreserv
     */
    public void setAddressreserv(boolean newVal) {
        setAddressreserv(new Boolean(newVal));
    }

    /**
     * Determines if the addressreserv has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAddressreservModified() {
        return addressreserv_is_modified; 
    }

    /**
     * Determines if the addressreserv has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAddressreservInitialized() {
        return addressreserv_is_initialized; 
    }

    /**
     * Getter method for addresswalkin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: checkinreservationsettings.addresswalkin
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of addresswalkin
     */
    public Boolean getAddresswalkin()
    {
        return addresswalkin; 
    }

    /**
     * Setter method for addresswalkin.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to addresswalkin
     */
    public void setAddresswalkin(Boolean newVal) {
        if ((newVal != null && this.addresswalkin != null && newVal.equals(this.addresswalkin)) || 
            (newVal == null && this.addresswalkin == null && addresswalkin_is_initialized)) {
            return; 
        } 
        this.addresswalkin = newVal; 
        addresswalkin_is_modified = true; 
        addresswalkin_is_initialized = true; 
    }

    /**
     * Setter method for addresswalkin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to addresswalkin
     */
    public void setAddresswalkin(boolean newVal) {
        setAddresswalkin(new Boolean(newVal));
    }

    /**
     * Determines if the addresswalkin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAddresswalkinModified() {
        return addresswalkin_is_modified; 
    }

    /**
     * Determines if the addresswalkin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAddresswalkinInitialized() {
        return addresswalkin_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return checkinreservationsettingsid_is_modified || 
		hours24_is_modified || 
		checkintime_is_modified || 
		checkouttime_is_modified || 
		autopostdayuse_is_modified || 
		graceperioddayuse_is_modified || 
		dayusecharge_is_modified || 
		autopostforlatecheckout_is_modified || 
		graceperiodlate_is_modified || 
		latecheckoutcharge_is_modified || 
		autopostearly_is_modified || 
		graceperiodearly_is_modified || 
		earlycheckoutcahrge_is_modified || 
		postcancellationfee_is_modified || 
		amountcancell_is_modified || 
		totalchargecancell_is_modified || 
		beyond_is_modified || 
		within_is_modified || 
		postnoshowfee_is_modified || 
		amountnoshow_is_modified || 
		totalchargenoshow_is_modified || 
		finstartmonth_is_modified || 
		finstartday_is_modified || 
		finendmonth_is_modified || 
		finendday_is_modified || 
		guestnamereserv_is_modified || 
		guestnamewalkin_is_modified || 
		guestidnreserv_is_modified || 
		guestidnwalkin_is_modified || 
		marketcodereserv_is_modified || 
		marketcodewalkin_is_modified || 
		paymenttypereserv_is_modified || 
		paymenttypewalkin_is_modified || 
		tareserv_is_modified || 
		tawalkin_is_modified || 
		companyreserv_is_modified || 
		companywalkin_is_modified || 
		bsourcereserv_is_modified || 
		bsourcewalkin_is_modified || 
		nationalityreserv_is_modified || 
		nationalitywalkin_is_modified || 
		emailreservationvoucher_is_modified || 
		nightauditdirty_is_modified || 
		overbooking_is_modified || 
		baseoccupancy_is_modified || 
		frontratemoderegular_is_modified || 
		sendreviewtoall_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		addressreserv_is_modified || 
		addresswalkin_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        checkinreservationsettingsid_is_modified = false;
        hours24_is_modified = false;
        checkintime_is_modified = false;
        checkouttime_is_modified = false;
        autopostdayuse_is_modified = false;
        graceperioddayuse_is_modified = false;
        dayusecharge_is_modified = false;
        autopostforlatecheckout_is_modified = false;
        graceperiodlate_is_modified = false;
        latecheckoutcharge_is_modified = false;
        autopostearly_is_modified = false;
        graceperiodearly_is_modified = false;
        earlycheckoutcahrge_is_modified = false;
        postcancellationfee_is_modified = false;
        amountcancell_is_modified = false;
        totalchargecancell_is_modified = false;
        beyond_is_modified = false;
        within_is_modified = false;
        postnoshowfee_is_modified = false;
        amountnoshow_is_modified = false;
        totalchargenoshow_is_modified = false;
        finstartmonth_is_modified = false;
        finstartday_is_modified = false;
        finendmonth_is_modified = false;
        finendday_is_modified = false;
        guestnamereserv_is_modified = false;
        guestnamewalkin_is_modified = false;
        guestidnreserv_is_modified = false;
        guestidnwalkin_is_modified = false;
        marketcodereserv_is_modified = false;
        marketcodewalkin_is_modified = false;
        paymenttypereserv_is_modified = false;
        paymenttypewalkin_is_modified = false;
        tareserv_is_modified = false;
        tawalkin_is_modified = false;
        companyreserv_is_modified = false;
        companywalkin_is_modified = false;
        bsourcereserv_is_modified = false;
        bsourcewalkin_is_modified = false;
        nationalityreserv_is_modified = false;
        nationalitywalkin_is_modified = false;
        emailreservationvoucher_is_modified = false;
        nightauditdirty_is_modified = false;
        overbooking_is_modified = false;
        baseoccupancy_is_modified = false;
        frontratemoderegular_is_modified = false;
        sendreviewtoall_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        addressreserv_is_modified = false;
        addresswalkin_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(CheckinreservationsettingsBean bean) {
        setCheckinreservationsettingsid(bean.getCheckinreservationsettingsid());
        setHours24(bean.getHours24());
        setCheckintime(bean.getCheckintime());
        setCheckouttime(bean.getCheckouttime());
        setAutopostdayuse(bean.getAutopostdayuse());
        setGraceperioddayuse(bean.getGraceperioddayuse());
        setDayusecharge(bean.getDayusecharge());
        setAutopostforlatecheckout(bean.getAutopostforlatecheckout());
        setGraceperiodlate(bean.getGraceperiodlate());
        setLatecheckoutcharge(bean.getLatecheckoutcharge());
        setAutopostearly(bean.getAutopostearly());
        setGraceperiodearly(bean.getGraceperiodearly());
        setEarlycheckoutcahrge(bean.getEarlycheckoutcahrge());
        setPostcancellationfee(bean.getPostcancellationfee());
        setAmountcancell(bean.getAmountcancell());
        setTotalchargecancell(bean.getTotalchargecancell());
        setBeyond(bean.getBeyond());
        setWithin(bean.getWithin());
        setPostnoshowfee(bean.getPostnoshowfee());
        setAmountnoshow(bean.getAmountnoshow());
        setTotalchargenoshow(bean.getTotalchargenoshow());
        setFinstartmonth(bean.getFinstartmonth());
        setFinstartday(bean.getFinstartday());
        setFinendmonth(bean.getFinendmonth());
        setFinendday(bean.getFinendday());
        setGuestnamereserv(bean.getGuestnamereserv());
        setGuestnamewalkin(bean.getGuestnamewalkin());
        setGuestidnreserv(bean.getGuestidnreserv());
        setGuestidnwalkin(bean.getGuestidnwalkin());
        setMarketcodereserv(bean.getMarketcodereserv());
        setMarketcodewalkin(bean.getMarketcodewalkin());
        setPaymenttypereserv(bean.getPaymenttypereserv());
        setPaymenttypewalkin(bean.getPaymenttypewalkin());
        setTareserv(bean.getTareserv());
        setTawalkin(bean.getTawalkin());
        setCompanyreserv(bean.getCompanyreserv());
        setCompanywalkin(bean.getCompanywalkin());
        setBsourcereserv(bean.getBsourcereserv());
        setBsourcewalkin(bean.getBsourcewalkin());
        setNationalityreserv(bean.getNationalityreserv());
        setNationalitywalkin(bean.getNationalitywalkin());
        setEmailreservationvoucher(bean.getEmailreservationvoucher());
        setNightauditdirty(bean.getNightauditdirty());
        setOverbooking(bean.getOverbooking());
        setBaseoccupancy(bean.getBaseoccupancy());
        setFrontratemoderegular(bean.getFrontratemoderegular());
        setSendreviewtoall(bean.getSendreviewtoall());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setAddressreserv(bean.getAddressreserv());
        setAddresswalkin(bean.getAddresswalkin());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[checkinreservationsettings] "
                 + "\n - checkinreservationsettings.checkinreservationsettingsid = " + (checkinreservationsettingsid_is_initialized ? ("[" + (checkinreservationsettingsid == null ? null : checkinreservationsettingsid.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.hours24 = " + (hours24_is_initialized ? ("[" + (hours24 == null ? null : hours24.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.checkintime = " + (checkintime_is_initialized ? ("[" + (checkintime == null ? null : checkintime.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.checkouttime = " + (checkouttime_is_initialized ? ("[" + (checkouttime == null ? null : checkouttime.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.autopostdayuse = " + (autopostdayuse_is_initialized ? ("[" + (autopostdayuse == null ? null : autopostdayuse.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.graceperioddayuse = " + (graceperioddayuse_is_initialized ? ("[" + (graceperioddayuse == null ? null : graceperioddayuse.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.dayusecharge = " + (dayusecharge_is_initialized ? ("[" + (dayusecharge == null ? null : dayusecharge.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.autopostforlatecheckout = " + (autopostforlatecheckout_is_initialized ? ("[" + (autopostforlatecheckout == null ? null : autopostforlatecheckout.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.graceperiodlate = " + (graceperiodlate_is_initialized ? ("[" + (graceperiodlate == null ? null : graceperiodlate.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.latecheckoutcharge = " + (latecheckoutcharge_is_initialized ? ("[" + (latecheckoutcharge == null ? null : latecheckoutcharge.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.autopostearly = " + (autopostearly_is_initialized ? ("[" + (autopostearly == null ? null : autopostearly.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.graceperiodearly = " + (graceperiodearly_is_initialized ? ("[" + (graceperiodearly == null ? null : graceperiodearly.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.earlycheckoutcahrge = " + (earlycheckoutcahrge_is_initialized ? ("[" + (earlycheckoutcahrge == null ? null : earlycheckoutcahrge.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.postcancellationfee = " + (postcancellationfee_is_initialized ? ("[" + (postcancellationfee == null ? null : postcancellationfee.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.amountcancell = " + (amountcancell_is_initialized ? ("[" + (amountcancell == null ? null : amountcancell.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.totalchargecancell = " + (totalchargecancell_is_initialized ? ("[" + (totalchargecancell == null ? null : totalchargecancell.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.beyond = " + (beyond_is_initialized ? ("[" + (beyond == null ? null : beyond.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.within = " + (within_is_initialized ? ("[" + (within == null ? null : within.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.postnoshowfee = " + (postnoshowfee_is_initialized ? ("[" + (postnoshowfee == null ? null : postnoshowfee.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.amountnoshow = " + (amountnoshow_is_initialized ? ("[" + (amountnoshow == null ? null : amountnoshow.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.totalchargenoshow = " + (totalchargenoshow_is_initialized ? ("[" + (totalchargenoshow == null ? null : totalchargenoshow.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.finstartmonth = " + (finstartmonth_is_initialized ? ("[" + (finstartmonth == null ? null : finstartmonth.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.finstartday = " + (finstartday_is_initialized ? ("[" + (finstartday == null ? null : finstartday.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.finendmonth = " + (finendmonth_is_initialized ? ("[" + (finendmonth == null ? null : finendmonth.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.finendday = " + (finendday_is_initialized ? ("[" + (finendday == null ? null : finendday.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.guestnamereserv = " + (guestnamereserv_is_initialized ? ("[" + (guestnamereserv == null ? null : guestnamereserv.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.guestnamewalkin = " + (guestnamewalkin_is_initialized ? ("[" + (guestnamewalkin == null ? null : guestnamewalkin.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.guestidnreserv = " + (guestidnreserv_is_initialized ? ("[" + (guestidnreserv == null ? null : guestidnreserv.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.guestidnwalkin = " + (guestidnwalkin_is_initialized ? ("[" + (guestidnwalkin == null ? null : guestidnwalkin.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.marketcodereserv = " + (marketcodereserv_is_initialized ? ("[" + (marketcodereserv == null ? null : marketcodereserv.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.marketcodewalkin = " + (marketcodewalkin_is_initialized ? ("[" + (marketcodewalkin == null ? null : marketcodewalkin.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.paymenttypereserv = " + (paymenttypereserv_is_initialized ? ("[" + (paymenttypereserv == null ? null : paymenttypereserv.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.paymenttypewalkin = " + (paymenttypewalkin_is_initialized ? ("[" + (paymenttypewalkin == null ? null : paymenttypewalkin.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.tareserv = " + (tareserv_is_initialized ? ("[" + (tareserv == null ? null : tareserv.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.tawalkin = " + (tawalkin_is_initialized ? ("[" + (tawalkin == null ? null : tawalkin.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.companyreserv = " + (companyreserv_is_initialized ? ("[" + (companyreserv == null ? null : companyreserv.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.companywalkin = " + (companywalkin_is_initialized ? ("[" + (companywalkin == null ? null : companywalkin.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.bsourcereserv = " + (bsourcereserv_is_initialized ? ("[" + (bsourcereserv == null ? null : bsourcereserv.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.bsourcewalkin = " + (bsourcewalkin_is_initialized ? ("[" + (bsourcewalkin == null ? null : bsourcewalkin.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.nationalityreserv = " + (nationalityreserv_is_initialized ? ("[" + (nationalityreserv == null ? null : nationalityreserv.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.nationalitywalkin = " + (nationalitywalkin_is_initialized ? ("[" + (nationalitywalkin == null ? null : nationalitywalkin.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.emailreservationvoucher = " + (emailreservationvoucher_is_initialized ? ("[" + (emailreservationvoucher == null ? null : emailreservationvoucher.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.nightauditdirty = " + (nightauditdirty_is_initialized ? ("[" + (nightauditdirty == null ? null : nightauditdirty.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.overbooking = " + (overbooking_is_initialized ? ("[" + (overbooking == null ? null : overbooking.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.baseoccupancy = " + (baseoccupancy_is_initialized ? ("[" + (baseoccupancy == null ? null : baseoccupancy.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.frontratemoderegular = " + (frontratemoderegular_is_initialized ? ("[" + (frontratemoderegular == null ? null : frontratemoderegular.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.sendreviewtoall = " + (sendreviewtoall_is_initialized ? ("[" + (sendreviewtoall == null ? null : sendreviewtoall.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.addressreserv = " + (addressreserv_is_initialized ? ("[" + (addressreserv == null ? null : addressreserv.toString()) + "]") : "not initialized") + ""
                 + "\n - checkinreservationsettings.addresswalkin = " + (addresswalkin_is_initialized ? ("[" + (addresswalkin == null ? null : addresswalkin.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
