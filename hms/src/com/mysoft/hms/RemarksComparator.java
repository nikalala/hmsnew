// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.util.Comparator;
// imports+ 

// imports- 


/**
 * Comparator class is used to sort the RemarksBean objects.
 */
public class RemarksComparator implements Comparator
// extends+ 

// extends- 

{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for RemarksComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new RemarksComparator(RemarksManager.REMARKID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>RemarksManager.ID_REMARKID
     *   <li>RemarksManager.ID_REMARK
     *   <li>RemarksManager.ID_ROOMID
     *   <li>RemarksManager.ID_HOUSEUNITID
     *   <li>RemarksManager.ID_RECDATE
     * </ul>
     */
    public RemarksComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for RemarksComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new RemarksComparator(RemarksManager.REMARKID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>RemarksManager.ID_REMARKID
     *   <li>RemarksManager.ID_REMARK
     *   <li>RemarksManager.ID_ROOMID
     *   <li>RemarksManager.ID_HOUSEUNITID
     *   <li>RemarksManager.ID_RECDATE
     *   <li>RemarksManager.ID_DELETED
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public RemarksComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        RemarksBean b1 = (RemarksBean)pObj1;
        RemarksBean b2 = (RemarksBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case RemarksManager.ID_REMARKID:
                if (b1.getRemarkid() == null && b2.getRemarkid() != null) {
                    iReturn = -1;
                } else if (b1.getRemarkid() == null && b2.getRemarkid() == null) {
                    iReturn = 0;
                } else if (b1.getRemarkid() != null && b2.getRemarkid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRemarkid().compareTo(b2.getRemarkid());
                }
                break;
            case RemarksManager.ID_REMARK:
                if (b1.getRemark() == null && b2.getRemark() != null) {
                    iReturn = -1;
                } else if (b1.getRemark() == null && b2.getRemark() == null) {
                    iReturn = 0;
                } else if (b1.getRemark() != null && b2.getRemark() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRemark().compareTo(b2.getRemark());
                }
                break;
            case RemarksManager.ID_ROOMID:
                if (b1.getRoomid() == null && b2.getRoomid() != null) {
                    iReturn = -1;
                } else if (b1.getRoomid() == null && b2.getRoomid() == null) {
                    iReturn = 0;
                } else if (b1.getRoomid() != null && b2.getRoomid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRoomid().compareTo(b2.getRoomid());
                }
                break;
            case RemarksManager.ID_HOUSEUNITID:
                if (b1.getHouseunitid() == null && b2.getHouseunitid() != null) {
                    iReturn = -1;
                } else if (b1.getHouseunitid() == null && b2.getHouseunitid() == null) {
                    iReturn = 0;
                } else if (b1.getHouseunitid() != null && b2.getHouseunitid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getHouseunitid().compareTo(b2.getHouseunitid());
                }
                break;
            case RemarksManager.ID_RECDATE:
                if (b1.getRecdate() == null && b2.getRecdate() != null) {
                    iReturn = -1;
                } else if (b1.getRecdate() == null && b2.getRecdate() == null) {
                    iReturn = 0;
                } else if (b1.getRecdate() != null && b2.getRecdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRecdate().compareTo(b2.getRecdate());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 

}
