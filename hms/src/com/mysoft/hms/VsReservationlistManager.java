// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the vs_reservationlist table.
 */
public class VsReservationlistManager
// extends+ 

// extends- 

{

    /**
     * Column reservationid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_RESERVATIONID = 0;
    public static final int TYPE_RESERVATIONID = Types.BIGINT;
    public static final String NAME_RESERVATIONID = "reservationid";

    /**
     * Column reservationroomid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_RESERVATIONROOMID = 1;
    public static final int TYPE_RESERVATIONROOMID = Types.BIGINT;
    public static final String NAME_RESERVATIONROOMID = "reservationroomid";

    /**
     * Column roomid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ROOMID = 2;
    public static final int TYPE_ROOMID = Types.INTEGER;
    public static final String NAME_ROOMID = "roomid";

    /**
     * Column roomtypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ROOMTYPEID = 3;
    public static final int TYPE_ROOMTYPEID = Types.INTEGER;
    public static final String NAME_ROOMTYPEID = "roomtypeid";

    /**
     * Column arraivaldate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_ARRAIVALDATE = 4;
    public static final int TYPE_ARRAIVALDATE = Types.TIMESTAMP;
    public static final String NAME_ARRAIVALDATE = "arraivaldate";

    /**
     * Column departuredate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_DEPARTUREDATE = 5;
    public static final int TYPE_DEPARTUREDATE = Types.TIMESTAMP;
    public static final String NAME_DEPARTUREDATE = "departuredate";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 6;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column status of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_STATUS = 7;
    public static final int TYPE_STATUS = Types.INTEGER;
    public static final String NAME_STATUS = "status";

    /**
     * Column phone of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PHONE = 8;
    public static final int TYPE_PHONE = Types.VARCHAR;
    public static final String NAME_PHONE = "phone";

    /**
     * Column mobile of type Types.VARCHAR mapped to String.
     */
    public static final int ID_MOBILE = 9;
    public static final int TYPE_MOBILE = Types.VARCHAR;
    public static final String NAME_MOBILE = "mobile";

    /**
     * Column companyname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_COMPANYNAME = 10;
    public static final int TYPE_COMPANYNAME = Types.VARCHAR;
    public static final String NAME_COMPANYNAME = "companyname";

    /**
     * Column guest of type Types.VARCHAR mapped to String.
     */
    public static final int ID_GUEST = 11;
    public static final int TYPE_GUEST = Types.VARCHAR;
    public static final String NAME_GUEST = "guest";

    /**
     * Column roomcode of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ROOMCODE = 12;
    public static final int TYPE_ROOMCODE = Types.VARCHAR;
    public static final String NAME_ROOMCODE = "roomcode";

    /**
     * Column folionumber of type Types.VARCHAR mapped to String.
     */
    public static final int ID_FOLIONUMBER = 13;
    public static final int TYPE_FOLIONUMBER = Types.VARCHAR;
    public static final String NAME_FOLIONUMBER = "folionumber";

    /**
     * Column roomtypecode of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ROOMTYPECODE = 14;
    public static final int TYPE_ROOMTYPECODE = Types.VARCHAR;
    public static final String NAME_ROOMTYPECODE = "roomtypecode";


    private static final String TABLE_NAME = "vs_reservationlist";

    /**
     * Create an array of type string containing all the fields of the vs_reservationlist table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "vs_reservationlist.reservationid"
        ,"vs_reservationlist.reservationroomid"
        ,"vs_reservationlist.roomid"
        ,"vs_reservationlist.roomtypeid"
        ,"vs_reservationlist.arraivaldate"
        ,"vs_reservationlist.departuredate"
        ,"vs_reservationlist.regdate"
        ,"vs_reservationlist.status"
        ,"vs_reservationlist.phone"
        ,"vs_reservationlist.mobile"
        ,"vs_reservationlist.companyname"
        ,"vs_reservationlist.guest"
        ,"vs_reservationlist.roomcode"
        ,"vs_reservationlist.folionumber"
        ,"vs_reservationlist.roomtypecode"
    };

    /**
     * Field that contains the comma separated fields of the vs_reservationlist table.
     */
    private static final String ALL_FIELDS = "vs_reservationlist.reservationid"
                            + ",vs_reservationlist.reservationroomid"
                            + ",vs_reservationlist.roomid"
                            + ",vs_reservationlist.roomtypeid"
                            + ",vs_reservationlist.arraivaldate"
                            + ",vs_reservationlist.departuredate"
                            + ",vs_reservationlist.regdate"
                            + ",vs_reservationlist.status"
                            + ",vs_reservationlist.phone"
                            + ",vs_reservationlist.mobile"
                            + ",vs_reservationlist.companyname"
                            + ",vs_reservationlist.guest"
                            + ",vs_reservationlist.roomcode"
                            + ",vs_reservationlist.folionumber"
                            + ",vs_reservationlist.roomtypecode";

    private static VsReservationlistManager singleton = new VsReservationlistManager();

    /**
     * Get the VsReservationlistManager singleton.
     *
     * @return VsReservationlistManager 
     */
    synchronized public static VsReservationlistManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own VsReservationlistManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(VsReservationlistManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new VsReservationlistBean instance.
     *
     * @return the new VsReservationlistBean 
     */
    public VsReservationlistBean createVsReservationlistBean()
    {
        return new VsReservationlistBean();
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from vs_reservationlist.
     *
     * @return an array of VsReservationlistManager pObject
     */
    //38
    public VsReservationlistBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM vs_reservationlist",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of VsReservationlistBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting VsReservationlistBean table 
     */
    //49
    public VsReservationlistBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of VsReservationlistBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting VsReservationlistBean table 
     */
    //51
    public VsReservationlistBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from vs_reservationlist " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from vs_reservationlist ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (VsReservationlistBean[])v.toArray(new VsReservationlistBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from vs_reservationlist table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the vs_reservationlist table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM vs_reservationlist " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the VsReservationlistBean pObject into the database.
     *
     * @param pObject the VsReservationlistBean pObject to be saved
     */
    //100
    public VsReservationlistBean save(VsReservationlistBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into vs_reservationlist (");
    
                if (pObject.isReservationidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("reservationid");
                    _dirtyCount++;
                }

                if (pObject.isReservationroomidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("reservationroomid");
                    _dirtyCount++;
                }

                if (pObject.isRoomidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roomid");
                    _dirtyCount++;
                }

                if (pObject.isRoomtypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roomtypeid");
                    _dirtyCount++;
                }

                if (pObject.isArraivaldateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("arraivaldate");
                    _dirtyCount++;
                }

                if (pObject.isDeparturedateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("departuredate");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isStatusModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("status");
                    _dirtyCount++;
                }

                if (pObject.isPhoneModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("phone");
                    _dirtyCount++;
                }

                if (pObject.isMobileModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("mobile");
                    _dirtyCount++;
                }

                if (pObject.isCompanynameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("companyname");
                    _dirtyCount++;
                }

                if (pObject.isGuestModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("guest");
                    _dirtyCount++;
                }

                if (pObject.isRoomcodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roomcode");
                    _dirtyCount++;
                }

                if (pObject.isFolionumberModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("folionumber");
                    _dirtyCount++;
                }

                if (pObject.isRoomtypecodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roomtypecode");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isReservationidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getReservationid());
                }
    
                if (pObject.isReservationroomidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroomid());
                }
    
                if (pObject.isRoomidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
                }
    
                if (pObject.isRoomtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
                }
    
                if (pObject.isArraivaldateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
                }
    
                if (pObject.isDeparturedateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isMobileModified()) {
                    ps.setString(++_dirtyCount, pObject.getMobile());
                }
    
                if (pObject.isCompanynameModified()) {
                    ps.setString(++_dirtyCount, pObject.getCompanyname());
                }
    
                if (pObject.isGuestModified()) {
                    ps.setString(++_dirtyCount, pObject.getGuest());
                }
    
                if (pObject.isRoomcodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getRoomcode());
                }
    
                if (pObject.isFolionumberModified()) {
                    ps.setString(++_dirtyCount, pObject.getFolionumber());
                }
    
                if (pObject.isRoomtypecodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getRoomtypecode());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE vs_reservationlist SET ");
                boolean useComma=false;

                if (pObject.isReservationidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("reservationid").append("=?");
                }

                if (pObject.isReservationroomidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("reservationroomid").append("=?");
                }

                if (pObject.isRoomidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roomid").append("=?");
                }

                if (pObject.isRoomtypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roomtypeid").append("=?");
                }

                if (pObject.isArraivaldateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("arraivaldate").append("=?");
                }

                if (pObject.isDeparturedateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("departuredate").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isStatusModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("status").append("=?");
                }

                if (pObject.isPhoneModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("phone").append("=?");
                }

                if (pObject.isMobileModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("mobile").append("=?");
                }

                if (pObject.isCompanynameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("companyname").append("=?");
                }

                if (pObject.isGuestModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("guest").append("=?");
                }

                if (pObject.isRoomcodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roomcode").append("=?");
                }

                if (pObject.isFolionumberModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("folionumber").append("=?");
                }

                if (pObject.isRoomtypecodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roomtypecode").append("=?");
                }
                _sql.append("");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isReservationidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getReservationid());
                }

                if (pObject.isReservationroomidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroomid());
                }

                if (pObject.isRoomidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
                }

                if (pObject.isRoomtypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
                }

                if (pObject.isArraivaldateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
                }

                if (pObject.isDeparturedateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isStatusModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }

                if (pObject.isPhoneModified()) {
                      ps.setString(++_dirtyCount, pObject.getPhone());
                }

                if (pObject.isMobileModified()) {
                      ps.setString(++_dirtyCount, pObject.getMobile());
                }

                if (pObject.isCompanynameModified()) {
                      ps.setString(++_dirtyCount, pObject.getCompanyname());
                }

                if (pObject.isGuestModified()) {
                      ps.setString(++_dirtyCount, pObject.getGuest());
                }

                if (pObject.isRoomcodeModified()) {
                      ps.setString(++_dirtyCount, pObject.getRoomcode());
                }

                if (pObject.isFolionumberModified()) {
                      ps.setString(++_dirtyCount, pObject.getFolionumber());
                }

                if (pObject.isRoomtypecodeModified()) {
                      ps.setString(++_dirtyCount, pObject.getRoomtypecode());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of VsReservationlistBean pObjects into the database.
     *
     * @param pObjects the VsReservationlistBean pObject table to be saved
     * @return the saved VsReservationlistBean array.
     */
    //65
    public VsReservationlistBean[] save(VsReservationlistBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique VsReservationlistBean pObject from a template one giving a c
     *
     * @param pObject the VsReservationlistBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public VsReservationlistBean loadUniqueUsingTemplate(VsReservationlistBean pObject) throws SQLException
    {
         VsReservationlistBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of VsReservationlistBean from a template one.
     *
     * @param pObject the VsReservationlistBean template to look for
     * @return all the VsReservationlistBean matching the template
     */
    //88
    public VsReservationlistBean[] loadUsingTemplate(VsReservationlistBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from vs_reservationlist WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isReservationidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationid= ?");
             }
    
             if (pObject.isReservationroomidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationroomid= ?");
             }
    
             if (pObject.isRoomidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomid= ?");
             }
    
             if (pObject.isRoomtypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomtypeid= ?");
             }
    
             if (pObject.isArraivaldateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("arraivaldate= ?");
             }
    
             if (pObject.isDeparturedateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("departuredate= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isStatusModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
             }
    
             if (pObject.isPhoneModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
             }
    
             if (pObject.isMobileModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mobile= ?");
             }
    
             if (pObject.isCompanynameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyname= ?");
             }
    
             if (pObject.isGuestModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guest= ?");
             }
    
             if (pObject.isRoomcodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomcode= ?");
             }
    
             if (pObject.isFolionumberModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("folionumber= ?");
             }
    
             if (pObject.isRoomtypecodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomtypecode= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isReservationidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getReservationid());
             }
    
             if (pObject.isReservationroomidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroomid());
             }
    
             if (pObject.isRoomidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
             }
    
             if (pObject.isRoomtypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
             }
    
             if (pObject.isArraivaldateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
             }
    
             if (pObject.isDeparturedateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isStatusModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
             }
    
             if (pObject.isPhoneModified()) {
                 ps.setString(++_dirtyCount, pObject.getPhone());
             }
    
             if (pObject.isMobileModified()) {
                 ps.setString(++_dirtyCount, pObject.getMobile());
             }
    
             if (pObject.isCompanynameModified()) {
                 ps.setString(++_dirtyCount, pObject.getCompanyname());
             }
    
             if (pObject.isGuestModified()) {
                 ps.setString(++_dirtyCount, pObject.getGuest());
             }
    
             if (pObject.isRoomcodeModified()) {
                 ps.setString(++_dirtyCount, pObject.getRoomcode());
             }
    
             if (pObject.isFolionumberModified()) {
                 ps.setString(++_dirtyCount, pObject.getFolionumber());
             }
    
             if (pObject.isRoomtypecodeModified()) {
                 ps.setString(++_dirtyCount, pObject.getRoomtypecode());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a VsReservationlistBean template.
     *
     * @param pObject the VsReservationlistBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(VsReservationlistBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM vs_reservationlist WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isReservationidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("reservationid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isReservationroomidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("reservationroomid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRoomidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roomid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRoomtypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roomtypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isArraivaldateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("arraivaldate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeparturedateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("departuredate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStatusInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("status").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPhoneInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("phone").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMobileInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("mobile").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCompanynameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("companyname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGuestInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("guest").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRoomcodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roomcode").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFolionumberInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("folionumber").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRoomtypecodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roomtypecode").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isReservationidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getReservationid());
            }
    
            if (pObject.isReservationroomidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroomid());
            }
    
            if (pObject.isRoomidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
            }
    
            if (pObject.isRoomtypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
            }
    
            if (pObject.isArraivaldateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
            }
    
            if (pObject.isDeparturedateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isStatusInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
            }
    
            if (pObject.isPhoneInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPhone());
            }
    
            if (pObject.isMobileInitialized()) {
                ps.setString(++_dirtyCount, pObject.getMobile());
            }
    
            if (pObject.isCompanynameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCompanyname());
            }
    
            if (pObject.isGuestInitialized()) {
                ps.setString(++_dirtyCount, pObject.getGuest());
            }
    
            if (pObject.isRoomcodeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getRoomcode());
            }
    
            if (pObject.isFolionumberInitialized()) {
                ps.setString(++_dirtyCount, pObject.getFolionumber());
            }
    
            if (pObject.isRoomtypecodeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getRoomtypecode());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table vs_reservationlist.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table vs_reservationlist with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from vs_reservationlist " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table vs_reservationlist with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific VsReservationlistBean pObject given a c
     *
     * @param pObject the VsReservationlistBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(VsReservationlistBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from vs_reservationlist WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isReservationidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationid= ?");
                }
    
                if (pObject.isReservationroomidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationroomid= ?");
                }
    
                if (pObject.isRoomidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomid= ?");
                }
    
                if (pObject.isRoomtypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomtypeid= ?");
                }
    
                if (pObject.isArraivaldateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("arraivaldate= ?");
                }
    
                if (pObject.isDeparturedateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("departuredate= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isStatusModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
                }
    
                if (pObject.isPhoneModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
                }
    
                if (pObject.isMobileModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mobile= ?");
                }
    
                if (pObject.isCompanynameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyname= ?");
                }
    
                if (pObject.isGuestModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guest= ?");
                }
    
                if (pObject.isRoomcodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomcode= ?");
                }
    
                if (pObject.isFolionumberModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("folionumber= ?");
                }
    
                if (pObject.isRoomtypecodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomtypecode= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isReservationidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getReservationid());
                }
    
                if (pObject.isReservationroomidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroomid());
                }
    
                if (pObject.isRoomidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
                }
    
                if (pObject.isRoomtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
                }
    
                if (pObject.isArraivaldateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
                }
    
                if (pObject.isDeparturedateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isMobileModified()) {
                    ps.setString(++_dirtyCount, pObject.getMobile());
                }
    
                if (pObject.isCompanynameModified()) {
                    ps.setString(++_dirtyCount, pObject.getCompanyname());
                }
    
                if (pObject.isGuestModified()) {
                    ps.setString(++_dirtyCount, pObject.getGuest());
                }
    
                if (pObject.isRoomcodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getRoomcode());
                }
    
                if (pObject.isFolionumberModified()) {
                    ps.setString(++_dirtyCount, pObject.getFolionumber());
                }
    
                if (pObject.isRoomtypecodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getRoomtypecode());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the vs_reservationlist on a VsReservationlistBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting VsReservationlistBean pObject
     */
    //72
    public VsReservationlistBean decodeRow(ResultSet rs) throws SQLException
    {
        VsReservationlistBean pObject = createVsReservationlistBean();
        pObject.setReservationid(Manager.getLong(rs, 1));
        pObject.setReservationroomid(Manager.getLong(rs, 2));
        pObject.setRoomid(Manager.getInteger(rs, 3));
        pObject.setRoomtypeid(Manager.getInteger(rs, 4));
        pObject.setArraivaldate(rs.getTimestamp(5));
        pObject.setDeparturedate(rs.getTimestamp(6));
        pObject.setRegdate(rs.getTimestamp(7));
        pObject.setStatus(Manager.getInteger(rs, 8));
        pObject.setPhone(rs.getString(9));
        pObject.setMobile(rs.getString(10));
        pObject.setCompanyname(rs.getString(11));
        pObject.setGuest(rs.getString(12));
        pObject.setRoomcode(rs.getString(13));
        pObject.setFolionumber(rs.getString(14));
        pObject.setRoomtypecode(rs.getString(15));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the vs_reservationlist table on a VsReservationlistBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting VsReservationlistBean pObject
     */
    //73
    public VsReservationlistBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        VsReservationlistBean pObject = createVsReservationlistBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_RESERVATIONID:
                    ++pos;
                    pObject.setReservationid(Manager.getLong(rs, pos));
                    break;
                case ID_RESERVATIONROOMID:
                    ++pos;
                    pObject.setReservationroomid(Manager.getLong(rs, pos));
                    break;
                case ID_ROOMID:
                    ++pos;
                    pObject.setRoomid(Manager.getInteger(rs, pos));
                    break;
                case ID_ROOMTYPEID:
                    ++pos;
                    pObject.setRoomtypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_ARRAIVALDATE:
                    ++pos;
                    pObject.setArraivaldate(rs.getTimestamp(pos));
                    break;
                case ID_DEPARTUREDATE:
                    ++pos;
                    pObject.setDeparturedate(rs.getTimestamp(pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_STATUS:
                    ++pos;
                    pObject.setStatus(Manager.getInteger(rs, pos));
                    break;
                case ID_PHONE:
                    ++pos;
                    pObject.setPhone(rs.getString(pos));
                    break;
                case ID_MOBILE:
                    ++pos;
                    pObject.setMobile(rs.getString(pos));
                    break;
                case ID_COMPANYNAME:
                    ++pos;
                    pObject.setCompanyname(rs.getString(pos));
                    break;
                case ID_GUEST:
                    ++pos;
                    pObject.setGuest(rs.getString(pos));
                    break;
                case ID_ROOMCODE:
                    ++pos;
                    pObject.setRoomcode(rs.getString(pos));
                    break;
                case ID_FOLIONUMBER:
                    ++pos;
                    pObject.setFolionumber(rs.getString(pos));
                    break;
                case ID_ROOMTYPECODE:
                    ++pos;
                    pObject.setRoomtypecode(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of VsReservationlistBean 
     */
    //41
    public VsReservationlistBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of VsReservationlistBean 
     */
    public VsReservationlistBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (VsReservationlistBean[])v.toArray(new VsReservationlistBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private VsReservationlistListener listener = null;

    /**
     * Registers a unique VsReservationlistListener listener.
     */
    //66.5
    public void registerListener(VsReservationlistListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the VsReservationlistBean pObject.
     *
     * @param pObject the VsReservationlistBean pObject to be saved
     */
    //67
    void beforeInsert(VsReservationlistBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the VsReservationlistBean pObject.
     *
     * @param pObject the VsReservationlistBean pObject to be saved
     */
    //68
    void afterInsert(VsReservationlistBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the VsReservationlistBean pObject.
     *
     * @param pObject the VsReservationlistBean pObject to be updated
     */
    //69
    void beforeUpdate(VsReservationlistBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the VsReservationlistBean pObject.
     *
     * @param pObject the VsReservationlistBean pObject to be updated
     */
    //70
    void afterUpdate(VsReservationlistBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
