// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class VsGuestcheckedinlistBean
// extends+ 

// extends- 

{
    private Long folioid;
    private boolean folioid_is_modified = false;
    private boolean folioid_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private Double rate;
    private boolean rate_is_modified = false;
    private boolean rate_is_initialized = false;
    
    private String ratetype;
    private boolean ratetype_is_modified = false;
    private boolean ratetype_is_initialized = false;
    
    private String guestname;
    private boolean guestname_is_modified = false;
    private boolean guestname_is_initialized = false;
    
    private String pax;
    private boolean pax_is_modified = false;
    private boolean pax_is_initialized = false;
    
    private java.sql.Timestamp arraivaldate;
    private boolean arraivaldate_is_modified = false;
    private boolean arraivaldate_is_initialized = false;
    
    private java.sql.Timestamp departuredate;
    private boolean departuredate_is_modified = false;
    private boolean departuredate_is_initialized = false;
    
    private String company;
    private boolean company_is_modified = false;
    private boolean company_is_initialized = false;
    
    private String author;
    private boolean author_is_modified = false;
    private boolean author_is_initialized = false;
    
    private Integer roomtypeid;
    private boolean roomtypeid_is_modified = false;
    private boolean roomtypeid_is_initialized = false;
    
    private Integer ratetypeid;
    private boolean ratetypeid_is_modified = false;
    private boolean ratetypeid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VsGuestcheckedinlistBean()
    {
    }
    
    /**
     * Getter method for folioid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedinlist.folioid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of folioid
     */
    public Long getFolioid()
    {
        return folioid; 
    }

    /**
     * Setter method for folioid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to folioid
     */
    public void setFolioid(Long newVal) {
        if ((newVal != null && this.folioid != null && (newVal.compareTo(this.folioid) == 0)) || 
            (newVal == null && this.folioid == null && folioid_is_initialized)) {
            return; 
        } 
        this.folioid = newVal; 
        folioid_is_modified = true; 
        folioid_is_initialized = true; 
    }

    /**
     * Setter method for folioid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to folioid
     */
    public void setFolioid(long newVal) {
        setFolioid(new Long(newVal));
    }

    /**
     * Determines if the folioid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFolioidModified() {
        return folioid_is_modified; 
    }

    /**
     * Determines if the folioid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFolioidInitialized() {
        return folioid_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedinlist.name
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for rate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedinlist.rate
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of rate
     */
    public Double getRate()
    {
        return rate; 
    }

    /**
     * Setter method for rate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rate
     */
    public void setRate(Double newVal) {
        if ((newVal != null && this.rate != null && (newVal.compareTo(this.rate) == 0)) || 
            (newVal == null && this.rate == null && rate_is_initialized)) {
            return; 
        } 
        this.rate = newVal; 
        rate_is_modified = true; 
        rate_is_initialized = true; 
    }

    /**
     * Setter method for rate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to rate
     */
    public void setRate(double newVal) {
        setRate(new Double(newVal));
    }

    /**
     * Determines if the rate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRateModified() {
        return rate_is_modified; 
    }

    /**
     * Determines if the rate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRateInitialized() {
        return rate_is_initialized; 
    }

    /**
     * Getter method for ratetype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedinlist.ratetype
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of ratetype
     */
    public String getRatetype()
    {
        return ratetype; 
    }

    /**
     * Setter method for ratetype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ratetype
     */
    public void setRatetype(String newVal) {
        if ((newVal != null && this.ratetype != null && (newVal.compareTo(this.ratetype) == 0)) || 
            (newVal == null && this.ratetype == null && ratetype_is_initialized)) {
            return; 
        } 
        this.ratetype = newVal; 
        ratetype_is_modified = true; 
        ratetype_is_initialized = true; 
    }

    /**
     * Determines if the ratetype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRatetypeModified() {
        return ratetype_is_modified; 
    }

    /**
     * Determines if the ratetype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRatetypeInitialized() {
        return ratetype_is_initialized; 
    }

    /**
     * Getter method for guestname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedinlist.guestname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of guestname
     */
    public String getGuestname()
    {
        return guestname; 
    }

    /**
     * Setter method for guestname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to guestname
     */
    public void setGuestname(String newVal) {
        if ((newVal != null && this.guestname != null && (newVal.compareTo(this.guestname) == 0)) || 
            (newVal == null && this.guestname == null && guestname_is_initialized)) {
            return; 
        } 
        this.guestname = newVal; 
        guestname_is_modified = true; 
        guestname_is_initialized = true; 
    }

    /**
     * Determines if the guestname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestnameModified() {
        return guestname_is_modified; 
    }

    /**
     * Determines if the guestname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestnameInitialized() {
        return guestname_is_initialized; 
    }

    /**
     * Getter method for pax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedinlist.pax
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of pax
     */
    public String getPax()
    {
        return pax; 
    }

    /**
     * Setter method for pax.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to pax
     */
    public void setPax(String newVal) {
        if ((newVal != null && this.pax != null && (newVal.compareTo(this.pax) == 0)) || 
            (newVal == null && this.pax == null && pax_is_initialized)) {
            return; 
        } 
        this.pax = newVal; 
        pax_is_modified = true; 
        pax_is_initialized = true; 
    }

    /**
     * Determines if the pax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaxModified() {
        return pax_is_modified; 
    }

    /**
     * Determines if the pax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaxInitialized() {
        return pax_is_initialized; 
    }

    /**
     * Getter method for arraivaldate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedinlist.arraivaldate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of arraivaldate
     */
    public java.sql.Timestamp getArraivaldate()
    {
        return arraivaldate; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.arraivaldate != null && (newVal.compareTo(this.arraivaldate) == 0)) || 
            (newVal == null && this.arraivaldate == null && arraivaldate_is_initialized)) {
            return; 
        } 
        this.arraivaldate = newVal; 
        arraivaldate_is_modified = true; 
        arraivaldate_is_initialized = true; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(long newVal) {
        setArraivaldate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the arraivaldate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isArraivaldateModified() {
        return arraivaldate_is_modified; 
    }

    /**
     * Determines if the arraivaldate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isArraivaldateInitialized() {
        return arraivaldate_is_initialized; 
    }

    /**
     * Getter method for departuredate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedinlist.departuredate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of departuredate
     */
    public java.sql.Timestamp getDeparturedate()
    {
        return departuredate; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.departuredate != null && (newVal.compareTo(this.departuredate) == 0)) || 
            (newVal == null && this.departuredate == null && departuredate_is_initialized)) {
            return; 
        } 
        this.departuredate = newVal; 
        departuredate_is_modified = true; 
        departuredate_is_initialized = true; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(long newVal) {
        setDeparturedate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the departuredate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeparturedateModified() {
        return departuredate_is_modified; 
    }

    /**
     * Determines if the departuredate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeparturedateInitialized() {
        return departuredate_is_initialized; 
    }

    /**
     * Getter method for company.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedinlist.company
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of company
     */
    public String getCompany()
    {
        return company; 
    }

    /**
     * Setter method for company.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to company
     */
    public void setCompany(String newVal) {
        if ((newVal != null && this.company != null && (newVal.compareTo(this.company) == 0)) || 
            (newVal == null && this.company == null && company_is_initialized)) {
            return; 
        } 
        this.company = newVal; 
        company_is_modified = true; 
        company_is_initialized = true; 
    }

    /**
     * Determines if the company has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompanyModified() {
        return company_is_modified; 
    }

    /**
     * Determines if the company has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompanyInitialized() {
        return company_is_initialized; 
    }

    /**
     * Getter method for author.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedinlist.author
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of author
     */
    public String getAuthor()
    {
        return author; 
    }

    /**
     * Setter method for author.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to author
     */
    public void setAuthor(String newVal) {
        if ((newVal != null && this.author != null && (newVal.compareTo(this.author) == 0)) || 
            (newVal == null && this.author == null && author_is_initialized)) {
            return; 
        } 
        this.author = newVal; 
        author_is_modified = true; 
        author_is_initialized = true; 
    }

    /**
     * Determines if the author has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAuthorModified() {
        return author_is_modified; 
    }

    /**
     * Determines if the author has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAuthorInitialized() {
        return author_is_initialized; 
    }

    /**
     * Getter method for roomtypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedinlist.roomtypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of roomtypeid
     */
    public Integer getRoomtypeid()
    {
        return roomtypeid; 
    }

    /**
     * Setter method for roomtypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomtypeid
     */
    public void setRoomtypeid(Integer newVal) {
        if ((newVal != null && this.roomtypeid != null && (newVal.compareTo(this.roomtypeid) == 0)) || 
            (newVal == null && this.roomtypeid == null && roomtypeid_is_initialized)) {
            return; 
        } 
        this.roomtypeid = newVal; 
        roomtypeid_is_modified = true; 
        roomtypeid_is_initialized = true; 
    }

    /**
     * Setter method for roomtypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to roomtypeid
     */
    public void setRoomtypeid(int newVal) {
        setRoomtypeid(new Integer(newVal));
    }

    /**
     * Determines if the roomtypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomtypeidModified() {
        return roomtypeid_is_modified; 
    }

    /**
     * Determines if the roomtypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomtypeidInitialized() {
        return roomtypeid_is_initialized; 
    }

    /**
     * Getter method for ratetypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedinlist.ratetypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of ratetypeid
     */
    public Integer getRatetypeid()
    {
        return ratetypeid; 
    }

    /**
     * Setter method for ratetypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ratetypeid
     */
    public void setRatetypeid(Integer newVal) {
        if ((newVal != null && this.ratetypeid != null && (newVal.compareTo(this.ratetypeid) == 0)) || 
            (newVal == null && this.ratetypeid == null && ratetypeid_is_initialized)) {
            return; 
        } 
        this.ratetypeid = newVal; 
        ratetypeid_is_modified = true; 
        ratetypeid_is_initialized = true; 
    }

    /**
     * Setter method for ratetypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ratetypeid
     */
    public void setRatetypeid(int newVal) {
        setRatetypeid(new Integer(newVal));
    }

    /**
     * Determines if the ratetypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRatetypeidModified() {
        return ratetypeid_is_modified; 
    }

    /**
     * Determines if the ratetypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRatetypeidInitialized() {
        return ratetypeid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return folioid_is_modified || 
		name_is_modified || 
		rate_is_modified || 
		ratetype_is_modified || 
		guestname_is_modified || 
		pax_is_modified || 
		arraivaldate_is_modified || 
		departuredate_is_modified || 
		company_is_modified || 
		author_is_modified || 
		roomtypeid_is_modified || 
		ratetypeid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        folioid_is_modified = false;
        name_is_modified = false;
        rate_is_modified = false;
        ratetype_is_modified = false;
        guestname_is_modified = false;
        pax_is_modified = false;
        arraivaldate_is_modified = false;
        departuredate_is_modified = false;
        company_is_modified = false;
        author_is_modified = false;
        roomtypeid_is_modified = false;
        ratetypeid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VsGuestcheckedinlistBean bean) {
        setFolioid(bean.getFolioid());
        setName(bean.getName());
        setRate(bean.getRate());
        setRatetype(bean.getRatetype());
        setGuestname(bean.getGuestname());
        setPax(bean.getPax());
        setArraivaldate(bean.getArraivaldate());
        setDeparturedate(bean.getDeparturedate());
        setCompany(bean.getCompany());
        setAuthor(bean.getAuthor());
        setRoomtypeid(bean.getRoomtypeid());
        setRatetypeid(bean.getRatetypeid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[vs_guestcheckedinlist] "
                 + "\n - vs_guestcheckedinlist.folioid = " + (folioid_is_initialized ? ("[" + (folioid == null ? null : folioid.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedinlist.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedinlist.rate = " + (rate_is_initialized ? ("[" + (rate == null ? null : rate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedinlist.ratetype = " + (ratetype_is_initialized ? ("[" + (ratetype == null ? null : ratetype.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedinlist.guestname = " + (guestname_is_initialized ? ("[" + (guestname == null ? null : guestname.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedinlist.pax = " + (pax_is_initialized ? ("[" + (pax == null ? null : pax.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedinlist.arraivaldate = " + (arraivaldate_is_initialized ? ("[" + (arraivaldate == null ? null : arraivaldate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedinlist.departuredate = " + (departuredate_is_initialized ? ("[" + (departuredate == null ? null : departuredate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedinlist.company = " + (company_is_initialized ? ("[" + (company == null ? null : company.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedinlist.author = " + (author_is_initialized ? ("[" + (author == null ? null : author.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedinlist.roomtypeid = " + (roomtypeid_is_initialized ? ("[" + (roomtypeid == null ? null : roomtypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedinlist.ratetypeid = " + (ratetypeid_is_initialized ? ("[" + (ratetypeid == null ? null : ratetypeid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
