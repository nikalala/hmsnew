// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the VsArrivallistBean objects.
 */
public class VsArrivallistComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for VsArrivallistComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new VsArrivallistComparator(VsArrivallistManager.RESERVATIONID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>VsArrivallistManager.ID_RESERVATIONID
     *   <li>VsArrivallistManager.ID_GUESTNAME
     *   <li>VsArrivallistManager.ID_NAME
     *   <li>VsArrivallistManager.ID_FLOAT8
     *   <li>VsArrivallistManager.ID_ARRAIVALDATE
     *   <li>VsArrivallistManager.ID_DEPARTUREDATE
     *   <li>VsArrivallistManager.ID_PAX
     *   <li>VsArrivallistManager.ID_RTYPE
     *   <li>VsArrivallistManager.ID_COMPANY
     *   <li>VsArrivallistManager.ID_USER
     * </ul>
     */
    public VsArrivallistComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for VsArrivallistComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new VsArrivallistComparator(VsArrivallistManager.RESERVATIONID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>VsArrivallistManager.ID_RESERVATIONID
     *   <li>VsArrivallistManager.ID_GUESTNAME
     *   <li>VsArrivallistManager.ID_NAME
     *   <li>VsArrivallistManager.ID_FLOAT8
     *   <li>VsArrivallistManager.ID_ARRAIVALDATE
     *   <li>VsArrivallistManager.ID_DEPARTUREDATE
     *   <li>VsArrivallistManager.ID_PAX
     *   <li>VsArrivallistManager.ID_RTYPE
     *   <li>VsArrivallistManager.ID_COMPANY
     *   <li>VsArrivallistManager.ID_USER
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public VsArrivallistComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        VsArrivallistBean b1 = (VsArrivallistBean)pObj1;
        VsArrivallistBean b2 = (VsArrivallistBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case VsArrivallistManager.ID_RESERVATIONID:
                if (b1.getReservationid() == null && b2.getReservationid() != null) {
                    iReturn = -1;
                } else if (b1.getReservationid() == null && b2.getReservationid() == null) {
                    iReturn = 0;
                } else if (b1.getReservationid() != null && b2.getReservationid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getReservationid().compareTo(b2.getReservationid());
                }
                break;
            case VsArrivallistManager.ID_GUESTNAME:
                if (b1.getGuestname() == null && b2.getGuestname() != null) {
                    iReturn = -1;
                } else if (b1.getGuestname() == null && b2.getGuestname() == null) {
                    iReturn = 0;
                } else if (b1.getGuestname() != null && b2.getGuestname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getGuestname().compareTo(b2.getGuestname());
                }
                break;
            case VsArrivallistManager.ID_NAME:
                if (b1.getName() == null && b2.getName() != null) {
                    iReturn = -1;
                } else if (b1.getName() == null && b2.getName() == null) {
                    iReturn = 0;
                } else if (b1.getName() != null && b2.getName() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getName().compareTo(b2.getName());
                }
                break;
            case VsArrivallistManager.ID_FLOAT8:
                if (b1.getFloat8() == null && b2.getFloat8() != null) {
                    iReturn = -1;
                } else if (b1.getFloat8() == null && b2.getFloat8() == null) {
                    iReturn = 0;
                } else if (b1.getFloat8() != null && b2.getFloat8() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getFloat8().compareTo(b2.getFloat8());
                }
                break;
            case VsArrivallistManager.ID_ARRAIVALDATE:
                if (b1.getArraivaldate() == null && b2.getArraivaldate() != null) {
                    iReturn = -1;
                } else if (b1.getArraivaldate() == null && b2.getArraivaldate() == null) {
                    iReturn = 0;
                } else if (b1.getArraivaldate() != null && b2.getArraivaldate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getArraivaldate().compareTo(b2.getArraivaldate());
                }
                break;
            case VsArrivallistManager.ID_DEPARTUREDATE:
                if (b1.getDeparturedate() == null && b2.getDeparturedate() != null) {
                    iReturn = -1;
                } else if (b1.getDeparturedate() == null && b2.getDeparturedate() == null) {
                    iReturn = 0;
                } else if (b1.getDeparturedate() != null && b2.getDeparturedate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getDeparturedate().compareTo(b2.getDeparturedate());
                }
                break;
            case VsArrivallistManager.ID_PAX:
                if (b1.getPax() == null && b2.getPax() != null) {
                    iReturn = -1;
                } else if (b1.getPax() == null && b2.getPax() == null) {
                    iReturn = 0;
                } else if (b1.getPax() != null && b2.getPax() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPax().compareTo(b2.getPax());
                }
                break;
            case VsArrivallistManager.ID_RTYPE:
                if (b1.getRtype() == null && b2.getRtype() != null) {
                    iReturn = -1;
                } else if (b1.getRtype() == null && b2.getRtype() == null) {
                    iReturn = 0;
                } else if (b1.getRtype() != null && b2.getRtype() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRtype().compareTo(b2.getRtype());
                }
                break;
            case VsArrivallistManager.ID_COMPANY:
                if (b1.getCompany() == null && b2.getCompany() != null) {
                    iReturn = -1;
                } else if (b1.getCompany() == null && b2.getCompany() == null) {
                    iReturn = 0;
                } else if (b1.getCompany() != null && b2.getCompany() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCompany().compareTo(b2.getCompany());
                }
                break;
            case VsArrivallistManager.ID_USER:
                if (b1.getUser() == null && b2.getUser() != null) {
                    iReturn = -1;
                } else if (b1.getUser() == null && b2.getUser() == null) {
                    iReturn = 0;
                } else if (b1.getUser() != null && b2.getUser() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getUser().compareTo(b2.getUser());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
