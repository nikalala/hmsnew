// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class VsActivityBean
// extends+ 

// extends- 

{
    private Long reservationid;
    private boolean reservationid_is_modified = false;
    private boolean reservationid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private String guestname;
    private boolean guestname_is_modified = false;
    private boolean guestname_is_initialized = false;
    
    private java.sql.Timestamp arraivaldate;
    private boolean arraivaldate_is_modified = false;
    private boolean arraivaldate_is_initialized = false;
    
    private java.sql.Timestamp departuredate;
    private boolean departuredate_is_modified = false;
    private boolean departuredate_is_initialized = false;
    
    private Integer nights;
    private boolean nights_is_modified = false;
    private boolean nights_is_initialized = false;
    
    private String roomname;
    private boolean roomname_is_modified = false;
    private boolean roomname_is_initialized = false;
    
    private String bsource;
    private boolean bsource_is_modified = false;
    private boolean bsource_is_initialized = false;
    
    private String taname;
    private boolean taname_is_modified = false;
    private boolean taname_is_initialized = false;
    
    private String voucher;
    private boolean voucher_is_modified = false;
    private boolean voucher_is_initialized = false;
    
    private String ratetype;
    private boolean ratetype_is_modified = false;
    private boolean ratetype_is_initialized = false;
    
    private Double nrml;
    private boolean nrml_is_modified = false;
    private boolean nrml_is_initialized = false;
    
    private Double offered;
    private boolean offered_is_modified = false;
    private boolean offered_is_initialized = false;
    
    private String paymentmethod;
    private boolean paymentmethod_is_modified = false;
    private boolean paymentmethod_is_initialized = false;
    
    private String author;
    private boolean author_is_modified = false;
    private boolean author_is_initialized = false;
    
    private Long taid;
    private boolean taid_is_modified = false;
    private boolean taid_is_initialized = false;
    
    private Integer ratetypeid;
    private boolean ratetypeid_is_modified = false;
    private boolean ratetypeid_is_initialized = false;
    
    private Integer personnelid;
    private boolean personnelid_is_modified = false;
    private boolean personnelid_is_initialized = false;
    
    private Integer roomtypeid;
    private boolean roomtypeid_is_modified = false;
    private boolean roomtypeid_is_initialized = false;
    
    private Integer bid;
    private boolean bid_is_modified = false;
    private boolean bid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VsActivityBean()
    {
    }
    
    /**
     * Getter method for reservationid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.reservationid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of reservationid
     */
    public Long getReservationid()
    {
        return reservationid; 
    }

    /**
     * Setter method for reservationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationid
     */
    public void setReservationid(Long newVal) {
        if ((newVal != null && this.reservationid != null && (newVal.compareTo(this.reservationid) == 0)) || 
            (newVal == null && this.reservationid == null && reservationid_is_initialized)) {
            return; 
        } 
        this.reservationid = newVal; 
        reservationid_is_modified = true; 
        reservationid_is_initialized = true; 
    }

    /**
     * Setter method for reservationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationid
     */
    public void setReservationid(long newVal) {
        setReservationid(new Long(newVal));
    }

    /**
     * Determines if the reservationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationidModified() {
        return reservationid_is_modified; 
    }

    /**
     * Determines if the reservationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationidInitialized() {
        return reservationid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.regdate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for guestname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.guestname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of guestname
     */
    public String getGuestname()
    {
        return guestname; 
    }

    /**
     * Setter method for guestname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to guestname
     */
    public void setGuestname(String newVal) {
        if ((newVal != null && this.guestname != null && (newVal.compareTo(this.guestname) == 0)) || 
            (newVal == null && this.guestname == null && guestname_is_initialized)) {
            return; 
        } 
        this.guestname = newVal; 
        guestname_is_modified = true; 
        guestname_is_initialized = true; 
    }

    /**
     * Determines if the guestname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestnameModified() {
        return guestname_is_modified; 
    }

    /**
     * Determines if the guestname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestnameInitialized() {
        return guestname_is_initialized; 
    }

    /**
     * Getter method for arraivaldate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.arraivaldate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of arraivaldate
     */
    public java.sql.Timestamp getArraivaldate()
    {
        return arraivaldate; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.arraivaldate != null && (newVal.compareTo(this.arraivaldate) == 0)) || 
            (newVal == null && this.arraivaldate == null && arraivaldate_is_initialized)) {
            return; 
        } 
        this.arraivaldate = newVal; 
        arraivaldate_is_modified = true; 
        arraivaldate_is_initialized = true; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(long newVal) {
        setArraivaldate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the arraivaldate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isArraivaldateModified() {
        return arraivaldate_is_modified; 
    }

    /**
     * Determines if the arraivaldate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isArraivaldateInitialized() {
        return arraivaldate_is_initialized; 
    }

    /**
     * Getter method for departuredate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.departuredate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of departuredate
     */
    public java.sql.Timestamp getDeparturedate()
    {
        return departuredate; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.departuredate != null && (newVal.compareTo(this.departuredate) == 0)) || 
            (newVal == null && this.departuredate == null && departuredate_is_initialized)) {
            return; 
        } 
        this.departuredate = newVal; 
        departuredate_is_modified = true; 
        departuredate_is_initialized = true; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(long newVal) {
        setDeparturedate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the departuredate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeparturedateModified() {
        return departuredate_is_modified; 
    }

    /**
     * Determines if the departuredate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeparturedateInitialized() {
        return departuredate_is_initialized; 
    }

    /**
     * Getter method for nights.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.nights
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of nights
     */
    public Integer getNights()
    {
        return nights; 
    }

    /**
     * Setter method for nights.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to nights
     */
    public void setNights(Integer newVal) {
        if ((newVal != null && this.nights != null && (newVal.compareTo(this.nights) == 0)) || 
            (newVal == null && this.nights == null && nights_is_initialized)) {
            return; 
        } 
        this.nights = newVal; 
        nights_is_modified = true; 
        nights_is_initialized = true; 
    }

    /**
     * Setter method for nights.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to nights
     */
    public void setNights(int newVal) {
        setNights(new Integer(newVal));
    }

    /**
     * Determines if the nights has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNightsModified() {
        return nights_is_modified; 
    }

    /**
     * Determines if the nights has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNightsInitialized() {
        return nights_is_initialized; 
    }

    /**
     * Getter method for roomname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.roomname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of roomname
     */
    public String getRoomname()
    {
        return roomname; 
    }

    /**
     * Setter method for roomname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomname
     */
    public void setRoomname(String newVal) {
        if ((newVal != null && this.roomname != null && (newVal.compareTo(this.roomname) == 0)) || 
            (newVal == null && this.roomname == null && roomname_is_initialized)) {
            return; 
        } 
        this.roomname = newVal; 
        roomname_is_modified = true; 
        roomname_is_initialized = true; 
    }

    /**
     * Determines if the roomname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomnameModified() {
        return roomname_is_modified; 
    }

    /**
     * Determines if the roomname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomnameInitialized() {
        return roomname_is_initialized; 
    }

    /**
     * Getter method for bsource.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.bsource
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of bsource
     */
    public String getBsource()
    {
        return bsource; 
    }

    /**
     * Setter method for bsource.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to bsource
     */
    public void setBsource(String newVal) {
        if ((newVal != null && this.bsource != null && (newVal.compareTo(this.bsource) == 0)) || 
            (newVal == null && this.bsource == null && bsource_is_initialized)) {
            return; 
        } 
        this.bsource = newVal; 
        bsource_is_modified = true; 
        bsource_is_initialized = true; 
    }

    /**
     * Determines if the bsource has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBsourceModified() {
        return bsource_is_modified; 
    }

    /**
     * Determines if the bsource has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBsourceInitialized() {
        return bsource_is_initialized; 
    }

    /**
     * Getter method for taname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.taname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of taname
     */
    public String getTaname()
    {
        return taname; 
    }

    /**
     * Setter method for taname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to taname
     */
    public void setTaname(String newVal) {
        if ((newVal != null && this.taname != null && (newVal.compareTo(this.taname) == 0)) || 
            (newVal == null && this.taname == null && taname_is_initialized)) {
            return; 
        } 
        this.taname = newVal; 
        taname_is_modified = true; 
        taname_is_initialized = true; 
    }

    /**
     * Determines if the taname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTanameModified() {
        return taname_is_modified; 
    }

    /**
     * Determines if the taname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTanameInitialized() {
        return taname_is_initialized; 
    }

    /**
     * Getter method for voucher.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.voucher
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of voucher
     */
    public String getVoucher()
    {
        return voucher; 
    }

    /**
     * Setter method for voucher.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to voucher
     */
    public void setVoucher(String newVal) {
        if ((newVal != null && this.voucher != null && (newVal.compareTo(this.voucher) == 0)) || 
            (newVal == null && this.voucher == null && voucher_is_initialized)) {
            return; 
        } 
        this.voucher = newVal; 
        voucher_is_modified = true; 
        voucher_is_initialized = true; 
    }

    /**
     * Determines if the voucher has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVoucherModified() {
        return voucher_is_modified; 
    }

    /**
     * Determines if the voucher has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVoucherInitialized() {
        return voucher_is_initialized; 
    }

    /**
     * Getter method for ratetype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.ratetype
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of ratetype
     */
    public String getRatetype()
    {
        return ratetype; 
    }

    /**
     * Setter method for ratetype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ratetype
     */
    public void setRatetype(String newVal) {
        if ((newVal != null && this.ratetype != null && (newVal.compareTo(this.ratetype) == 0)) || 
            (newVal == null && this.ratetype == null && ratetype_is_initialized)) {
            return; 
        } 
        this.ratetype = newVal; 
        ratetype_is_modified = true; 
        ratetype_is_initialized = true; 
    }

    /**
     * Determines if the ratetype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRatetypeModified() {
        return ratetype_is_modified; 
    }

    /**
     * Determines if the ratetype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRatetypeInitialized() {
        return ratetype_is_initialized; 
    }

    /**
     * Getter method for nrml.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.nrml
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of nrml
     */
    public Double getNrml()
    {
        return nrml; 
    }

    /**
     * Setter method for nrml.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to nrml
     */
    public void setNrml(Double newVal) {
        if ((newVal != null && this.nrml != null && (newVal.compareTo(this.nrml) == 0)) || 
            (newVal == null && this.nrml == null && nrml_is_initialized)) {
            return; 
        } 
        this.nrml = newVal; 
        nrml_is_modified = true; 
        nrml_is_initialized = true; 
    }

    /**
     * Setter method for nrml.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to nrml
     */
    public void setNrml(double newVal) {
        setNrml(new Double(newVal));
    }

    /**
     * Determines if the nrml has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNrmlModified() {
        return nrml_is_modified; 
    }

    /**
     * Determines if the nrml has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNrmlInitialized() {
        return nrml_is_initialized; 
    }

    /**
     * Getter method for offered.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.offered
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of offered
     */
    public Double getOffered()
    {
        return offered; 
    }

    /**
     * Setter method for offered.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to offered
     */
    public void setOffered(Double newVal) {
        if ((newVal != null && this.offered != null && (newVal.compareTo(this.offered) == 0)) || 
            (newVal == null && this.offered == null && offered_is_initialized)) {
            return; 
        } 
        this.offered = newVal; 
        offered_is_modified = true; 
        offered_is_initialized = true; 
    }

    /**
     * Setter method for offered.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to offered
     */
    public void setOffered(double newVal) {
        setOffered(new Double(newVal));
    }

    /**
     * Determines if the offered has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOfferedModified() {
        return offered_is_modified; 
    }

    /**
     * Determines if the offered has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOfferedInitialized() {
        return offered_is_initialized; 
    }

    /**
     * Getter method for paymentmethod.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.paymentmethod
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of paymentmethod
     */
    public String getPaymentmethod()
    {
        return paymentmethod; 
    }

    /**
     * Setter method for paymentmethod.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to paymentmethod
     */
    public void setPaymentmethod(String newVal) {
        if ((newVal != null && this.paymentmethod != null && (newVal.compareTo(this.paymentmethod) == 0)) || 
            (newVal == null && this.paymentmethod == null && paymentmethod_is_initialized)) {
            return; 
        } 
        this.paymentmethod = newVal; 
        paymentmethod_is_modified = true; 
        paymentmethod_is_initialized = true; 
    }

    /**
     * Determines if the paymentmethod has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaymentmethodModified() {
        return paymentmethod_is_modified; 
    }

    /**
     * Determines if the paymentmethod has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaymentmethodInitialized() {
        return paymentmethod_is_initialized; 
    }

    /**
     * Getter method for author.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.author
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of author
     */
    public String getAuthor()
    {
        return author; 
    }

    /**
     * Setter method for author.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to author
     */
    public void setAuthor(String newVal) {
        if ((newVal != null && this.author != null && (newVal.compareTo(this.author) == 0)) || 
            (newVal == null && this.author == null && author_is_initialized)) {
            return; 
        } 
        this.author = newVal; 
        author_is_modified = true; 
        author_is_initialized = true; 
    }

    /**
     * Determines if the author has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAuthorModified() {
        return author_is_modified; 
    }

    /**
     * Determines if the author has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAuthorInitialized() {
        return author_is_initialized; 
    }

    /**
     * Getter method for taid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.taid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of taid
     */
    public Long getTaid()
    {
        return taid; 
    }

    /**
     * Setter method for taid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to taid
     */
    public void setTaid(Long newVal) {
        if ((newVal != null && this.taid != null && (newVal.compareTo(this.taid) == 0)) || 
            (newVal == null && this.taid == null && taid_is_initialized)) {
            return; 
        } 
        this.taid = newVal; 
        taid_is_modified = true; 
        taid_is_initialized = true; 
    }

    /**
     * Setter method for taid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to taid
     */
    public void setTaid(long newVal) {
        setTaid(new Long(newVal));
    }

    /**
     * Determines if the taid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTaidModified() {
        return taid_is_modified; 
    }

    /**
     * Determines if the taid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTaidInitialized() {
        return taid_is_initialized; 
    }

    /**
     * Getter method for ratetypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.ratetypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of ratetypeid
     */
    public Integer getRatetypeid()
    {
        return ratetypeid; 
    }

    /**
     * Setter method for ratetypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ratetypeid
     */
    public void setRatetypeid(Integer newVal) {
        if ((newVal != null && this.ratetypeid != null && (newVal.compareTo(this.ratetypeid) == 0)) || 
            (newVal == null && this.ratetypeid == null && ratetypeid_is_initialized)) {
            return; 
        } 
        this.ratetypeid = newVal; 
        ratetypeid_is_modified = true; 
        ratetypeid_is_initialized = true; 
    }

    /**
     * Setter method for ratetypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ratetypeid
     */
    public void setRatetypeid(int newVal) {
        setRatetypeid(new Integer(newVal));
    }

    /**
     * Determines if the ratetypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRatetypeidModified() {
        return ratetypeid_is_modified; 
    }

    /**
     * Determines if the ratetypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRatetypeidInitialized() {
        return ratetypeid_is_initialized; 
    }

    /**
     * Getter method for personnelid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.personnelid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of personnelid
     */
    public Integer getPersonnelid()
    {
        return personnelid; 
    }

    /**
     * Setter method for personnelid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to personnelid
     */
    public void setPersonnelid(Integer newVal) {
        if ((newVal != null && this.personnelid != null && (newVal.compareTo(this.personnelid) == 0)) || 
            (newVal == null && this.personnelid == null && personnelid_is_initialized)) {
            return; 
        } 
        this.personnelid = newVal; 
        personnelid_is_modified = true; 
        personnelid_is_initialized = true; 
    }

    /**
     * Setter method for personnelid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to personnelid
     */
    public void setPersonnelid(int newVal) {
        setPersonnelid(new Integer(newVal));
    }

    /**
     * Determines if the personnelid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPersonnelidModified() {
        return personnelid_is_modified; 
    }

    /**
     * Determines if the personnelid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPersonnelidInitialized() {
        return personnelid_is_initialized; 
    }

    /**
     * Getter method for roomtypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.roomtypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of roomtypeid
     */
    public Integer getRoomtypeid()
    {
        return roomtypeid; 
    }

    /**
     * Setter method for roomtypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomtypeid
     */
    public void setRoomtypeid(Integer newVal) {
        if ((newVal != null && this.roomtypeid != null && (newVal.compareTo(this.roomtypeid) == 0)) || 
            (newVal == null && this.roomtypeid == null && roomtypeid_is_initialized)) {
            return; 
        } 
        this.roomtypeid = newVal; 
        roomtypeid_is_modified = true; 
        roomtypeid_is_initialized = true; 
    }

    /**
     * Setter method for roomtypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to roomtypeid
     */
    public void setRoomtypeid(int newVal) {
        setRoomtypeid(new Integer(newVal));
    }

    /**
     * Determines if the roomtypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomtypeidModified() {
        return roomtypeid_is_modified; 
    }

    /**
     * Determines if the roomtypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomtypeidInitialized() {
        return roomtypeid_is_initialized; 
    }

    /**
     * Getter method for bid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_activity.bid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of bid
     */
    public Integer getBid()
    {
        return bid; 
    }

    /**
     * Setter method for bid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to bid
     */
    public void setBid(Integer newVal) {
        if ((newVal != null && this.bid != null && (newVal.compareTo(this.bid) == 0)) || 
            (newVal == null && this.bid == null && bid_is_initialized)) {
            return; 
        } 
        this.bid = newVal; 
        bid_is_modified = true; 
        bid_is_initialized = true; 
    }

    /**
     * Setter method for bid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to bid
     */
    public void setBid(int newVal) {
        setBid(new Integer(newVal));
    }

    /**
     * Determines if the bid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBidModified() {
        return bid_is_modified; 
    }

    /**
     * Determines if the bid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBidInitialized() {
        return bid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return reservationid_is_modified || 
		regdate_is_modified || 
		guestname_is_modified || 
		arraivaldate_is_modified || 
		departuredate_is_modified || 
		nights_is_modified || 
		roomname_is_modified || 
		bsource_is_modified || 
		taname_is_modified || 
		voucher_is_modified || 
		ratetype_is_modified || 
		nrml_is_modified || 
		offered_is_modified || 
		paymentmethod_is_modified || 
		author_is_modified || 
		taid_is_modified || 
		ratetypeid_is_modified || 
		personnelid_is_modified || 
		roomtypeid_is_modified || 
		bid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        reservationid_is_modified = false;
        regdate_is_modified = false;
        guestname_is_modified = false;
        arraivaldate_is_modified = false;
        departuredate_is_modified = false;
        nights_is_modified = false;
        roomname_is_modified = false;
        bsource_is_modified = false;
        taname_is_modified = false;
        voucher_is_modified = false;
        ratetype_is_modified = false;
        nrml_is_modified = false;
        offered_is_modified = false;
        paymentmethod_is_modified = false;
        author_is_modified = false;
        taid_is_modified = false;
        ratetypeid_is_modified = false;
        personnelid_is_modified = false;
        roomtypeid_is_modified = false;
        bid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VsActivityBean bean) {
        setReservationid(bean.getReservationid());
        setRegdate(bean.getRegdate());
        setGuestname(bean.getGuestname());
        setArraivaldate(bean.getArraivaldate());
        setDeparturedate(bean.getDeparturedate());
        setNights(bean.getNights());
        setRoomname(bean.getRoomname());
        setBsource(bean.getBsource());
        setTaname(bean.getTaname());
        setVoucher(bean.getVoucher());
        setRatetype(bean.getRatetype());
        setNrml(bean.getNrml());
        setOffered(bean.getOffered());
        setPaymentmethod(bean.getPaymentmethod());
        setAuthor(bean.getAuthor());
        setTaid(bean.getTaid());
        setRatetypeid(bean.getRatetypeid());
        setPersonnelid(bean.getPersonnelid());
        setRoomtypeid(bean.getRoomtypeid());
        setBid(bean.getBid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[vs_activity] "
                 + "\n - vs_activity.reservationid = " + (reservationid_is_initialized ? ("[" + (reservationid == null ? null : reservationid.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.guestname = " + (guestname_is_initialized ? ("[" + (guestname == null ? null : guestname.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.arraivaldate = " + (arraivaldate_is_initialized ? ("[" + (arraivaldate == null ? null : arraivaldate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.departuredate = " + (departuredate_is_initialized ? ("[" + (departuredate == null ? null : departuredate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.nights = " + (nights_is_initialized ? ("[" + (nights == null ? null : nights.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.roomname = " + (roomname_is_initialized ? ("[" + (roomname == null ? null : roomname.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.bsource = " + (bsource_is_initialized ? ("[" + (bsource == null ? null : bsource.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.taname = " + (taname_is_initialized ? ("[" + (taname == null ? null : taname.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.voucher = " + (voucher_is_initialized ? ("[" + (voucher == null ? null : voucher.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.ratetype = " + (ratetype_is_initialized ? ("[" + (ratetype == null ? null : ratetype.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.nrml = " + (nrml_is_initialized ? ("[" + (nrml == null ? null : nrml.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.offered = " + (offered_is_initialized ? ("[" + (offered == null ? null : offered.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.paymentmethod = " + (paymentmethod_is_initialized ? ("[" + (paymentmethod == null ? null : paymentmethod.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.author = " + (author_is_initialized ? ("[" + (author == null ? null : author.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.taid = " + (taid_is_initialized ? ("[" + (taid == null ? null : taid.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.ratetypeid = " + (ratetypeid_is_initialized ? ("[" + (ratetypeid == null ? null : ratetypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.personnelid = " + (personnelid_is_initialized ? ("[" + (personnelid == null ? null : personnelid.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.roomtypeid = " + (roomtypeid_is_initialized ? ("[" + (roomtypeid == null ? null : roomtypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_activity.bid = " + (bid_is_initialized ? ("[" + (bid == null ? null : bid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
