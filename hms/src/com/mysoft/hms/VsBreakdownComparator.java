// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.util.Comparator;
// imports+ 

// imports- 


/**
 * Comparator class is used to sort the VsBreakdownBean objects.
 */
public class VsBreakdownComparator implements Comparator
// extends+ 

// extends- 

{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for VsBreakdownComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new VsBreakdownComparator(VsBreakdownManager.RESNO, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>VsBreakdownManager.ID_RESNO
     *   <li>VsBreakdownManager.ID_ARRAIVALDATE
     *   <li>VsBreakdownManager.ID_DEPARTUREDATE
     *   <li>VsBreakdownManager.ID_GUESTNAME
     *   <li>VsBreakdownManager.ID_ROOMNAME
     *   <li>VsBreakdownManager.ID_BOOKINGSTATUS
     *   <li>VsBreakdownManager.ID_BSOURCE
     *   <li>VsBreakdownManager.ID_VOUCHER
     *   <li>VsBreakdownManager.ID_TOTALCHAGE
     * </ul>
     */
    public VsBreakdownComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for VsBreakdownComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new VsBreakdownComparator(VsBreakdownManager.RESNO, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>VsBreakdownManager.ID_RESNO
     *   <li>VsBreakdownManager.ID_ARRAIVALDATE
     *   <li>VsBreakdownManager.ID_DEPARTUREDATE
     *   <li>VsBreakdownManager.ID_GUESTNAME
     *   <li>VsBreakdownManager.ID_ROOMNAME
     *   <li>VsBreakdownManager.ID_BOOKINGSTATUS
     *   <li>VsBreakdownManager.ID_BSOURCE
     *   <li>VsBreakdownManager.ID_VOUCHER
     *   <li>VsBreakdownManager.ID_TOTALCHAGE
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public VsBreakdownComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        VsBreakdownBean b1 = (VsBreakdownBean)pObj1;
        VsBreakdownBean b2 = (VsBreakdownBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case VsBreakdownManager.ID_RESNO:
                if (b1.getResno() == null && b2.getResno() != null) {
                    iReturn = -1;
                } else if (b1.getResno() == null && b2.getResno() == null) {
                    iReturn = 0;
                } else if (b1.getResno() != null && b2.getResno() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getResno().compareTo(b2.getResno());
                }
                break;
            case VsBreakdownManager.ID_ARRAIVALDATE:
                if (b1.getArraivaldate() == null && b2.getArraivaldate() != null) {
                    iReturn = -1;
                } else if (b1.getArraivaldate() == null && b2.getArraivaldate() == null) {
                    iReturn = 0;
                } else if (b1.getArraivaldate() != null && b2.getArraivaldate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getArraivaldate().compareTo(b2.getArraivaldate());
                }
                break;
            case VsBreakdownManager.ID_DEPARTUREDATE:
                if (b1.getDeparturedate() == null && b2.getDeparturedate() != null) {
                    iReturn = -1;
                } else if (b1.getDeparturedate() == null && b2.getDeparturedate() == null) {
                    iReturn = 0;
                } else if (b1.getDeparturedate() != null && b2.getDeparturedate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getDeparturedate().compareTo(b2.getDeparturedate());
                }
                break;
            case VsBreakdownManager.ID_GUESTNAME:
                if (b1.getGuestname() == null && b2.getGuestname() != null) {
                    iReturn = -1;
                } else if (b1.getGuestname() == null && b2.getGuestname() == null) {
                    iReturn = 0;
                } else if (b1.getGuestname() != null && b2.getGuestname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getGuestname().compareTo(b2.getGuestname());
                }
                break;
            case VsBreakdownManager.ID_ROOMNAME:
                if (b1.getRoomname() == null && b2.getRoomname() != null) {
                    iReturn = -1;
                } else if (b1.getRoomname() == null && b2.getRoomname() == null) {
                    iReturn = 0;
                } else if (b1.getRoomname() != null && b2.getRoomname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRoomname().compareTo(b2.getRoomname());
                }
                break;
            case VsBreakdownManager.ID_BOOKINGSTATUS:
                if (b1.getBookingstatus() == null && b2.getBookingstatus() != null) {
                    iReturn = -1;
                } else if (b1.getBookingstatus() == null && b2.getBookingstatus() == null) {
                    iReturn = 0;
                } else if (b1.getBookingstatus() != null && b2.getBookingstatus() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getBookingstatus().compareTo(b2.getBookingstatus());
                }
                break;
            case VsBreakdownManager.ID_BSOURCE:
                if (b1.getBsource() == null && b2.getBsource() != null) {
                    iReturn = -1;
                } else if (b1.getBsource() == null && b2.getBsource() == null) {
                    iReturn = 0;
                } else if (b1.getBsource() != null && b2.getBsource() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getBsource().compareTo(b2.getBsource());
                }
                break;
            case VsBreakdownManager.ID_VOUCHER:
                if (b1.getVoucher() == null && b2.getVoucher() != null) {
                    iReturn = -1;
                } else if (b1.getVoucher() == null && b2.getVoucher() == null) {
                    iReturn = 0;
                } else if (b1.getVoucher() != null && b2.getVoucher() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getVoucher().compareTo(b2.getVoucher());
                }
                break;
            case VsBreakdownManager.ID_TOTALCHAGE:
                if (b1.getTotalchage() == null && b2.getTotalchage() != null) {
                    iReturn = -1;
                } else if (b1.getTotalchage() == null && b2.getTotalchage() == null) {
                    iReturn = 0;
                } else if (b1.getTotalchage() != null && b2.getTotalchage() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getTotalchage().compareTo(b2.getTotalchage());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 

}
