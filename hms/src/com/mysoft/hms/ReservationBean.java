// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class ReservationBean
// extends+ 

// extends- 

{
    private Long reservationid;
    private boolean reservationid_is_modified = false;
    private boolean reservationid_is_initialized = false;
    
    private java.sql.Timestamp arraivaldate;
    private boolean arraivaldate_is_modified = false;
    private boolean arraivaldate_is_initialized = false;
    
    private java.sql.Timestamp departuredate;
    private boolean departuredate_is_modified = false;
    private boolean departuredate_is_initialized = false;
    
    private Integer reservationtypeid;
    private boolean reservationtypeid_is_modified = false;
    private boolean reservationtypeid_is_initialized = false;
    
    private Integer ratetype;
    private boolean ratetype_is_modified = false;
    private boolean ratetype_is_initialized = false;
    
    private Double manualrate;
    private boolean manualrate_is_modified = false;
    private boolean manualrate_is_initialized = false;
    
    private Long contractcontragentid;
    private boolean contractcontragentid_is_modified = false;
    private boolean contractcontragentid_is_initialized = false;
    
    private Integer billto;
    private boolean billto_is_modified = false;
    private boolean billto_is_initialized = false;
    
    private String taxexemptionreason;
    private boolean taxexemptionreason_is_modified = false;
    private boolean taxexemptionreason_is_initialized = false;
    
    private Integer paymentmode;
    private boolean paymentmode_is_modified = false;
    private boolean paymentmode_is_initialized = false;
    
    private Integer paymentmethodid;
    private boolean paymentmethodid_is_modified = false;
    private boolean paymentmethodid_is_initialized = false;
    
    private Long paymentcontragentid;
    private boolean paymentcontragentid_is_modified = false;
    private boolean paymentcontragentid_is_initialized = false;
    
    private java.util.Date advancepaymentdate;
    private boolean advancepaymentdate_is_modified = false;
    private boolean advancepaymentdate_is_initialized = false;
    
    private Double advancepaymentamount;
    private boolean advancepaymentamount_is_modified = false;
    private boolean advancepaymentamount_is_initialized = false;
    
    private Long companyid;
    private boolean companyid_is_modified = false;
    private boolean companyid_is_initialized = false;
    
    private Integer marketid;
    private boolean marketid_is_modified = false;
    private boolean marketid_is_initialized = false;
    
    private Integer bsourceid;
    private boolean bsourceid_is_modified = false;
    private boolean bsourceid_is_initialized = false;
    
    private Long taid;
    private boolean taid_is_modified = false;
    private boolean taid_is_initialized = false;
    
    private Integer commissionplan;
    private boolean commissionplan_is_modified = false;
    private boolean commissionplan_is_initialized = false;
    
    private Double commissionvalue;
    private boolean commissionvalue_is_modified = false;
    private boolean commissionvalue_is_initialized = false;
    
    private String voucher;
    private boolean voucher_is_modified = false;
    private boolean voucher_is_initialized = false;
    
    private Integer discountid;
    private boolean discountid_is_modified = false;
    private boolean discountid_is_initialized = false;
    
    private Integer postingtype;
    private boolean postingtype_is_modified = false;
    private boolean postingtype_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Double postingvalueevery;
    private boolean postingvalueevery_is_modified = false;
    private boolean postingvalueevery_is_initialized = false;
    
    private String num;
    private boolean num_is_modified = false;
    private boolean num_is_initialized = false;
    
    private Boolean nomanualtax;
    private boolean nomanualtax_is_modified = false;
    private boolean nomanualtax_is_initialized = false;
    
    private Boolean notax;
    private boolean notax_is_modified = false;
    private boolean notax_is_initialized = false;
    
    private Integer discountnights;
    private boolean discountnights_is_modified = false;
    private boolean discountnights_is_initialized = false;
    
    private Integer status;
    private boolean status_is_modified = false;
    private boolean status_is_initialized = false;
    
    private Boolean walkin;
    private boolean walkin_is_modified = false;
    private boolean walkin_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ReservationBean()
    {
    }
    
    /**
     * Getter method for reservationid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.reservationid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of reservationid
     */
    public Long getReservationid()
    {
        return reservationid; 
    }

    /**
     * Setter method for reservationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationid
     */
    public void setReservationid(Long newVal) {
        if ((newVal != null && this.reservationid != null && (newVal.compareTo(this.reservationid) == 0)) || 
            (newVal == null && this.reservationid == null && reservationid_is_initialized)) {
            return; 
        } 
        this.reservationid = newVal; 
        reservationid_is_modified = true; 
        reservationid_is_initialized = true; 
    }

    /**
     * Setter method for reservationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationid
     */
    public void setReservationid(long newVal) {
        setReservationid(new Long(newVal));
    }

    /**
     * Determines if the reservationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationidModified() {
        return reservationid_is_modified; 
    }

    /**
     * Determines if the reservationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationidInitialized() {
        return reservationid_is_initialized; 
    }

    /**
     * Getter method for arraivaldate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.arraivaldate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of arraivaldate
     */
    public java.sql.Timestamp getArraivaldate()
    {
        return arraivaldate; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.arraivaldate != null && (newVal.compareTo(this.arraivaldate) == 0)) || 
            (newVal == null && this.arraivaldate == null && arraivaldate_is_initialized)) {
            return; 
        } 
        this.arraivaldate = newVal; 
        arraivaldate_is_modified = true; 
        arraivaldate_is_initialized = true; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(long newVal) {
        setArraivaldate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the arraivaldate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isArraivaldateModified() {
        return arraivaldate_is_modified; 
    }

    /**
     * Determines if the arraivaldate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isArraivaldateInitialized() {
        return arraivaldate_is_initialized; 
    }

    /**
     * Getter method for departuredate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.departuredate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of departuredate
     */
    public java.sql.Timestamp getDeparturedate()
    {
        return departuredate; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.departuredate != null && (newVal.compareTo(this.departuredate) == 0)) || 
            (newVal == null && this.departuredate == null && departuredate_is_initialized)) {
            return; 
        } 
        this.departuredate = newVal; 
        departuredate_is_modified = true; 
        departuredate_is_initialized = true; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(long newVal) {
        setDeparturedate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the departuredate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeparturedateModified() {
        return departuredate_is_modified; 
    }

    /**
     * Determines if the departuredate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeparturedateInitialized() {
        return departuredate_is_initialized; 
    }

    /**
     * Getter method for reservationtypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.reservationtypeid
     * <li> foreign key: reservationtype.reservationtypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of reservationtypeid
     */
    public Integer getReservationtypeid()
    {
        return reservationtypeid; 
    }

    /**
     * Setter method for reservationtypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationtypeid
     */
    public void setReservationtypeid(Integer newVal) {
        if ((newVal != null && this.reservationtypeid != null && (newVal.compareTo(this.reservationtypeid) == 0)) || 
            (newVal == null && this.reservationtypeid == null && reservationtypeid_is_initialized)) {
            return; 
        } 
        this.reservationtypeid = newVal; 
        reservationtypeid_is_modified = true; 
        reservationtypeid_is_initialized = true; 
    }

    /**
     * Setter method for reservationtypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationtypeid
     */
    public void setReservationtypeid(int newVal) {
        setReservationtypeid(new Integer(newVal));
    }

    /**
     * Determines if the reservationtypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationtypeidModified() {
        return reservationtypeid_is_modified; 
    }

    /**
     * Determines if the reservationtypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationtypeidInitialized() {
        return reservationtypeid_is_initialized; 
    }

    /**
     * Getter method for ratetype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.ratetype
     * <li>comments: 0 - normal, 1 - contrac, 2 - tmanual
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of ratetype
     */
    public Integer getRatetype()
    {
        return ratetype; 
    }

    /**
     * Setter method for ratetype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ratetype
     */
    public void setRatetype(Integer newVal) {
        if ((newVal != null && this.ratetype != null && (newVal.compareTo(this.ratetype) == 0)) || 
            (newVal == null && this.ratetype == null && ratetype_is_initialized)) {
            return; 
        } 
        this.ratetype = newVal; 
        ratetype_is_modified = true; 
        ratetype_is_initialized = true; 
    }

    /**
     * Setter method for ratetype.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ratetype
     */
    public void setRatetype(int newVal) {
        setRatetype(new Integer(newVal));
    }

    /**
     * Determines if the ratetype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRatetypeModified() {
        return ratetype_is_modified; 
    }

    /**
     * Determines if the ratetype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRatetypeInitialized() {
        return ratetype_is_initialized; 
    }

    /**
     * Getter method for manualrate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.manualrate
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of manualrate
     */
    public Double getManualrate()
    {
        return manualrate; 
    }

    /**
     * Setter method for manualrate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to manualrate
     */
    public void setManualrate(Double newVal) {
        if ((newVal != null && this.manualrate != null && (newVal.compareTo(this.manualrate) == 0)) || 
            (newVal == null && this.manualrate == null && manualrate_is_initialized)) {
            return; 
        } 
        this.manualrate = newVal; 
        manualrate_is_modified = true; 
        manualrate_is_initialized = true; 
    }

    /**
     * Setter method for manualrate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to manualrate
     */
    public void setManualrate(double newVal) {
        setManualrate(new Double(newVal));
    }

    /**
     * Determines if the manualrate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isManualrateModified() {
        return manualrate_is_modified; 
    }

    /**
     * Determines if the manualrate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isManualrateInitialized() {
        return manualrate_is_initialized; 
    }

    /**
     * Getter method for contractcontragentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.contractcontragentid
     * <li> foreign key: contragent.contragentid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractcontragentid
     */
    public Long getContractcontragentid()
    {
        return contractcontragentid; 
    }

    /**
     * Setter method for contractcontragentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractcontragentid
     */
    public void setContractcontragentid(Long newVal) {
        if ((newVal != null && this.contractcontragentid != null && (newVal.compareTo(this.contractcontragentid) == 0)) || 
            (newVal == null && this.contractcontragentid == null && contractcontragentid_is_initialized)) {
            return; 
        } 
        this.contractcontragentid = newVal; 
        contractcontragentid_is_modified = true; 
        contractcontragentid_is_initialized = true; 
    }

    /**
     * Setter method for contractcontragentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractcontragentid
     */
    public void setContractcontragentid(long newVal) {
        setContractcontragentid(new Long(newVal));
    }

    /**
     * Determines if the contractcontragentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractcontragentidModified() {
        return contractcontragentid_is_modified; 
    }

    /**
     * Determines if the contractcontragentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractcontragentidInitialized() {
        return contractcontragentid_is_initialized; 
    }

    /**
     * Getter method for billto.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.billto
     * <li>comments: 0 - Company, 1 - Group Owner, 2 - Guest, 3 - Room and tx to company, extras to guest
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of billto
     */
    public Integer getBillto()
    {
        return billto; 
    }

    /**
     * Setter method for billto.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to billto
     */
    public void setBillto(Integer newVal) {
        if ((newVal != null && this.billto != null && (newVal.compareTo(this.billto) == 0)) || 
            (newVal == null && this.billto == null && billto_is_initialized)) {
            return; 
        } 
        this.billto = newVal; 
        billto_is_modified = true; 
        billto_is_initialized = true; 
    }

    /**
     * Setter method for billto.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to billto
     */
    public void setBillto(int newVal) {
        setBillto(new Integer(newVal));
    }

    /**
     * Determines if the billto has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBilltoModified() {
        return billto_is_modified; 
    }

    /**
     * Determines if the billto has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBilltoInitialized() {
        return billto_is_initialized; 
    }

    /**
     * Getter method for taxexemptionreason.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.taxexemptionreason
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of taxexemptionreason
     */
    public String getTaxexemptionreason()
    {
        return taxexemptionreason; 
    }

    /**
     * Setter method for taxexemptionreason.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to taxexemptionreason
     */
    public void setTaxexemptionreason(String newVal) {
        if ((newVal != null && this.taxexemptionreason != null && (newVal.compareTo(this.taxexemptionreason) == 0)) || 
            (newVal == null && this.taxexemptionreason == null && taxexemptionreason_is_initialized)) {
            return; 
        } 
        this.taxexemptionreason = newVal; 
        taxexemptionreason_is_modified = true; 
        taxexemptionreason_is_initialized = true; 
    }

    /**
     * Determines if the taxexemptionreason has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTaxexemptionreasonModified() {
        return taxexemptionreason_is_modified; 
    }

    /**
     * Determines if the taxexemptionreason has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTaxexemptionreasonInitialized() {
        return taxexemptionreason_is_initialized; 
    }

    /**
     * Getter method for paymentmode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.paymentmode
     * <li>comments: 0 - Cash, 1 - Credit
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of paymentmode
     */
    public Integer getPaymentmode()
    {
        return paymentmode; 
    }

    /**
     * Setter method for paymentmode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to paymentmode
     */
    public void setPaymentmode(Integer newVal) {
        if ((newVal != null && this.paymentmode != null && (newVal.compareTo(this.paymentmode) == 0)) || 
            (newVal == null && this.paymentmode == null && paymentmode_is_initialized)) {
            return; 
        } 
        this.paymentmode = newVal; 
        paymentmode_is_modified = true; 
        paymentmode_is_initialized = true; 
    }

    /**
     * Setter method for paymentmode.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to paymentmode
     */
    public void setPaymentmode(int newVal) {
        setPaymentmode(new Integer(newVal));
    }

    /**
     * Determines if the paymentmode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaymentmodeModified() {
        return paymentmode_is_modified; 
    }

    /**
     * Determines if the paymentmode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaymentmodeInitialized() {
        return paymentmode_is_initialized; 
    }

    /**
     * Getter method for paymentmethodid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.paymentmethodid
     * <li> foreign key: paymentmethod.paymentmethodid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of paymentmethodid
     */
    public Integer getPaymentmethodid()
    {
        return paymentmethodid; 
    }

    /**
     * Setter method for paymentmethodid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to paymentmethodid
     */
    public void setPaymentmethodid(Integer newVal) {
        if ((newVal != null && this.paymentmethodid != null && (newVal.compareTo(this.paymentmethodid) == 0)) || 
            (newVal == null && this.paymentmethodid == null && paymentmethodid_is_initialized)) {
            return; 
        } 
        this.paymentmethodid = newVal; 
        paymentmethodid_is_modified = true; 
        paymentmethodid_is_initialized = true; 
    }

    /**
     * Setter method for paymentmethodid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to paymentmethodid
     */
    public void setPaymentmethodid(int newVal) {
        setPaymentmethodid(new Integer(newVal));
    }

    /**
     * Determines if the paymentmethodid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaymentmethodidModified() {
        return paymentmethodid_is_modified; 
    }

    /**
     * Determines if the paymentmethodid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaymentmethodidInitialized() {
        return paymentmethodid_is_initialized; 
    }

    /**
     * Getter method for paymentcontragentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.paymentcontragentid
     * <li> foreign key: contragent.contragentid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of paymentcontragentid
     */
    public Long getPaymentcontragentid()
    {
        return paymentcontragentid; 
    }

    /**
     * Setter method for paymentcontragentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to paymentcontragentid
     */
    public void setPaymentcontragentid(Long newVal) {
        if ((newVal != null && this.paymentcontragentid != null && (newVal.compareTo(this.paymentcontragentid) == 0)) || 
            (newVal == null && this.paymentcontragentid == null && paymentcontragentid_is_initialized)) {
            return; 
        } 
        this.paymentcontragentid = newVal; 
        paymentcontragentid_is_modified = true; 
        paymentcontragentid_is_initialized = true; 
    }

    /**
     * Setter method for paymentcontragentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to paymentcontragentid
     */
    public void setPaymentcontragentid(long newVal) {
        setPaymentcontragentid(new Long(newVal));
    }

    /**
     * Determines if the paymentcontragentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaymentcontragentidModified() {
        return paymentcontragentid_is_modified; 
    }

    /**
     * Determines if the paymentcontragentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaymentcontragentidInitialized() {
        return paymentcontragentid_is_initialized; 
    }

    /**
     * Getter method for advancepaymentdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.advancepaymentdate
     * <li>column size: 13
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of advancepaymentdate
     */
    public java.util.Date getAdvancepaymentdate()
    {
        return advancepaymentdate; 
    }

    /**
     * Setter method for advancepaymentdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to advancepaymentdate
     */
    public void setAdvancepaymentdate(java.util.Date newVal) {
        if ((newVal != null && this.advancepaymentdate != null && (newVal.compareTo(this.advancepaymentdate) == 0)) || 
            (newVal == null && this.advancepaymentdate == null && advancepaymentdate_is_initialized)) {
            return; 
        } 
        this.advancepaymentdate = newVal; 
        advancepaymentdate_is_modified = true; 
        advancepaymentdate_is_initialized = true; 
    }

    /**
     * Setter method for advancepaymentdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to advancepaymentdate
     */
    public void setAdvancepaymentdate(long newVal) {
        setAdvancepaymentdate(new java.util.Date(newVal));
    }

    /**
     * Determines if the advancepaymentdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAdvancepaymentdateModified() {
        return advancepaymentdate_is_modified; 
    }

    /**
     * Determines if the advancepaymentdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAdvancepaymentdateInitialized() {
        return advancepaymentdate_is_initialized; 
    }

    /**
     * Getter method for advancepaymentamount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.advancepaymentamount
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of advancepaymentamount
     */
    public Double getAdvancepaymentamount()
    {
        return advancepaymentamount; 
    }

    /**
     * Setter method for advancepaymentamount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to advancepaymentamount
     */
    public void setAdvancepaymentamount(Double newVal) {
        if ((newVal != null && this.advancepaymentamount != null && (newVal.compareTo(this.advancepaymentamount) == 0)) || 
            (newVal == null && this.advancepaymentamount == null && advancepaymentamount_is_initialized)) {
            return; 
        } 
        this.advancepaymentamount = newVal; 
        advancepaymentamount_is_modified = true; 
        advancepaymentamount_is_initialized = true; 
    }

    /**
     * Setter method for advancepaymentamount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to advancepaymentamount
     */
    public void setAdvancepaymentamount(double newVal) {
        setAdvancepaymentamount(new Double(newVal));
    }

    /**
     * Determines if the advancepaymentamount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAdvancepaymentamountModified() {
        return advancepaymentamount_is_modified; 
    }

    /**
     * Determines if the advancepaymentamount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAdvancepaymentamountInitialized() {
        return advancepaymentamount_is_initialized; 
    }

    /**
     * Getter method for companyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.companyid
     * <li> foreign key: contragent.contragentid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of companyid
     */
    public Long getCompanyid()
    {
        return companyid; 
    }

    /**
     * Setter method for companyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to companyid
     */
    public void setCompanyid(Long newVal) {
        if ((newVal != null && this.companyid != null && (newVal.compareTo(this.companyid) == 0)) || 
            (newVal == null && this.companyid == null && companyid_is_initialized)) {
            return; 
        } 
        this.companyid = newVal; 
        companyid_is_modified = true; 
        companyid_is_initialized = true; 
    }

    /**
     * Setter method for companyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to companyid
     */
    public void setCompanyid(long newVal) {
        setCompanyid(new Long(newVal));
    }

    /**
     * Determines if the companyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompanyidModified() {
        return companyid_is_modified; 
    }

    /**
     * Determines if the companyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompanyidInitialized() {
        return companyid_is_initialized; 
    }

    /**
     * Getter method for marketid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.marketid
     * <li> foreign key: market.marketid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of marketid
     */
    public Integer getMarketid()
    {
        return marketid; 
    }

    /**
     * Setter method for marketid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to marketid
     */
    public void setMarketid(Integer newVal) {
        if ((newVal != null && this.marketid != null && (newVal.compareTo(this.marketid) == 0)) || 
            (newVal == null && this.marketid == null && marketid_is_initialized)) {
            return; 
        } 
        this.marketid = newVal; 
        marketid_is_modified = true; 
        marketid_is_initialized = true; 
    }

    /**
     * Setter method for marketid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to marketid
     */
    public void setMarketid(int newVal) {
        setMarketid(new Integer(newVal));
    }

    /**
     * Determines if the marketid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMarketidModified() {
        return marketid_is_modified; 
    }

    /**
     * Determines if the marketid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMarketidInitialized() {
        return marketid_is_initialized; 
    }

    /**
     * Getter method for bsourceid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.bsourceid
     * <li> foreign key: bsource.bsourceid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of bsourceid
     */
    public Integer getBsourceid()
    {
        return bsourceid; 
    }

    /**
     * Setter method for bsourceid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to bsourceid
     */
    public void setBsourceid(Integer newVal) {
        if ((newVal != null && this.bsourceid != null && (newVal.compareTo(this.bsourceid) == 0)) || 
            (newVal == null && this.bsourceid == null && bsourceid_is_initialized)) {
            return; 
        } 
        this.bsourceid = newVal; 
        bsourceid_is_modified = true; 
        bsourceid_is_initialized = true; 
    }

    /**
     * Setter method for bsourceid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to bsourceid
     */
    public void setBsourceid(int newVal) {
        setBsourceid(new Integer(newVal));
    }

    /**
     * Determines if the bsourceid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBsourceidModified() {
        return bsourceid_is_modified; 
    }

    /**
     * Determines if the bsourceid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBsourceidInitialized() {
        return bsourceid_is_initialized; 
    }

    /**
     * Getter method for taid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.taid
     * <li> foreign key: contragent.contragentid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of taid
     */
    public Long getTaid()
    {
        return taid; 
    }

    /**
     * Setter method for taid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to taid
     */
    public void setTaid(Long newVal) {
        if ((newVal != null && this.taid != null && (newVal.compareTo(this.taid) == 0)) || 
            (newVal == null && this.taid == null && taid_is_initialized)) {
            return; 
        } 
        this.taid = newVal; 
        taid_is_modified = true; 
        taid_is_initialized = true; 
    }

    /**
     * Setter method for taid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to taid
     */
    public void setTaid(long newVal) {
        setTaid(new Long(newVal));
    }

    /**
     * Determines if the taid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTaidModified() {
        return taid_is_modified; 
    }

    /**
     * Determines if the taid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTaidInitialized() {
        return taid_is_initialized; 
    }

    /**
     * Getter method for commissionplan.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.commissionplan
     * <li>comments: 0 - % on All nights, 1 - Fixed per night, 2 - Fixed per stay
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of commissionplan
     */
    public Integer getCommissionplan()
    {
        return commissionplan; 
    }

    /**
     * Setter method for commissionplan.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to commissionplan
     */
    public void setCommissionplan(Integer newVal) {
        if ((newVal != null && this.commissionplan != null && (newVal.compareTo(this.commissionplan) == 0)) || 
            (newVal == null && this.commissionplan == null && commissionplan_is_initialized)) {
            return; 
        } 
        this.commissionplan = newVal; 
        commissionplan_is_modified = true; 
        commissionplan_is_initialized = true; 
    }

    /**
     * Setter method for commissionplan.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to commissionplan
     */
    public void setCommissionplan(int newVal) {
        setCommissionplan(new Integer(newVal));
    }

    /**
     * Determines if the commissionplan has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCommissionplanModified() {
        return commissionplan_is_modified; 
    }

    /**
     * Determines if the commissionplan has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCommissionplanInitialized() {
        return commissionplan_is_initialized; 
    }

    /**
     * Getter method for commissionvalue.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.commissionvalue
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of commissionvalue
     */
    public Double getCommissionvalue()
    {
        return commissionvalue; 
    }

    /**
     * Setter method for commissionvalue.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to commissionvalue
     */
    public void setCommissionvalue(Double newVal) {
        if ((newVal != null && this.commissionvalue != null && (newVal.compareTo(this.commissionvalue) == 0)) || 
            (newVal == null && this.commissionvalue == null && commissionvalue_is_initialized)) {
            return; 
        } 
        this.commissionvalue = newVal; 
        commissionvalue_is_modified = true; 
        commissionvalue_is_initialized = true; 
    }

    /**
     * Setter method for commissionvalue.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to commissionvalue
     */
    public void setCommissionvalue(double newVal) {
        setCommissionvalue(new Double(newVal));
    }

    /**
     * Determines if the commissionvalue has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCommissionvalueModified() {
        return commissionvalue_is_modified; 
    }

    /**
     * Determines if the commissionvalue has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCommissionvalueInitialized() {
        return commissionvalue_is_initialized; 
    }

    /**
     * Getter method for voucher.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.voucher
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of voucher
     */
    public String getVoucher()
    {
        return voucher; 
    }

    /**
     * Setter method for voucher.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to voucher
     */
    public void setVoucher(String newVal) {
        if ((newVal != null && this.voucher != null && (newVal.compareTo(this.voucher) == 0)) || 
            (newVal == null && this.voucher == null && voucher_is_initialized)) {
            return; 
        } 
        this.voucher = newVal; 
        voucher_is_modified = true; 
        voucher_is_initialized = true; 
    }

    /**
     * Determines if the voucher has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVoucherModified() {
        return voucher_is_modified; 
    }

    /**
     * Determines if the voucher has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVoucherInitialized() {
        return voucher_is_initialized; 
    }

    /**
     * Getter method for discountid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.discountid
     * <li> foreign key: discount.discountid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of discountid
     */
    public Integer getDiscountid()
    {
        return discountid; 
    }

    /**
     * Setter method for discountid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to discountid
     */
    public void setDiscountid(Integer newVal) {
        if ((newVal != null && this.discountid != null && (newVal.compareTo(this.discountid) == 0)) || 
            (newVal == null && this.discountid == null && discountid_is_initialized)) {
            return; 
        } 
        this.discountid = newVal; 
        discountid_is_modified = true; 
        discountid_is_initialized = true; 
    }

    /**
     * Setter method for discountid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to discountid
     */
    public void setDiscountid(int newVal) {
        setDiscountid(new Integer(newVal));
    }

    /**
     * Determines if the discountid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDiscountidModified() {
        return discountid_is_modified; 
    }

    /**
     * Determines if the discountid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDiscountidInitialized() {
        return discountid_is_initialized; 
    }

    /**
     * Getter method for postingtype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.postingtype
     * <li>comments: 0 - After every, 1 - On all nights, 2 - On last night
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of postingtype
     */
    public Integer getPostingtype()
    {
        return postingtype; 
    }

    /**
     * Setter method for postingtype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to postingtype
     */
    public void setPostingtype(Integer newVal) {
        if ((newVal != null && this.postingtype != null && (newVal.compareTo(this.postingtype) == 0)) || 
            (newVal == null && this.postingtype == null && postingtype_is_initialized)) {
            return; 
        } 
        this.postingtype = newVal; 
        postingtype_is_modified = true; 
        postingtype_is_initialized = true; 
    }

    /**
     * Setter method for postingtype.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to postingtype
     */
    public void setPostingtype(int newVal) {
        setPostingtype(new Integer(newVal));
    }

    /**
     * Determines if the postingtype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPostingtypeModified() {
        return postingtype_is_modified; 
    }

    /**
     * Determines if the postingtype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPostingtypeInitialized() {
        return postingtype_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.regbyid
     * <li> foreign key: personnel.personnelid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.regdate
     * <li>default value: now()
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for postingvalueevery.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.postingvalueevery
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of postingvalueevery
     */
    public Double getPostingvalueevery()
    {
        return postingvalueevery; 
    }

    /**
     * Setter method for postingvalueevery.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to postingvalueevery
     */
    public void setPostingvalueevery(Double newVal) {
        if ((newVal != null && this.postingvalueevery != null && (newVal.compareTo(this.postingvalueevery) == 0)) || 
            (newVal == null && this.postingvalueevery == null && postingvalueevery_is_initialized)) {
            return; 
        } 
        this.postingvalueevery = newVal; 
        postingvalueevery_is_modified = true; 
        postingvalueevery_is_initialized = true; 
    }

    /**
     * Setter method for postingvalueevery.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to postingvalueevery
     */
    public void setPostingvalueevery(double newVal) {
        setPostingvalueevery(new Double(newVal));
    }

    /**
     * Determines if the postingvalueevery has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPostingvalueeveryModified() {
        return postingvalueevery_is_modified; 
    }

    /**
     * Determines if the postingvalueevery has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPostingvalueeveryInitialized() {
        return postingvalueevery_is_initialized; 
    }

    /**
     * Getter method for num.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.num
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of num
     */
    public String getNum()
    {
        return num; 
    }

    /**
     * Setter method for num.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to num
     */
    public void setNum(String newVal) {
        if ((newVal != null && this.num != null && (newVal.compareTo(this.num) == 0)) || 
            (newVal == null && this.num == null && num_is_initialized)) {
            return; 
        } 
        this.num = newVal; 
        num_is_modified = true; 
        num_is_initialized = true; 
    }

    /**
     * Determines if the num has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNumModified() {
        return num_is_modified; 
    }

    /**
     * Determines if the num has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNumInitialized() {
        return num_is_initialized; 
    }

    /**
     * Getter method for nomanualtax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.nomanualtax
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of nomanualtax
     */
    public Boolean getNomanualtax()
    {
        return nomanualtax; 
    }

    /**
     * Setter method for nomanualtax.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to nomanualtax
     */
    public void setNomanualtax(Boolean newVal) {
        if ((newVal != null && this.nomanualtax != null && newVal.equals(this.nomanualtax)) || 
            (newVal == null && this.nomanualtax == null && nomanualtax_is_initialized)) {
            return; 
        } 
        this.nomanualtax = newVal; 
        nomanualtax_is_modified = true; 
        nomanualtax_is_initialized = true; 
    }

    /**
     * Setter method for nomanualtax.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to nomanualtax
     */
    public void setNomanualtax(boolean newVal) {
        setNomanualtax(new Boolean(newVal));
    }

    /**
     * Determines if the nomanualtax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNomanualtaxModified() {
        return nomanualtax_is_modified; 
    }

    /**
     * Determines if the nomanualtax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNomanualtaxInitialized() {
        return nomanualtax_is_initialized; 
    }

    /**
     * Getter method for notax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.notax
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of notax
     */
    public Boolean getNotax()
    {
        return notax; 
    }

    /**
     * Setter method for notax.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to notax
     */
    public void setNotax(Boolean newVal) {
        if ((newVal != null && this.notax != null && newVal.equals(this.notax)) || 
            (newVal == null && this.notax == null && notax_is_initialized)) {
            return; 
        } 
        this.notax = newVal; 
        notax_is_modified = true; 
        notax_is_initialized = true; 
    }

    /**
     * Setter method for notax.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to notax
     */
    public void setNotax(boolean newVal) {
        setNotax(new Boolean(newVal));
    }

    /**
     * Determines if the notax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNotaxModified() {
        return notax_is_modified; 
    }

    /**
     * Determines if the notax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNotaxInitialized() {
        return notax_is_initialized; 
    }

    /**
     * Getter method for discountnights.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.discountnights
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of discountnights
     */
    public Integer getDiscountnights()
    {
        return discountnights; 
    }

    /**
     * Setter method for discountnights.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to discountnights
     */
    public void setDiscountnights(Integer newVal) {
        if ((newVal != null && this.discountnights != null && (newVal.compareTo(this.discountnights) == 0)) || 
            (newVal == null && this.discountnights == null && discountnights_is_initialized)) {
            return; 
        } 
        this.discountnights = newVal; 
        discountnights_is_modified = true; 
        discountnights_is_initialized = true; 
    }

    /**
     * Setter method for discountnights.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to discountnights
     */
    public void setDiscountnights(int newVal) {
        setDiscountnights(new Integer(newVal));
    }

    /**
     * Determines if the discountnights has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDiscountnightsModified() {
        return discountnights_is_modified; 
    }

    /**
     * Determines if the discountnights has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDiscountnightsInitialized() {
        return discountnights_is_initialized; 
    }

    /**
     * Getter method for status.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.status
     * <li>comments: -1 - finished, 0 - active, 1 - canceled, 2 - no show, 3 - voided, 4 - checked out
     * <li>default value: 0
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of status
     */
    public Integer getStatus()
    {
        return status; 
    }

    /**
     * Setter method for status.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(Integer newVal) {
        if ((newVal != null && this.status != null && (newVal.compareTo(this.status) == 0)) || 
            (newVal == null && this.status == null && status_is_initialized)) {
            return; 
        } 
        this.status = newVal; 
        status_is_modified = true; 
        status_is_initialized = true; 
    }

    /**
     * Setter method for status.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(int newVal) {
        setStatus(new Integer(newVal));
    }

    /**
     * Determines if the status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatusModified() {
        return status_is_modified; 
    }

    /**
     * Determines if the status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatusInitialized() {
        return status_is_initialized; 
    }

    /**
     * Getter method for walkin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservation.walkin
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of walkin
     */
    public Boolean getWalkin()
    {
        return walkin; 
    }

    /**
     * Setter method for walkin.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to walkin
     */
    public void setWalkin(Boolean newVal) {
        if ((newVal != null && this.walkin != null && newVal.equals(this.walkin)) || 
            (newVal == null && this.walkin == null && walkin_is_initialized)) {
            return; 
        } 
        this.walkin = newVal; 
        walkin_is_modified = true; 
        walkin_is_initialized = true; 
    }

    /**
     * Setter method for walkin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to walkin
     */
    public void setWalkin(boolean newVal) {
        setWalkin(new Boolean(newVal));
    }

    /**
     * Determines if the walkin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWalkinModified() {
        return walkin_is_modified; 
    }

    /**
     * Determines if the walkin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWalkinInitialized() {
        return walkin_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return reservationid_is_modified || 
		arraivaldate_is_modified || 
		departuredate_is_modified || 
		reservationtypeid_is_modified || 
		ratetype_is_modified || 
		manualrate_is_modified || 
		contractcontragentid_is_modified || 
		billto_is_modified || 
		taxexemptionreason_is_modified || 
		paymentmode_is_modified || 
		paymentmethodid_is_modified || 
		paymentcontragentid_is_modified || 
		advancepaymentdate_is_modified || 
		advancepaymentamount_is_modified || 
		companyid_is_modified || 
		marketid_is_modified || 
		bsourceid_is_modified || 
		taid_is_modified || 
		commissionplan_is_modified || 
		commissionvalue_is_modified || 
		voucher_is_modified || 
		discountid_is_modified || 
		postingtype_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		postingvalueevery_is_modified || 
		num_is_modified || 
		nomanualtax_is_modified || 
		notax_is_modified || 
		discountnights_is_modified || 
		status_is_modified || 
		walkin_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        reservationid_is_modified = false;
        arraivaldate_is_modified = false;
        departuredate_is_modified = false;
        reservationtypeid_is_modified = false;
        ratetype_is_modified = false;
        manualrate_is_modified = false;
        contractcontragentid_is_modified = false;
        billto_is_modified = false;
        taxexemptionreason_is_modified = false;
        paymentmode_is_modified = false;
        paymentmethodid_is_modified = false;
        paymentcontragentid_is_modified = false;
        advancepaymentdate_is_modified = false;
        advancepaymentamount_is_modified = false;
        companyid_is_modified = false;
        marketid_is_modified = false;
        bsourceid_is_modified = false;
        taid_is_modified = false;
        commissionplan_is_modified = false;
        commissionvalue_is_modified = false;
        voucher_is_modified = false;
        discountid_is_modified = false;
        postingtype_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        postingvalueevery_is_modified = false;
        num_is_modified = false;
        nomanualtax_is_modified = false;
        notax_is_modified = false;
        discountnights_is_modified = false;
        status_is_modified = false;
        walkin_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ReservationBean bean) {
        setReservationid(bean.getReservationid());
        setArraivaldate(bean.getArraivaldate());
        setDeparturedate(bean.getDeparturedate());
        setReservationtypeid(bean.getReservationtypeid());
        setRatetype(bean.getRatetype());
        setManualrate(bean.getManualrate());
        setContractcontragentid(bean.getContractcontragentid());
        setBillto(bean.getBillto());
        setTaxexemptionreason(bean.getTaxexemptionreason());
        setPaymentmode(bean.getPaymentmode());
        setPaymentmethodid(bean.getPaymentmethodid());
        setPaymentcontragentid(bean.getPaymentcontragentid());
        setAdvancepaymentdate(bean.getAdvancepaymentdate());
        setAdvancepaymentamount(bean.getAdvancepaymentamount());
        setCompanyid(bean.getCompanyid());
        setMarketid(bean.getMarketid());
        setBsourceid(bean.getBsourceid());
        setTaid(bean.getTaid());
        setCommissionplan(bean.getCommissionplan());
        setCommissionvalue(bean.getCommissionvalue());
        setVoucher(bean.getVoucher());
        setDiscountid(bean.getDiscountid());
        setPostingtype(bean.getPostingtype());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setPostingvalueevery(bean.getPostingvalueevery());
        setNum(bean.getNum());
        setNomanualtax(bean.getNomanualtax());
        setNotax(bean.getNotax());
        setDiscountnights(bean.getDiscountnights());
        setStatus(bean.getStatus());
        setWalkin(bean.getWalkin());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[reservation] "
                 + "\n - reservation.reservationid = " + (reservationid_is_initialized ? ("[" + (reservationid == null ? null : reservationid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.arraivaldate = " + (arraivaldate_is_initialized ? ("[" + (arraivaldate == null ? null : arraivaldate.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.departuredate = " + (departuredate_is_initialized ? ("[" + (departuredate == null ? null : departuredate.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.reservationtypeid = " + (reservationtypeid_is_initialized ? ("[" + (reservationtypeid == null ? null : reservationtypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.ratetype = " + (ratetype_is_initialized ? ("[" + (ratetype == null ? null : ratetype.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.manualrate = " + (manualrate_is_initialized ? ("[" + (manualrate == null ? null : manualrate.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.contractcontragentid = " + (contractcontragentid_is_initialized ? ("[" + (contractcontragentid == null ? null : contractcontragentid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.billto = " + (billto_is_initialized ? ("[" + (billto == null ? null : billto.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.taxexemptionreason = " + (taxexemptionreason_is_initialized ? ("[" + (taxexemptionreason == null ? null : taxexemptionreason.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.paymentmode = " + (paymentmode_is_initialized ? ("[" + (paymentmode == null ? null : paymentmode.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.paymentmethodid = " + (paymentmethodid_is_initialized ? ("[" + (paymentmethodid == null ? null : paymentmethodid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.paymentcontragentid = " + (paymentcontragentid_is_initialized ? ("[" + (paymentcontragentid == null ? null : paymentcontragentid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.advancepaymentdate = " + (advancepaymentdate_is_initialized ? ("[" + (advancepaymentdate == null ? null : advancepaymentdate.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.advancepaymentamount = " + (advancepaymentamount_is_initialized ? ("[" + (advancepaymentamount == null ? null : advancepaymentamount.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.companyid = " + (companyid_is_initialized ? ("[" + (companyid == null ? null : companyid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.marketid = " + (marketid_is_initialized ? ("[" + (marketid == null ? null : marketid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.bsourceid = " + (bsourceid_is_initialized ? ("[" + (bsourceid == null ? null : bsourceid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.taid = " + (taid_is_initialized ? ("[" + (taid == null ? null : taid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.commissionplan = " + (commissionplan_is_initialized ? ("[" + (commissionplan == null ? null : commissionplan.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.commissionvalue = " + (commissionvalue_is_initialized ? ("[" + (commissionvalue == null ? null : commissionvalue.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.voucher = " + (voucher_is_initialized ? ("[" + (voucher == null ? null : voucher.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.discountid = " + (discountid_is_initialized ? ("[" + (discountid == null ? null : discountid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.postingtype = " + (postingtype_is_initialized ? ("[" + (postingtype == null ? null : postingtype.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.postingvalueevery = " + (postingvalueevery_is_initialized ? ("[" + (postingvalueevery == null ? null : postingvalueevery.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.num = " + (num_is_initialized ? ("[" + (num == null ? null : num.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.nomanualtax = " + (nomanualtax_is_initialized ? ("[" + (nomanualtax == null ? null : nomanualtax.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.notax = " + (notax_is_initialized ? ("[" + (notax == null ? null : notax.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.discountnights = " + (discountnights_is_initialized ? ("[" + (discountnights == null ? null : discountnights.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.status = " + (status_is_initialized ? ("[" + (status == null ? null : status.toString()) + "]") : "not initialized") + ""
                 + "\n - reservation.walkin = " + (walkin_is_initialized ? ("[" + (walkin == null ? null : walkin.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
