// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class ContragentBean
// extends+ 

// extends- 

{
    private Long contragentid;
    private boolean contragentid_is_modified = false;
    private boolean contragentid_is_initialized = false;
    
    private Integer type;
    private boolean type_is_modified = false;
    private boolean type_is_initialized = false;
    
    private Integer salutationid;
    private boolean salutationid_is_modified = false;
    private boolean salutationid_is_initialized = false;
    
    private String fname;
    private boolean fname_is_modified = false;
    private boolean fname_is_initialized = false;
    
    private String lname;
    private boolean lname_is_modified = false;
    private boolean lname_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private String address;
    private boolean address_is_modified = false;
    private boolean address_is_initialized = false;
    
    private Integer countryid;
    private boolean countryid_is_modified = false;
    private boolean countryid_is_initialized = false;
    
    private String city;
    private boolean city_is_modified = false;
    private boolean city_is_initialized = false;
    
    private String zip;
    private boolean zip_is_modified = false;
    private boolean zip_is_initialized = false;
    
    private String phone;
    private boolean phone_is_modified = false;
    private boolean phone_is_initialized = false;
    
    private String fax;
    private boolean fax_is_modified = false;
    private boolean fax_is_initialized = false;
    
    private String mobile;
    private boolean mobile_is_modified = false;
    private boolean mobile_is_initialized = false;
    
    private String email;
    private boolean email_is_modified = false;
    private boolean email_is_initialized = false;
    
    private Integer commissionplan;
    private boolean commissionplan_is_modified = false;
    private boolean commissionplan_is_initialized = false;
    
    private Double val;
    private boolean val_is_modified = false;
    private boolean val_is_initialized = false;
    
    private Integer rate;
    private boolean rate_is_modified = false;
    private boolean rate_is_initialized = false;
    
    private Double openbalance;
    private boolean openbalance_is_modified = false;
    private boolean openbalance_is_initialized = false;
    
    private Integer roominventory;
    private boolean roominventory_is_modified = false;
    private boolean roominventory_is_initialized = false;
    
    private Boolean createuser;
    private boolean createuser_is_modified = false;
    private boolean createuser_is_initialized = false;
    
    private Boolean bsource;
    private boolean bsource_is_modified = false;
    private boolean bsource_is_initialized = false;
    
    private Boolean ccblock;
    private boolean ccblock_is_modified = false;
    private boolean ccblock_is_initialized = false;
    
    private String idn;
    private boolean idn_is_modified = false;
    private boolean idn_is_initialized = false;
    
    private Integer creditterm;
    private boolean creditterm_is_modified = false;
    private boolean creditterm_is_initialized = false;
    
    private Double creditlimit;
    private boolean creditlimit_is_modified = false;
    private boolean creditlimit_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ContragentBean()
    {
    }
    
    /**
     * Getter method for contragentid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.contragentid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contragentid
     */
    public Long getContragentid()
    {
        return contragentid; 
    }

    /**
     * Setter method for contragentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contragentid
     */
    public void setContragentid(Long newVal) {
        if ((newVal != null && this.contragentid != null && (newVal.compareTo(this.contragentid) == 0)) || 
            (newVal == null && this.contragentid == null && contragentid_is_initialized)) {
            return; 
        } 
        this.contragentid = newVal; 
        contragentid_is_modified = true; 
        contragentid_is_initialized = true; 
    }

    /**
     * Setter method for contragentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contragentid
     */
    public void setContragentid(long newVal) {
        setContragentid(new Long(newVal));
    }

    /**
     * Determines if the contragentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContragentidModified() {
        return contragentid_is_modified; 
    }

    /**
     * Determines if the contragentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContragentidInitialized() {
        return contragentid_is_initialized; 
    }

    /**
     * Getter method for type.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.type
     * <li>comments: ????CODEcontragenttype
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of type
     */
    public Integer getType()
    {
        return type; 
    }

    /**
     * Setter method for type.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to type
     */
    public void setType(Integer newVal) {
        if ((newVal != null && this.type != null && (newVal.compareTo(this.type) == 0)) || 
            (newVal == null && this.type == null && type_is_initialized)) {
            return; 
        } 
        this.type = newVal; 
        type_is_modified = true; 
        type_is_initialized = true; 
    }

    /**
     * Setter method for type.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to type
     */
    public void setType(int newVal) {
        setType(new Integer(newVal));
    }

    /**
     * Determines if the type has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTypeModified() {
        return type_is_modified; 
    }

    /**
     * Determines if the type has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTypeInitialized() {
        return type_is_initialized; 
    }

    /**
     * Getter method for salutationid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.salutationid
     * <li> foreign key: salutation.salutationid
     * <li>comments: ????????? ?????
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of salutationid
     */
    public Integer getSalutationid()
    {
        return salutationid; 
    }

    /**
     * Setter method for salutationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to salutationid
     */
    public void setSalutationid(Integer newVal) {
        if ((newVal != null && this.salutationid != null && (newVal.compareTo(this.salutationid) == 0)) || 
            (newVal == null && this.salutationid == null && salutationid_is_initialized)) {
            return; 
        } 
        this.salutationid = newVal; 
        salutationid_is_modified = true; 
        salutationid_is_initialized = true; 
    }

    /**
     * Setter method for salutationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to salutationid
     */
    public void setSalutationid(int newVal) {
        setSalutationid(new Integer(newVal));
    }

    /**
     * Determines if the salutationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSalutationidModified() {
        return salutationid_is_modified; 
    }

    /**
     * Determines if the salutationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSalutationidInitialized() {
        return salutationid_is_initialized; 
    }

    /**
     * Getter method for fname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.fname
     * <li>comments: ??????
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of fname
     */
    public String getFname()
    {
        return fname; 
    }

    /**
     * Setter method for fname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fname
     */
    public void setFname(String newVal) {
        if ((newVal != null && this.fname != null && (newVal.compareTo(this.fname) == 0)) || 
            (newVal == null && this.fname == null && fname_is_initialized)) {
            return; 
        } 
        this.fname = newVal; 
        fname_is_modified = true; 
        fname_is_initialized = true; 
    }

    /**
     * Determines if the fname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFnameModified() {
        return fname_is_modified; 
    }

    /**
     * Determines if the fname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFnameInitialized() {
        return fname_is_initialized; 
    }

    /**
     * Getter method for lname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.lname
     * <li>comments: ?????
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of lname
     */
    public String getLname()
    {
        return lname; 
    }

    /**
     * Setter method for lname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lname
     */
    public void setLname(String newVal) {
        if ((newVal != null && this.lname != null && (newVal.compareTo(this.lname) == 0)) || 
            (newVal == null && this.lname == null && lname_is_initialized)) {
            return; 
        } 
        this.lname = newVal; 
        lname_is_modified = true; 
        lname_is_initialized = true; 
    }

    /**
     * Determines if the lname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLnameModified() {
        return lname_is_modified; 
    }

    /**
     * Determines if the lname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLnameInitialized() {
        return lname_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.name
     * <li>comments: ??????????
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for address.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.address
     * <li>comments: ?????????
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of address
     */
    public String getAddress()
    {
        return address; 
    }

    /**
     * Setter method for address.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to address
     */
    public void setAddress(String newVal) {
        if ((newVal != null && this.address != null && (newVal.compareTo(this.address) == 0)) || 
            (newVal == null && this.address == null && address_is_initialized)) {
            return; 
        } 
        this.address = newVal; 
        address_is_modified = true; 
        address_is_initialized = true; 
    }

    /**
     * Determines if the address has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAddressModified() {
        return address_is_modified; 
    }

    /**
     * Determines if the address has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAddressInitialized() {
        return address_is_initialized; 
    }

    /**
     * Getter method for countryid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.countryid
     * <li> foreign key: country.countryid
     * <li>comments: ???????
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of countryid
     */
    public Integer getCountryid()
    {
        return countryid; 
    }

    /**
     * Setter method for countryid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to countryid
     */
    public void setCountryid(Integer newVal) {
        if ((newVal != null && this.countryid != null && (newVal.compareTo(this.countryid) == 0)) || 
            (newVal == null && this.countryid == null && countryid_is_initialized)) {
            return; 
        } 
        this.countryid = newVal; 
        countryid_is_modified = true; 
        countryid_is_initialized = true; 
    }

    /**
     * Setter method for countryid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to countryid
     */
    public void setCountryid(int newVal) {
        setCountryid(new Integer(newVal));
    }

    /**
     * Determines if the countryid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCountryidModified() {
        return countryid_is_modified; 
    }

    /**
     * Determines if the countryid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCountryidInitialized() {
        return countryid_is_initialized; 
    }

    /**
     * Getter method for city.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.city
     * <li>comments: ??????
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of city
     */
    public String getCity()
    {
        return city; 
    }

    /**
     * Setter method for city.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to city
     */
    public void setCity(String newVal) {
        if ((newVal != null && this.city != null && (newVal.compareTo(this.city) == 0)) || 
            (newVal == null && this.city == null && city_is_initialized)) {
            return; 
        } 
        this.city = newVal; 
        city_is_modified = true; 
        city_is_initialized = true; 
    }

    /**
     * Determines if the city has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCityModified() {
        return city_is_modified; 
    }

    /**
     * Determines if the city has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCityInitialized() {
        return city_is_initialized; 
    }

    /**
     * Getter method for zip.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.zip
     * <li>comments: ???????
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of zip
     */
    public String getZip()
    {
        return zip; 
    }

    /**
     * Setter method for zip.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to zip
     */
    public void setZip(String newVal) {
        if ((newVal != null && this.zip != null && (newVal.compareTo(this.zip) == 0)) || 
            (newVal == null && this.zip == null && zip_is_initialized)) {
            return; 
        } 
        this.zip = newVal; 
        zip_is_modified = true; 
        zip_is_initialized = true; 
    }

    /**
     * Determines if the zip has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isZipModified() {
        return zip_is_modified; 
    }

    /**
     * Determines if the zip has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isZipInitialized() {
        return zip_is_initialized; 
    }

    /**
     * Getter method for phone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.phone
     * <li>comments: ????????
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of phone
     */
    public String getPhone()
    {
        return phone; 
    }

    /**
     * Setter method for phone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to phone
     */
    public void setPhone(String newVal) {
        if ((newVal != null && this.phone != null && (newVal.compareTo(this.phone) == 0)) || 
            (newVal == null && this.phone == null && phone_is_initialized)) {
            return; 
        } 
        this.phone = newVal; 
        phone_is_modified = true; 
        phone_is_initialized = true; 
    }

    /**
     * Determines if the phone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPhoneModified() {
        return phone_is_modified; 
    }

    /**
     * Determines if the phone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPhoneInitialized() {
        return phone_is_initialized; 
    }

    /**
     * Getter method for fax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.fax
     * <li>comments: ?????
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of fax
     */
    public String getFax()
    {
        return fax; 
    }

    /**
     * Setter method for fax.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fax
     */
    public void setFax(String newVal) {
        if ((newVal != null && this.fax != null && (newVal.compareTo(this.fax) == 0)) || 
            (newVal == null && this.fax == null && fax_is_initialized)) {
            return; 
        } 
        this.fax = newVal; 
        fax_is_modified = true; 
        fax_is_initialized = true; 
    }

    /**
     * Determines if the fax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFaxModified() {
        return fax_is_modified; 
    }

    /**
     * Determines if the fax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFaxInitialized() {
        return fax_is_initialized; 
    }

    /**
     * Getter method for mobile.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.mobile
     * <li>comments: ????????
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of mobile
     */
    public String getMobile()
    {
        return mobile; 
    }

    /**
     * Setter method for mobile.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mobile
     */
    public void setMobile(String newVal) {
        if ((newVal != null && this.mobile != null && (newVal.compareTo(this.mobile) == 0)) || 
            (newVal == null && this.mobile == null && mobile_is_initialized)) {
            return; 
        } 
        this.mobile = newVal; 
        mobile_is_modified = true; 
        mobile_is_initialized = true; 
    }

    /**
     * Determines if the mobile has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMobileModified() {
        return mobile_is_modified; 
    }

    /**
     * Determines if the mobile has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMobileInitialized() {
        return mobile_is_initialized; 
    }

    /**
     * Getter method for email.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.email
     * <li>comments: ???????
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of email
     */
    public String getEmail()
    {
        return email; 
    }

    /**
     * Setter method for email.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to email
     */
    public void setEmail(String newVal) {
        if ((newVal != null && this.email != null && (newVal.compareTo(this.email) == 0)) || 
            (newVal == null && this.email == null && email_is_initialized)) {
            return; 
        } 
        this.email = newVal; 
        email_is_modified = true; 
        email_is_initialized = true; 
    }

    /**
     * Determines if the email has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEmailModified() {
        return email_is_modified; 
    }

    /**
     * Determines if the email has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEmailInitialized() {
        return email_is_initialized; 
    }

    /**
     * Getter method for commissionplan.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.commissionplan
     * <li>comments: ?????????? ?????CODEcommissionplan
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of commissionplan
     */
    public Integer getCommissionplan()
    {
        return commissionplan; 
    }

    /**
     * Setter method for commissionplan.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to commissionplan
     */
    public void setCommissionplan(Integer newVal) {
        if ((newVal != null && this.commissionplan != null && (newVal.compareTo(this.commissionplan) == 0)) || 
            (newVal == null && this.commissionplan == null && commissionplan_is_initialized)) {
            return; 
        } 
        this.commissionplan = newVal; 
        commissionplan_is_modified = true; 
        commissionplan_is_initialized = true; 
    }

    /**
     * Setter method for commissionplan.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to commissionplan
     */
    public void setCommissionplan(int newVal) {
        setCommissionplan(new Integer(newVal));
    }

    /**
     * Determines if the commissionplan has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCommissionplanModified() {
        return commissionplan_is_modified; 
    }

    /**
     * Determines if the commissionplan has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCommissionplanInitialized() {
        return commissionplan_is_initialized; 
    }

    /**
     * Getter method for val.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.val
     * <li>comments: ?????
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of val
     */
    public Double getVal()
    {
        return val; 
    }

    /**
     * Setter method for val.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to val
     */
    public void setVal(Double newVal) {
        if ((newVal != null && this.val != null && (newVal.compareTo(this.val) == 0)) || 
            (newVal == null && this.val == null && val_is_initialized)) {
            return; 
        } 
        this.val = newVal; 
        val_is_modified = true; 
        val_is_initialized = true; 
    }

    /**
     * Setter method for val.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to val
     */
    public void setVal(double newVal) {
        setVal(new Double(newVal));
    }

    /**
     * Determines if the val has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isValModified() {
        return val_is_modified; 
    }

    /**
     * Determines if the val has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isValInitialized() {
        return val_is_initialized; 
    }

    /**
     * Getter method for rate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.rate
     * <li>comments: ??????CODErate
     * <li>default value: 0
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of rate
     */
    public Integer getRate()
    {
        return rate; 
    }

    /**
     * Setter method for rate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rate
     */
    public void setRate(Integer newVal) {
        if ((newVal != null && this.rate != null && (newVal.compareTo(this.rate) == 0)) || 
            (newVal == null && this.rate == null && rate_is_initialized)) {
            return; 
        } 
        this.rate = newVal; 
        rate_is_modified = true; 
        rate_is_initialized = true; 
    }

    /**
     * Setter method for rate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to rate
     */
    public void setRate(int newVal) {
        setRate(new Integer(newVal));
    }

    /**
     * Determines if the rate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRateModified() {
        return rate_is_modified; 
    }

    /**
     * Determines if the rate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRateInitialized() {
        return rate_is_initialized; 
    }

    /**
     * Getter method for openbalance.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.openbalance
     * <li>comments: ??????? ???????
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of openbalance
     */
    public Double getOpenbalance()
    {
        return openbalance; 
    }

    /**
     * Setter method for openbalance.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to openbalance
     */
    public void setOpenbalance(Double newVal) {
        if ((newVal != null && this.openbalance != null && (newVal.compareTo(this.openbalance) == 0)) || 
            (newVal == null && this.openbalance == null && openbalance_is_initialized)) {
            return; 
        } 
        this.openbalance = newVal; 
        openbalance_is_modified = true; 
        openbalance_is_initialized = true; 
    }

    /**
     * Setter method for openbalance.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to openbalance
     */
    public void setOpenbalance(double newVal) {
        setOpenbalance(new Double(newVal));
    }

    /**
     * Determines if the openbalance has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOpenbalanceModified() {
        return openbalance_is_modified; 
    }

    /**
     * Determines if the openbalance has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOpenbalanceInitialized() {
        return openbalance_is_initialized; 
    }

    /**
     * Getter method for roominventory.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.roominventory
     * <li>comments: ????? ?????CODEroominventory
     * <li>default value: 0
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of roominventory
     */
    public Integer getRoominventory()
    {
        return roominventory; 
    }

    /**
     * Setter method for roominventory.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roominventory
     */
    public void setRoominventory(Integer newVal) {
        if ((newVal != null && this.roominventory != null && (newVal.compareTo(this.roominventory) == 0)) || 
            (newVal == null && this.roominventory == null && roominventory_is_initialized)) {
            return; 
        } 
        this.roominventory = newVal; 
        roominventory_is_modified = true; 
        roominventory_is_initialized = true; 
    }

    /**
     * Setter method for roominventory.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to roominventory
     */
    public void setRoominventory(int newVal) {
        setRoominventory(new Integer(newVal));
    }

    /**
     * Determines if the roominventory has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoominventoryModified() {
        return roominventory_is_modified; 
    }

    /**
     * Determines if the roominventory has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoominventoryInitialized() {
        return roominventory_is_initialized; 
    }

    /**
     * Getter method for createuser.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.createuser
     * <li>comments: ??????? ???????????? ????????
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of createuser
     */
    public Boolean getCreateuser()
    {
        return createuser; 
    }

    /**
     * Setter method for createuser.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to createuser
     */
    public void setCreateuser(Boolean newVal) {
        if ((newVal != null && this.createuser != null && newVal.equals(this.createuser)) || 
            (newVal == null && this.createuser == null && createuser_is_initialized)) {
            return; 
        } 
        this.createuser = newVal; 
        createuser_is_modified = true; 
        createuser_is_initialized = true; 
    }

    /**
     * Setter method for createuser.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to createuser
     */
    public void setCreateuser(boolean newVal) {
        setCreateuser(new Boolean(newVal));
    }

    /**
     * Determines if the createuser has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreateuserModified() {
        return createuser_is_modified; 
    }

    /**
     * Determines if the createuser has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreateuserInitialized() {
        return createuser_is_initialized; 
    }

    /**
     * Getter method for bsource.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.bsource
     * <li>comments: ???????? ?????
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of bsource
     */
    public Boolean getBsource()
    {
        return bsource; 
    }

    /**
     * Setter method for bsource.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to bsource
     */
    public void setBsource(Boolean newVal) {
        if ((newVal != null && this.bsource != null && newVal.equals(this.bsource)) || 
            (newVal == null && this.bsource == null && bsource_is_initialized)) {
            return; 
        } 
        this.bsource = newVal; 
        bsource_is_modified = true; 
        bsource_is_initialized = true; 
    }

    /**
     * Setter method for bsource.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to bsource
     */
    public void setBsource(boolean newVal) {
        setBsource(new Boolean(newVal));
    }

    /**
     * Determines if the bsource has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBsourceModified() {
        return bsource_is_modified; 
    }

    /**
     * Determines if the bsource has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBsourceInitialized() {
        return bsource_is_initialized; 
    }

    /**
     * Getter method for ccblock.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.ccblock
     * <li>comments: CC Block
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of ccblock
     */
    public Boolean getCcblock()
    {
        return ccblock; 
    }

    /**
     * Setter method for ccblock.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to ccblock
     */
    public void setCcblock(Boolean newVal) {
        if ((newVal != null && this.ccblock != null && newVal.equals(this.ccblock)) || 
            (newVal == null && this.ccblock == null && ccblock_is_initialized)) {
            return; 
        } 
        this.ccblock = newVal; 
        ccblock_is_modified = true; 
        ccblock_is_initialized = true; 
    }

    /**
     * Setter method for ccblock.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ccblock
     */
    public void setCcblock(boolean newVal) {
        setCcblock(new Boolean(newVal));
    }

    /**
     * Determines if the ccblock has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCcblockModified() {
        return ccblock_is_modified; 
    }

    /**
     * Determines if the ccblock has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCcblockInitialized() {
        return ccblock_is_initialized; 
    }

    /**
     * Getter method for idn.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.idn
     * <li>comments: ????. ??????
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of idn
     */
    public String getIdn()
    {
        return idn; 
    }

    /**
     * Setter method for idn.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to idn
     */
    public void setIdn(String newVal) {
        if ((newVal != null && this.idn != null && (newVal.compareTo(this.idn) == 0)) || 
            (newVal == null && this.idn == null && idn_is_initialized)) {
            return; 
        } 
        this.idn = newVal; 
        idn_is_modified = true; 
        idn_is_initialized = true; 
    }

    /**
     * Determines if the idn has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIdnModified() {
        return idn_is_modified; 
    }

    /**
     * Determines if the idn has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIdnInitialized() {
        return idn_is_initialized; 
    }

    /**
     * Getter method for creditterm.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.creditterm
     * <li>comments: ???????? ??????
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of creditterm
     */
    public Integer getCreditterm()
    {
        return creditterm; 
    }

    /**
     * Setter method for creditterm.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to creditterm
     */
    public void setCreditterm(Integer newVal) {
        if ((newVal != null && this.creditterm != null && (newVal.compareTo(this.creditterm) == 0)) || 
            (newVal == null && this.creditterm == null && creditterm_is_initialized)) {
            return; 
        } 
        this.creditterm = newVal; 
        creditterm_is_modified = true; 
        creditterm_is_initialized = true; 
    }

    /**
     * Setter method for creditterm.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to creditterm
     */
    public void setCreditterm(int newVal) {
        setCreditterm(new Integer(newVal));
    }

    /**
     * Determines if the creditterm has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCredittermModified() {
        return creditterm_is_modified; 
    }

    /**
     * Determines if the creditterm has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCredittermInitialized() {
        return creditterm_is_initialized; 
    }

    /**
     * Getter method for creditlimit.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.creditlimit
     * <li>comments: ???????? ??????
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of creditlimit
     */
    public Double getCreditlimit()
    {
        return creditlimit; 
    }

    /**
     * Setter method for creditlimit.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to creditlimit
     */
    public void setCreditlimit(Double newVal) {
        if ((newVal != null && this.creditlimit != null && (newVal.compareTo(this.creditlimit) == 0)) || 
            (newVal == null && this.creditlimit == null && creditlimit_is_initialized)) {
            return; 
        } 
        this.creditlimit = newVal; 
        creditlimit_is_modified = true; 
        creditlimit_is_initialized = true; 
    }

    /**
     * Setter method for creditlimit.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to creditlimit
     */
    public void setCreditlimit(double newVal) {
        setCreditlimit(new Double(newVal));
    }

    /**
     * Determines if the creditlimit has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreditlimitModified() {
        return creditlimit_is_modified; 
    }

    /**
     * Determines if the creditlimit has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreditlimitInitialized() {
        return creditlimit_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.regbyid
     * <li> foreign key: personnel.personnelid
     * <li>comments: ??????
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.regdate
     * <li>comments: ???????????? ??????
     * <li>default value: now()
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contragent.deleted
     * <li>comments: ???????
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return contragentid_is_modified || 
		type_is_modified || 
		salutationid_is_modified || 
		fname_is_modified || 
		lname_is_modified || 
		name_is_modified || 
		address_is_modified || 
		countryid_is_modified || 
		city_is_modified || 
		zip_is_modified || 
		phone_is_modified || 
		fax_is_modified || 
		mobile_is_modified || 
		email_is_modified || 
		commissionplan_is_modified || 
		val_is_modified || 
		rate_is_modified || 
		openbalance_is_modified || 
		roominventory_is_modified || 
		createuser_is_modified || 
		bsource_is_modified || 
		ccblock_is_modified || 
		idn_is_modified || 
		creditterm_is_modified || 
		creditlimit_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		deleted_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        contragentid_is_modified = false;
        type_is_modified = false;
        salutationid_is_modified = false;
        fname_is_modified = false;
        lname_is_modified = false;
        name_is_modified = false;
        address_is_modified = false;
        countryid_is_modified = false;
        city_is_modified = false;
        zip_is_modified = false;
        phone_is_modified = false;
        fax_is_modified = false;
        mobile_is_modified = false;
        email_is_modified = false;
        commissionplan_is_modified = false;
        val_is_modified = false;
        rate_is_modified = false;
        openbalance_is_modified = false;
        roominventory_is_modified = false;
        createuser_is_modified = false;
        bsource_is_modified = false;
        ccblock_is_modified = false;
        idn_is_modified = false;
        creditterm_is_modified = false;
        creditlimit_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        deleted_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ContragentBean bean) {
        setContragentid(bean.getContragentid());
        setType(bean.getType());
        setSalutationid(bean.getSalutationid());
        setFname(bean.getFname());
        setLname(bean.getLname());
        setName(bean.getName());
        setAddress(bean.getAddress());
        setCountryid(bean.getCountryid());
        setCity(bean.getCity());
        setZip(bean.getZip());
        setPhone(bean.getPhone());
        setFax(bean.getFax());
        setMobile(bean.getMobile());
        setEmail(bean.getEmail());
        setCommissionplan(bean.getCommissionplan());
        setVal(bean.getVal());
        setRate(bean.getRate());
        setOpenbalance(bean.getOpenbalance());
        setRoominventory(bean.getRoominventory());
        setCreateuser(bean.getCreateuser());
        setBsource(bean.getBsource());
        setCcblock(bean.getCcblock());
        setIdn(bean.getIdn());
        setCreditterm(bean.getCreditterm());
        setCreditlimit(bean.getCreditlimit());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setDeleted(bean.getDeleted());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[contragent] "
                 + "\n - contragent.contragentid = " + (contragentid_is_initialized ? ("[" + (contragentid == null ? null : contragentid.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.type = " + (type_is_initialized ? ("[" + (type == null ? null : type.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.salutationid = " + (salutationid_is_initialized ? ("[" + (salutationid == null ? null : salutationid.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.fname = " + (fname_is_initialized ? ("[" + (fname == null ? null : fname.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.lname = " + (lname_is_initialized ? ("[" + (lname == null ? null : lname.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.address = " + (address_is_initialized ? ("[" + (address == null ? null : address.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.countryid = " + (countryid_is_initialized ? ("[" + (countryid == null ? null : countryid.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.city = " + (city_is_initialized ? ("[" + (city == null ? null : city.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.zip = " + (zip_is_initialized ? ("[" + (zip == null ? null : zip.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.phone = " + (phone_is_initialized ? ("[" + (phone == null ? null : phone.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.fax = " + (fax_is_initialized ? ("[" + (fax == null ? null : fax.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.mobile = " + (mobile_is_initialized ? ("[" + (mobile == null ? null : mobile.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.email = " + (email_is_initialized ? ("[" + (email == null ? null : email.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.commissionplan = " + (commissionplan_is_initialized ? ("[" + (commissionplan == null ? null : commissionplan.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.val = " + (val_is_initialized ? ("[" + (val == null ? null : val.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.rate = " + (rate_is_initialized ? ("[" + (rate == null ? null : rate.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.openbalance = " + (openbalance_is_initialized ? ("[" + (openbalance == null ? null : openbalance.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.roominventory = " + (roominventory_is_initialized ? ("[" + (roominventory == null ? null : roominventory.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.createuser = " + (createuser_is_initialized ? ("[" + (createuser == null ? null : createuser.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.bsource = " + (bsource_is_initialized ? ("[" + (bsource == null ? null : bsource.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.ccblock = " + (ccblock_is_initialized ? ("[" + (ccblock == null ? null : ccblock.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.idn = " + (idn_is_initialized ? ("[" + (idn == null ? null : idn.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.creditterm = " + (creditterm_is_initialized ? ("[" + (creditterm == null ? null : creditterm.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.creditlimit = " + (creditlimit_is_initialized ? ("[" + (creditlimit == null ? null : creditlimit.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - contragent.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
