// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class FolioitemBean
// extends+ 

// extends- 

{
    private Long folioitemid;
    private boolean folioitemid_is_modified = false;
    private boolean folioitemid_is_initialized = false;
    
    private Long folioid;
    private boolean folioid_is_modified = false;
    private boolean folioid_is_initialized = false;
    
    private Integer roomid;
    private boolean roomid_is_modified = false;
    private boolean roomid_is_initialized = false;
    
    private java.util.Date itemdate;
    private boolean itemdate_is_modified = false;
    private boolean itemdate_is_initialized = false;
    
    private String refno;
    private boolean refno_is_modified = false;
    private boolean refno_is_initialized = false;
    
    private Integer particular;
    private boolean particular_is_modified = false;
    private boolean particular_is_initialized = false;
    
    private Double amount;
    private boolean amount_is_modified = false;
    private boolean amount_is_initialized = false;
    
    private Integer extrachargeid;
    private boolean extrachargeid_is_modified = false;
    private boolean extrachargeid_is_initialized = false;
    
    private Long ordermainid;
    private boolean ordermainid_is_modified = false;
    private boolean ordermainid_is_initialized = false;
    
    private Integer discountid;
    private boolean discountid_is_modified = false;
    private boolean discountid_is_initialized = false;
    
    private Integer taxid;
    private boolean taxid_is_modified = false;
    private boolean taxid_is_initialized = false;
    
    private Long paymentid;
    private boolean paymentid_is_modified = false;
    private boolean paymentid_is_initialized = false;
    
    private Boolean zvoid;
    private boolean zvoid_is_modified = false;
    private boolean zvoid_is_initialized = false;
    
    private Boolean done;
    private boolean done_is_modified = false;
    private boolean done_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private String note;
    private boolean note_is_modified = false;
    private boolean note_is_initialized = false;
    
    private Boolean manual;
    private boolean manual_is_modified = false;
    private boolean manual_is_initialized = false;
    
    private Integer roomoper;
    private boolean roomoper_is_modified = false;
    private boolean roomoper_is_initialized = false;
    
    private Long reservationroomid;
    private boolean reservationroomid_is_modified = false;
    private boolean reservationroomid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    FolioitemBean()
    {
    }
    
    /**
     * Getter method for folioitemid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.folioitemid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of folioitemid
     */
    public Long getFolioitemid()
    {
        return folioitemid; 
    }

    /**
     * Setter method for folioitemid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to folioitemid
     */
    public void setFolioitemid(Long newVal) {
        if ((newVal != null && this.folioitemid != null && (newVal.compareTo(this.folioitemid) == 0)) || 
            (newVal == null && this.folioitemid == null && folioitemid_is_initialized)) {
            return; 
        } 
        this.folioitemid = newVal; 
        folioitemid_is_modified = true; 
        folioitemid_is_initialized = true; 
    }

    /**
     * Setter method for folioitemid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to folioitemid
     */
    public void setFolioitemid(long newVal) {
        setFolioitemid(new Long(newVal));
    }

    /**
     * Determines if the folioitemid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFolioitemidModified() {
        return folioitemid_is_modified; 
    }

    /**
     * Determines if the folioitemid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFolioitemidInitialized() {
        return folioitemid_is_initialized; 
    }

    /**
     * Getter method for folioid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.folioid
     * <li> foreign key: folio.folioid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of folioid
     */
    public Long getFolioid()
    {
        return folioid; 
    }

    /**
     * Setter method for folioid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to folioid
     */
    public void setFolioid(Long newVal) {
        if ((newVal != null && this.folioid != null && (newVal.compareTo(this.folioid) == 0)) || 
            (newVal == null && this.folioid == null && folioid_is_initialized)) {
            return; 
        } 
        this.folioid = newVal; 
        folioid_is_modified = true; 
        folioid_is_initialized = true; 
    }

    /**
     * Setter method for folioid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to folioid
     */
    public void setFolioid(long newVal) {
        setFolioid(new Long(newVal));
    }

    /**
     * Determines if the folioid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFolioidModified() {
        return folioid_is_modified; 
    }

    /**
     * Determines if the folioid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFolioidInitialized() {
        return folioid_is_initialized; 
    }

    /**
     * Getter method for roomid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.roomid
     * <li> foreign key: room.roomid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of roomid
     */
    public Integer getRoomid()
    {
        return roomid; 
    }

    /**
     * Setter method for roomid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomid
     */
    public void setRoomid(Integer newVal) {
        if ((newVal != null && this.roomid != null && (newVal.compareTo(this.roomid) == 0)) || 
            (newVal == null && this.roomid == null && roomid_is_initialized)) {
            return; 
        } 
        this.roomid = newVal; 
        roomid_is_modified = true; 
        roomid_is_initialized = true; 
    }

    /**
     * Setter method for roomid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to roomid
     */
    public void setRoomid(int newVal) {
        setRoomid(new Integer(newVal));
    }

    /**
     * Determines if the roomid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomidModified() {
        return roomid_is_modified; 
    }

    /**
     * Determines if the roomid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomidInitialized() {
        return roomid_is_initialized; 
    }

    /**
     * Getter method for itemdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.itemdate
     * <li>column size: 13
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of itemdate
     */
    public java.util.Date getItemdate()
    {
        return itemdate; 
    }

    /**
     * Setter method for itemdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to itemdate
     */
    public void setItemdate(java.util.Date newVal) {
        if ((newVal != null && this.itemdate != null && (newVal.compareTo(this.itemdate) == 0)) || 
            (newVal == null && this.itemdate == null && itemdate_is_initialized)) {
            return; 
        } 
        this.itemdate = newVal; 
        itemdate_is_modified = true; 
        itemdate_is_initialized = true; 
    }

    /**
     * Setter method for itemdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to itemdate
     */
    public void setItemdate(long newVal) {
        setItemdate(new java.util.Date(newVal));
    }

    /**
     * Determines if the itemdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isItemdateModified() {
        return itemdate_is_modified; 
    }

    /**
     * Determines if the itemdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isItemdateInitialized() {
        return itemdate_is_initialized; 
    }

    /**
     * Getter method for refno.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.refno
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of refno
     */
    public String getRefno()
    {
        return refno; 
    }

    /**
     * Setter method for refno.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to refno
     */
    public void setRefno(String newVal) {
        if ((newVal != null && this.refno != null && (newVal.compareTo(this.refno) == 0)) || 
            (newVal == null && this.refno == null && refno_is_initialized)) {
            return; 
        } 
        this.refno = newVal; 
        refno_is_modified = true; 
        refno_is_initialized = true; 
    }

    /**
     * Determines if the refno has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRefnoModified() {
        return refno_is_modified; 
    }

    /**
     * Determines if the refno has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRefnoInitialized() {
        return refno_is_initialized; 
    }

    /**
     * Getter method for particular.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.particular
     * <li>default value: 0
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of particular
     */
    public Integer getParticular()
    {
        return particular; 
    }

    /**
     * Setter method for particular.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to particular
     */
    public void setParticular(Integer newVal) {
        if ((newVal != null && this.particular != null && (newVal.compareTo(this.particular) == 0)) || 
            (newVal == null && this.particular == null && particular_is_initialized)) {
            return; 
        } 
        this.particular = newVal; 
        particular_is_modified = true; 
        particular_is_initialized = true; 
    }

    /**
     * Setter method for particular.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to particular
     */
    public void setParticular(int newVal) {
        setParticular(new Integer(newVal));
    }

    /**
     * Determines if the particular has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isParticularModified() {
        return particular_is_modified; 
    }

    /**
     * Determines if the particular has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isParticularInitialized() {
        return particular_is_initialized; 
    }

    /**
     * Getter method for amount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.amount
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of amount
     */
    public Double getAmount()
    {
        return amount; 
    }

    /**
     * Setter method for amount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to amount
     */
    public void setAmount(Double newVal) {
        if ((newVal != null && this.amount != null && (newVal.compareTo(this.amount) == 0)) || 
            (newVal == null && this.amount == null && amount_is_initialized)) {
            return; 
        } 
        this.amount = newVal; 
        amount_is_modified = true; 
        amount_is_initialized = true; 
    }

    /**
     * Setter method for amount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to amount
     */
    public void setAmount(double newVal) {
        setAmount(new Double(newVal));
    }

    /**
     * Determines if the amount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAmountModified() {
        return amount_is_modified; 
    }

    /**
     * Determines if the amount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAmountInitialized() {
        return amount_is_initialized; 
    }

    /**
     * Getter method for extrachargeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.extrachargeid
     * <li> foreign key: extracharge.extrachargeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of extrachargeid
     */
    public Integer getExtrachargeid()
    {
        return extrachargeid; 
    }

    /**
     * Setter method for extrachargeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to extrachargeid
     */
    public void setExtrachargeid(Integer newVal) {
        if ((newVal != null && this.extrachargeid != null && (newVal.compareTo(this.extrachargeid) == 0)) || 
            (newVal == null && this.extrachargeid == null && extrachargeid_is_initialized)) {
            return; 
        } 
        this.extrachargeid = newVal; 
        extrachargeid_is_modified = true; 
        extrachargeid_is_initialized = true; 
    }

    /**
     * Setter method for extrachargeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to extrachargeid
     */
    public void setExtrachargeid(int newVal) {
        setExtrachargeid(new Integer(newVal));
    }

    /**
     * Determines if the extrachargeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExtrachargeidModified() {
        return extrachargeid_is_modified; 
    }

    /**
     * Determines if the extrachargeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExtrachargeidInitialized() {
        return extrachargeid_is_initialized; 
    }

    /**
     * Getter method for ordermainid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.ordermainid
     * <li> foreign key: ordermain.ordermainid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of ordermainid
     */
    public Long getOrdermainid()
    {
        return ordermainid; 
    }

    /**
     * Setter method for ordermainid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ordermainid
     */
    public void setOrdermainid(Long newVal) {
        if ((newVal != null && this.ordermainid != null && (newVal.compareTo(this.ordermainid) == 0)) || 
            (newVal == null && this.ordermainid == null && ordermainid_is_initialized)) {
            return; 
        } 
        this.ordermainid = newVal; 
        ordermainid_is_modified = true; 
        ordermainid_is_initialized = true; 
    }

    /**
     * Setter method for ordermainid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ordermainid
     */
    public void setOrdermainid(long newVal) {
        setOrdermainid(new Long(newVal));
    }

    /**
     * Determines if the ordermainid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOrdermainidModified() {
        return ordermainid_is_modified; 
    }

    /**
     * Determines if the ordermainid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOrdermainidInitialized() {
        return ordermainid_is_initialized; 
    }

    /**
     * Getter method for discountid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.discountid
     * <li> foreign key: discount.discountid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of discountid
     */
    public Integer getDiscountid()
    {
        return discountid; 
    }

    /**
     * Setter method for discountid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to discountid
     */
    public void setDiscountid(Integer newVal) {
        if ((newVal != null && this.discountid != null && (newVal.compareTo(this.discountid) == 0)) || 
            (newVal == null && this.discountid == null && discountid_is_initialized)) {
            return; 
        } 
        this.discountid = newVal; 
        discountid_is_modified = true; 
        discountid_is_initialized = true; 
    }

    /**
     * Setter method for discountid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to discountid
     */
    public void setDiscountid(int newVal) {
        setDiscountid(new Integer(newVal));
    }

    /**
     * Determines if the discountid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDiscountidModified() {
        return discountid_is_modified; 
    }

    /**
     * Determines if the discountid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDiscountidInitialized() {
        return discountid_is_initialized; 
    }

    /**
     * Getter method for taxid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.taxid
     * <li> foreign key: tax.taxid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of taxid
     */
    public Integer getTaxid()
    {
        return taxid; 
    }

    /**
     * Setter method for taxid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to taxid
     */
    public void setTaxid(Integer newVal) {
        if ((newVal != null && this.taxid != null && (newVal.compareTo(this.taxid) == 0)) || 
            (newVal == null && this.taxid == null && taxid_is_initialized)) {
            return; 
        } 
        this.taxid = newVal; 
        taxid_is_modified = true; 
        taxid_is_initialized = true; 
    }

    /**
     * Setter method for taxid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to taxid
     */
    public void setTaxid(int newVal) {
        setTaxid(new Integer(newVal));
    }

    /**
     * Determines if the taxid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTaxidModified() {
        return taxid_is_modified; 
    }

    /**
     * Determines if the taxid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTaxidInitialized() {
        return taxid_is_initialized; 
    }

    /**
     * Getter method for paymentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.paymentid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of paymentid
     */
    public Long getPaymentid()
    {
        return paymentid; 
    }

    /**
     * Setter method for paymentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to paymentid
     */
    public void setPaymentid(Long newVal) {
        if ((newVal != null && this.paymentid != null && (newVal.compareTo(this.paymentid) == 0)) || 
            (newVal == null && this.paymentid == null && paymentid_is_initialized)) {
            return; 
        } 
        this.paymentid = newVal; 
        paymentid_is_modified = true; 
        paymentid_is_initialized = true; 
    }

    /**
     * Setter method for paymentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to paymentid
     */
    public void setPaymentid(long newVal) {
        setPaymentid(new Long(newVal));
    }

    /**
     * Determines if the paymentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaymentidModified() {
        return paymentid_is_modified; 
    }

    /**
     * Determines if the paymentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaymentidInitialized() {
        return paymentid_is_initialized; 
    }

    /**
     * Getter method for zvoid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.zvoid
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of zvoid
     */
    public Boolean getZvoid()
    {
        return zvoid; 
    }

    /**
     * Setter method for zvoid.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to zvoid
     */
    public void setZvoid(Boolean newVal) {
        if ((newVal != null && this.zvoid != null && newVal.equals(this.zvoid)) || 
            (newVal == null && this.zvoid == null && zvoid_is_initialized)) {
            return; 
        } 
        this.zvoid = newVal; 
        zvoid_is_modified = true; 
        zvoid_is_initialized = true; 
    }

    /**
     * Setter method for zvoid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to zvoid
     */
    public void setZvoid(boolean newVal) {
        setZvoid(new Boolean(newVal));
    }

    /**
     * Determines if the zvoid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isZvoidModified() {
        return zvoid_is_modified; 
    }

    /**
     * Determines if the zvoid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isZvoidInitialized() {
        return zvoid_is_initialized; 
    }

    /**
     * Getter method for done.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.done
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of done
     */
    public Boolean getDone()
    {
        return done; 
    }

    /**
     * Setter method for done.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to done
     */
    public void setDone(Boolean newVal) {
        if ((newVal != null && this.done != null && newVal.equals(this.done)) || 
            (newVal == null && this.done == null && done_is_initialized)) {
            return; 
        } 
        this.done = newVal; 
        done_is_modified = true; 
        done_is_initialized = true; 
    }

    /**
     * Setter method for done.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to done
     */
    public void setDone(boolean newVal) {
        setDone(new Boolean(newVal));
    }

    /**
     * Determines if the done has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDoneModified() {
        return done_is_modified; 
    }

    /**
     * Determines if the done has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDoneInitialized() {
        return done_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.regbyid
     * <li> foreign key: personnel.personnelid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.regdate
     * <li>default value: now()
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for note.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.note
     * <li>default value: ''::text
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of note
     */
    public String getNote()
    {
        return note; 
    }

    /**
     * Setter method for note.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to note
     */
    public void setNote(String newVal) {
        if ((newVal != null && this.note != null && (newVal.compareTo(this.note) == 0)) || 
            (newVal == null && this.note == null && note_is_initialized)) {
            return; 
        } 
        this.note = newVal; 
        note_is_modified = true; 
        note_is_initialized = true; 
    }

    /**
     * Determines if the note has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoteModified() {
        return note_is_modified; 
    }

    /**
     * Determines if the note has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoteInitialized() {
        return note_is_initialized; 
    }

    /**
     * Getter method for manual.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.manual
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of manual
     */
    public Boolean getManual()
    {
        return manual; 
    }

    /**
     * Setter method for manual.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to manual
     */
    public void setManual(Boolean newVal) {
        if ((newVal != null && this.manual != null && newVal.equals(this.manual)) || 
            (newVal == null && this.manual == null && manual_is_initialized)) {
            return; 
        } 
        this.manual = newVal; 
        manual_is_modified = true; 
        manual_is_initialized = true; 
    }

    /**
     * Setter method for manual.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to manual
     */
    public void setManual(boolean newVal) {
        setManual(new Boolean(newVal));
    }

    /**
     * Determines if the manual has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isManualModified() {
        return manual_is_modified; 
    }

    /**
     * Determines if the manual has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isManualInitialized() {
        return manual_is_initialized; 
    }

    /**
     * Getter method for roomoper.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.roomoper
     * <li>comments: accounts
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of roomoper
     */
    public Integer getRoomoper()
    {
        return roomoper; 
    }

    /**
     * Setter method for roomoper.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomoper
     */
    public void setRoomoper(Integer newVal) {
        if ((newVal != null && this.roomoper != null && (newVal.compareTo(this.roomoper) == 0)) || 
            (newVal == null && this.roomoper == null && roomoper_is_initialized)) {
            return; 
        } 
        this.roomoper = newVal; 
        roomoper_is_modified = true; 
        roomoper_is_initialized = true; 
    }

    /**
     * Setter method for roomoper.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to roomoper
     */
    public void setRoomoper(int newVal) {
        setRoomoper(new Integer(newVal));
    }

    /**
     * Determines if the roomoper has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomoperModified() {
        return roomoper_is_modified; 
    }

    /**
     * Determines if the roomoper has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomoperInitialized() {
        return roomoper_is_initialized; 
    }

    /**
     * Getter method for reservationroomid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: folioitem.reservationroomid
     * <li> foreign key: reservationroom.reservationroomid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of reservationroomid
     */
    public Long getReservationroomid()
    {
        return reservationroomid; 
    }

    /**
     * Setter method for reservationroomid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationroomid
     */
    public void setReservationroomid(Long newVal) {
        if ((newVal != null && this.reservationroomid != null && (newVal.compareTo(this.reservationroomid) == 0)) || 
            (newVal == null && this.reservationroomid == null && reservationroomid_is_initialized)) {
            return; 
        } 
        this.reservationroomid = newVal; 
        reservationroomid_is_modified = true; 
        reservationroomid_is_initialized = true; 
    }

    /**
     * Setter method for reservationroomid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationroomid
     */
    public void setReservationroomid(long newVal) {
        setReservationroomid(new Long(newVal));
    }

    /**
     * Determines if the reservationroomid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationroomidModified() {
        return reservationroomid_is_modified; 
    }

    /**
     * Determines if the reservationroomid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationroomidInitialized() {
        return reservationroomid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return folioitemid_is_modified || 
		folioid_is_modified || 
		roomid_is_modified || 
		itemdate_is_modified || 
		refno_is_modified || 
		particular_is_modified || 
		amount_is_modified || 
		extrachargeid_is_modified || 
		ordermainid_is_modified || 
		discountid_is_modified || 
		taxid_is_modified || 
		paymentid_is_modified || 
		zvoid_is_modified || 
		done_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		note_is_modified || 
		manual_is_modified || 
		roomoper_is_modified || 
		reservationroomid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        folioitemid_is_modified = false;
        folioid_is_modified = false;
        roomid_is_modified = false;
        itemdate_is_modified = false;
        refno_is_modified = false;
        particular_is_modified = false;
        amount_is_modified = false;
        extrachargeid_is_modified = false;
        ordermainid_is_modified = false;
        discountid_is_modified = false;
        taxid_is_modified = false;
        paymentid_is_modified = false;
        zvoid_is_modified = false;
        done_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        note_is_modified = false;
        manual_is_modified = false;
        roomoper_is_modified = false;
        reservationroomid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(FolioitemBean bean) {
        setFolioitemid(bean.getFolioitemid());
        setFolioid(bean.getFolioid());
        setRoomid(bean.getRoomid());
        setItemdate(bean.getItemdate());
        setRefno(bean.getRefno());
        setParticular(bean.getParticular());
        setAmount(bean.getAmount());
        setExtrachargeid(bean.getExtrachargeid());
        setOrdermainid(bean.getOrdermainid());
        setDiscountid(bean.getDiscountid());
        setTaxid(bean.getTaxid());
        setPaymentid(bean.getPaymentid());
        setZvoid(bean.getZvoid());
        setDone(bean.getDone());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setNote(bean.getNote());
        setManual(bean.getManual());
        setRoomoper(bean.getRoomoper());
        setReservationroomid(bean.getReservationroomid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[folioitem] "
                 + "\n - folioitem.folioitemid = " + (folioitemid_is_initialized ? ("[" + (folioitemid == null ? null : folioitemid.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.folioid = " + (folioid_is_initialized ? ("[" + (folioid == null ? null : folioid.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.roomid = " + (roomid_is_initialized ? ("[" + (roomid == null ? null : roomid.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.itemdate = " + (itemdate_is_initialized ? ("[" + (itemdate == null ? null : itemdate.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.refno = " + (refno_is_initialized ? ("[" + (refno == null ? null : refno.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.particular = " + (particular_is_initialized ? ("[" + (particular == null ? null : particular.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.amount = " + (amount_is_initialized ? ("[" + (amount == null ? null : amount.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.extrachargeid = " + (extrachargeid_is_initialized ? ("[" + (extrachargeid == null ? null : extrachargeid.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.ordermainid = " + (ordermainid_is_initialized ? ("[" + (ordermainid == null ? null : ordermainid.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.discountid = " + (discountid_is_initialized ? ("[" + (discountid == null ? null : discountid.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.taxid = " + (taxid_is_initialized ? ("[" + (taxid == null ? null : taxid.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.paymentid = " + (paymentid_is_initialized ? ("[" + (paymentid == null ? null : paymentid.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.zvoid = " + (zvoid_is_initialized ? ("[" + (zvoid == null ? null : zvoid.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.done = " + (done_is_initialized ? ("[" + (done == null ? null : done.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.note = " + (note_is_initialized ? ("[" + (note == null ? null : note.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.manual = " + (manual_is_initialized ? ("[" + (manual == null ? null : manual.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.roomoper = " + (roomoper_is_initialized ? ("[" + (roomoper == null ? null : roomoper.toString()) + "]") : "not initialized") + ""
                 + "\n - folioitem.reservationroomid = " + (reservationroomid_is_initialized ? ("[" + (reservationroomid == null ? null : reservationroomid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
