// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class TarifftypeBean
// extends+ 

// extends- 

{
    private Integer tarifftypeid;
    private boolean tarifftypeid_is_modified = false;
    private boolean tarifftypeid_is_initialized = false;
    
    private String nickname;
    private boolean nickname_is_modified = false;
    private boolean nickname_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private Integer maxadolt;
    private boolean maxadolt_is_modified = false;
    private boolean maxadolt_is_initialized = false;
    
    private Integer minnight;
    private boolean minnight_is_modified = false;
    private boolean minnight_is_initialized = false;
    
    private Integer ord;
    private boolean ord_is_modified = false;
    private boolean ord_is_initialized = false;
    
    private Integer numnights;
    private boolean numnights_is_modified = false;
    private boolean numnights_is_initialized = false;
    
    private Boolean status;
    private boolean status_is_modified = false;
    private boolean status_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    TarifftypeBean()
    {
    }
    
    /**
     * Getter method for tarifftypeid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tarifftype.tarifftypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of tarifftypeid
     */
    public Integer getTarifftypeid()
    {
        return tarifftypeid; 
    }

    /**
     * Setter method for tarifftypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tarifftypeid
     */
    public void setTarifftypeid(Integer newVal) {
        if ((newVal != null && this.tarifftypeid != null && (newVal.compareTo(this.tarifftypeid) == 0)) || 
            (newVal == null && this.tarifftypeid == null && tarifftypeid_is_initialized)) {
            return; 
        } 
        this.tarifftypeid = newVal; 
        tarifftypeid_is_modified = true; 
        tarifftypeid_is_initialized = true; 
    }

    /**
     * Setter method for tarifftypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tarifftypeid
     */
    public void setTarifftypeid(int newVal) {
        setTarifftypeid(new Integer(newVal));
    }

    /**
     * Determines if the tarifftypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTarifftypeidModified() {
        return tarifftypeid_is_modified; 
    }

    /**
     * Determines if the tarifftypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTarifftypeidInitialized() {
        return tarifftypeid_is_initialized; 
    }

    /**
     * Getter method for nickname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tarifftype.nickname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of nickname
     */
    public String getNickname()
    {
        return nickname; 
    }

    /**
     * Setter method for nickname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to nickname
     */
    public void setNickname(String newVal) {
        if ((newVal != null && this.nickname != null && (newVal.compareTo(this.nickname) == 0)) || 
            (newVal == null && this.nickname == null && nickname_is_initialized)) {
            return; 
        } 
        this.nickname = newVal; 
        nickname_is_modified = true; 
        nickname_is_initialized = true; 
    }

    /**
     * Determines if the nickname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNicknameModified() {
        return nickname_is_modified; 
    }

    /**
     * Determines if the nickname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNicknameInitialized() {
        return nickname_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tarifftype.name
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for maxadolt.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tarifftype.maxadolt
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of maxadolt
     */
    public Integer getMaxadolt()
    {
        return maxadolt; 
    }

    /**
     * Setter method for maxadolt.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to maxadolt
     */
    public void setMaxadolt(Integer newVal) {
        if ((newVal != null && this.maxadolt != null && (newVal.compareTo(this.maxadolt) == 0)) || 
            (newVal == null && this.maxadolt == null && maxadolt_is_initialized)) {
            return; 
        } 
        this.maxadolt = newVal; 
        maxadolt_is_modified = true; 
        maxadolt_is_initialized = true; 
    }

    /**
     * Setter method for maxadolt.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to maxadolt
     */
    public void setMaxadolt(int newVal) {
        setMaxadolt(new Integer(newVal));
    }

    /**
     * Determines if the maxadolt has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMaxadoltModified() {
        return maxadolt_is_modified; 
    }

    /**
     * Determines if the maxadolt has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMaxadoltInitialized() {
        return maxadolt_is_initialized; 
    }

    /**
     * Getter method for minnight.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tarifftype.minnight
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of minnight
     */
    public Integer getMinnight()
    {
        return minnight; 
    }

    /**
     * Setter method for minnight.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to minnight
     */
    public void setMinnight(Integer newVal) {
        if ((newVal != null && this.minnight != null && (newVal.compareTo(this.minnight) == 0)) || 
            (newVal == null && this.minnight == null && minnight_is_initialized)) {
            return; 
        } 
        this.minnight = newVal; 
        minnight_is_modified = true; 
        minnight_is_initialized = true; 
    }

    /**
     * Setter method for minnight.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to minnight
     */
    public void setMinnight(int newVal) {
        setMinnight(new Integer(newVal));
    }

    /**
     * Determines if the minnight has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMinnightModified() {
        return minnight_is_modified; 
    }

    /**
     * Determines if the minnight has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMinnightInitialized() {
        return minnight_is_initialized; 
    }

    /**
     * Getter method for ord.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tarifftype.ord
     * <li>default value: 0
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of ord
     */
    public Integer getOrd()
    {
        return ord; 
    }

    /**
     * Setter method for ord.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ord
     */
    public void setOrd(Integer newVal) {
        if ((newVal != null && this.ord != null && (newVal.compareTo(this.ord) == 0)) || 
            (newVal == null && this.ord == null && ord_is_initialized)) {
            return; 
        } 
        this.ord = newVal; 
        ord_is_modified = true; 
        ord_is_initialized = true; 
    }

    /**
     * Setter method for ord.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ord
     */
    public void setOrd(int newVal) {
        setOrd(new Integer(newVal));
    }

    /**
     * Determines if the ord has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOrdModified() {
        return ord_is_modified; 
    }

    /**
     * Determines if the ord has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOrdInitialized() {
        return ord_is_initialized; 
    }

    /**
     * Getter method for numnights.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tarifftype.numnights
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of numnights
     */
    public Integer getNumnights()
    {
        return numnights; 
    }

    /**
     * Setter method for numnights.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to numnights
     */
    public void setNumnights(Integer newVal) {
        if ((newVal != null && this.numnights != null && (newVal.compareTo(this.numnights) == 0)) || 
            (newVal == null && this.numnights == null && numnights_is_initialized)) {
            return; 
        } 
        this.numnights = newVal; 
        numnights_is_modified = true; 
        numnights_is_initialized = true; 
    }

    /**
     * Setter method for numnights.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to numnights
     */
    public void setNumnights(int newVal) {
        setNumnights(new Integer(newVal));
    }

    /**
     * Determines if the numnights has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNumnightsModified() {
        return numnights_is_modified; 
    }

    /**
     * Determines if the numnights has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNumnightsInitialized() {
        return numnights_is_initialized; 
    }

    /**
     * Getter method for status.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tarifftype.status
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of status
     */
    public Boolean getStatus()
    {
        return status; 
    }

    /**
     * Setter method for status.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(Boolean newVal) {
        if ((newVal != null && this.status != null && newVal.equals(this.status)) || 
            (newVal == null && this.status == null && status_is_initialized)) {
            return; 
        } 
        this.status = newVal; 
        status_is_modified = true; 
        status_is_initialized = true; 
    }

    /**
     * Setter method for status.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(boolean newVal) {
        setStatus(new Boolean(newVal));
    }

    /**
     * Determines if the status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatusModified() {
        return status_is_modified; 
    }

    /**
     * Determines if the status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatusInitialized() {
        return status_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return tarifftypeid_is_modified || 
		nickname_is_modified || 
		name_is_modified || 
		maxadolt_is_modified || 
		minnight_is_modified || 
		ord_is_modified || 
		numnights_is_modified || 
		status_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        tarifftypeid_is_modified = false;
        nickname_is_modified = false;
        name_is_modified = false;
        maxadolt_is_modified = false;
        minnight_is_modified = false;
        ord_is_modified = false;
        numnights_is_modified = false;
        status_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TarifftypeBean bean) {
        setTarifftypeid(bean.getTarifftypeid());
        setNickname(bean.getNickname());
        setName(bean.getName());
        setMaxadolt(bean.getMaxadolt());
        setMinnight(bean.getMinnight());
        setOrd(bean.getOrd());
        setNumnights(bean.getNumnights());
        setStatus(bean.getStatus());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[tarifftype] "
                 + "\n - tarifftype.tarifftypeid = " + (tarifftypeid_is_initialized ? ("[" + (tarifftypeid == null ? null : tarifftypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - tarifftype.nickname = " + (nickname_is_initialized ? ("[" + (nickname == null ? null : nickname.toString()) + "]") : "not initialized") + ""
                 + "\n - tarifftype.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - tarifftype.maxadolt = " + (maxadolt_is_initialized ? ("[" + (maxadolt == null ? null : maxadolt.toString()) + "]") : "not initialized") + ""
                 + "\n - tarifftype.minnight = " + (minnight_is_initialized ? ("[" + (minnight == null ? null : minnight.toString()) + "]") : "not initialized") + ""
                 + "\n - tarifftype.ord = " + (ord_is_initialized ? ("[" + (ord == null ? null : ord.toString()) + "]") : "not initialized") + ""
                 + "\n - tarifftype.numnights = " + (numnights_is_initialized ? ("[" + (numnights == null ? null : numnights.toString()) + "]") : "not initialized") + ""
                 + "\n - tarifftype.status = " + (status_is_initialized ? ("[" + (status == null ? null : status.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
