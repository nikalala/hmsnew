// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class VsCityledgerBean
// extends+ 

// extends- 

{
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private String guest;
    private boolean guest_is_modified = false;
    private boolean guest_is_initialized = false;
    
    private java.sql.Timestamp arraivaldate;
    private boolean arraivaldate_is_modified = false;
    private boolean arraivaldate_is_initialized = false;
    
    private java.sql.Timestamp departuredate;
    private boolean departuredate_is_modified = false;
    private boolean departuredate_is_initialized = false;
    
    private String reference;
    private boolean reference_is_modified = false;
    private boolean reference_is_initialized = false;
    
    private Object credits;
    private boolean credits_is_modified = false;
    private boolean credits_is_initialized = false;
    
    private Object debits;
    private boolean debits_is_modified = false;
    private boolean debits_is_initialized = false;
    
    private Object balance;
    private boolean balance_is_modified = false;
    private boolean balance_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VsCityledgerBean()
    {
    }
    
    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_cityledger.regdate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for guest.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_cityledger.guest
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of guest
     */
    public String getGuest()
    {
        return guest; 
    }

    /**
     * Setter method for guest.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to guest
     */
    public void setGuest(String newVal) {
        if ((newVal != null && this.guest != null && (newVal.compareTo(this.guest) == 0)) || 
            (newVal == null && this.guest == null && guest_is_initialized)) {
            return; 
        } 
        this.guest = newVal; 
        guest_is_modified = true; 
        guest_is_initialized = true; 
    }

    /**
     * Determines if the guest has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestModified() {
        return guest_is_modified; 
    }

    /**
     * Determines if the guest has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestInitialized() {
        return guest_is_initialized; 
    }

    /**
     * Getter method for arraivaldate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_cityledger.arraivaldate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of arraivaldate
     */
    public java.sql.Timestamp getArraivaldate()
    {
        return arraivaldate; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.arraivaldate != null && (newVal.compareTo(this.arraivaldate) == 0)) || 
            (newVal == null && this.arraivaldate == null && arraivaldate_is_initialized)) {
            return; 
        } 
        this.arraivaldate = newVal; 
        arraivaldate_is_modified = true; 
        arraivaldate_is_initialized = true; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(long newVal) {
        setArraivaldate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the arraivaldate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isArraivaldateModified() {
        return arraivaldate_is_modified; 
    }

    /**
     * Determines if the arraivaldate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isArraivaldateInitialized() {
        return arraivaldate_is_initialized; 
    }

    /**
     * Getter method for departuredate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_cityledger.departuredate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of departuredate
     */
    public java.sql.Timestamp getDeparturedate()
    {
        return departuredate; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.departuredate != null && (newVal.compareTo(this.departuredate) == 0)) || 
            (newVal == null && this.departuredate == null && departuredate_is_initialized)) {
            return; 
        } 
        this.departuredate = newVal; 
        departuredate_is_modified = true; 
        departuredate_is_initialized = true; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(long newVal) {
        setDeparturedate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the departuredate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeparturedateModified() {
        return departuredate_is_modified; 
    }

    /**
     * Determines if the departuredate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeparturedateInitialized() {
        return departuredate_is_initialized; 
    }

    /**
     * Getter method for reference.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_cityledger.Reference
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of reference
     */
    public String getReference()
    {
        return reference; 
    }

    /**
     * Setter method for reference.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reference
     */
    public void setReference(String newVal) {
        if ((newVal != null && this.reference != null && (newVal.compareTo(this.reference) == 0)) || 
            (newVal == null && this.reference == null && reference_is_initialized)) {
            return; 
        } 
        this.reference = newVal; 
        reference_is_modified = true; 
        reference_is_initialized = true; 
    }

    /**
     * Determines if the reference has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReferenceModified() {
        return reference_is_modified; 
    }

    /**
     * Determines if the reference has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReferenceInitialized() {
        return reference_is_initialized; 
    }

    /**
     * Getter method for credits.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_cityledger.Credits
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.OTHER
     * </ul>
     *
     * @return the value of credits
     */
    public Object getCredits()
    {
        return credits; 
    }

    /**
     * Setter method for credits.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to credits
     */
    public void setCredits(Object newVal) {
        this.credits = newVal; 
        credits_is_modified = true; 
        credits_is_initialized = true; 
    }

    /**
     * Determines if the credits has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreditsModified() {
        return credits_is_modified; 
    }

    /**
     * Determines if the credits has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreditsInitialized() {
        return credits_is_initialized; 
    }

    /**
     * Getter method for debits.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_cityledger.Debits
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.OTHER
     * </ul>
     *
     * @return the value of debits
     */
    public Object getDebits()
    {
        return debits; 
    }

    /**
     * Setter method for debits.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to debits
     */
    public void setDebits(Object newVal) {
        this.debits = newVal; 
        debits_is_modified = true; 
        debits_is_initialized = true; 
    }

    /**
     * Determines if the debits has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDebitsModified() {
        return debits_is_modified; 
    }

    /**
     * Determines if the debits has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDebitsInitialized() {
        return debits_is_initialized; 
    }

    /**
     * Getter method for balance.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_cityledger.Balance
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.OTHER
     * </ul>
     *
     * @return the value of balance
     */
    public Object getBalance()
    {
        return balance; 
    }

    /**
     * Setter method for balance.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to balance
     */
    public void setBalance(Object newVal) {
        this.balance = newVal; 
        balance_is_modified = true; 
        balance_is_initialized = true; 
    }

    /**
     * Determines if the balance has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBalanceModified() {
        return balance_is_modified; 
    }

    /**
     * Determines if the balance has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBalanceInitialized() {
        return balance_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return regdate_is_modified || 
		guest_is_modified || 
		arraivaldate_is_modified || 
		departuredate_is_modified || 
		reference_is_modified || 
		credits_is_modified || 
		debits_is_modified || 
		balance_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        regdate_is_modified = false;
        guest_is_modified = false;
        arraivaldate_is_modified = false;
        departuredate_is_modified = false;
        reference_is_modified = false;
        credits_is_modified = false;
        debits_is_modified = false;
        balance_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VsCityledgerBean bean) {
        setRegdate(bean.getRegdate());
        setGuest(bean.getGuest());
        setArraivaldate(bean.getArraivaldate());
        setDeparturedate(bean.getDeparturedate());
        setReference(bean.getReference());
        setCredits(bean.getCredits());
        setDebits(bean.getDebits());
        setBalance(bean.getBalance());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[vs_cityledger] "
                 + "\n - vs_cityledger.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_cityledger.guest = " + (guest_is_initialized ? ("[" + (guest == null ? null : guest.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_cityledger.arraivaldate = " + (arraivaldate_is_initialized ? ("[" + (arraivaldate == null ? null : arraivaldate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_cityledger.departuredate = " + (departuredate_is_initialized ? ("[" + (departuredate == null ? null : departuredate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_cityledger.Reference = " + (reference_is_initialized ? ("[" + (reference == null ? null : reference.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_cityledger.Credits = " + (credits_is_initialized ? ("[" + (credits == null ? null : credits.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_cityledger.Debits = " + (debits_is_initialized ? ("[" + (debits == null ? null : debits.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_cityledger.Balance = " + (balance_is_initialized ? ("[" + (balance == null ? null : balance.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
