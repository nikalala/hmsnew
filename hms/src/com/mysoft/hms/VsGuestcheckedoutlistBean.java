// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class VsGuestcheckedoutlistBean
// extends+ 

// extends- 

{
    private String roomname;
    private boolean roomname_is_modified = false;
    private boolean roomname_is_initialized = false;
    
    private String invoicenum;
    private boolean invoicenum_is_modified = false;
    private boolean invoicenum_is_initialized = false;
    
    private String guestname;
    private boolean guestname_is_modified = false;
    private boolean guestname_is_initialized = false;
    
    private java.sql.Timestamp arraivaldate;
    private boolean arraivaldate_is_modified = false;
    private boolean arraivaldate_is_initialized = false;
    
    private java.sql.Timestamp departuredate;
    private boolean departuredate_is_modified = false;
    private boolean departuredate_is_initialized = false;
    
    private Double totalcharges;
    private boolean totalcharges_is_modified = false;
    private boolean totalcharges_is_initialized = false;
    
    private Double balance;
    private boolean balance_is_modified = false;
    private boolean balance_is_initialized = false;
    
    private String company;
    private boolean company_is_modified = false;
    private boolean company_is_initialized = false;
    
    private String author;
    private boolean author_is_modified = false;
    private boolean author_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VsGuestcheckedoutlistBean()
    {
    }
    
    /**
     * Getter method for roomname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedoutlist.roomname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of roomname
     */
    public String getRoomname()
    {
        return roomname; 
    }

    /**
     * Setter method for roomname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomname
     */
    public void setRoomname(String newVal) {
        if ((newVal != null && this.roomname != null && (newVal.compareTo(this.roomname) == 0)) || 
            (newVal == null && this.roomname == null && roomname_is_initialized)) {
            return; 
        } 
        this.roomname = newVal; 
        roomname_is_modified = true; 
        roomname_is_initialized = true; 
    }

    /**
     * Determines if the roomname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomnameModified() {
        return roomname_is_modified; 
    }

    /**
     * Determines if the roomname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomnameInitialized() {
        return roomname_is_initialized; 
    }

    /**
     * Getter method for invoicenum.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedoutlist.invoicenum
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of invoicenum
     */
    public String getInvoicenum()
    {
        return invoicenum; 
    }

    /**
     * Setter method for invoicenum.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to invoicenum
     */
    public void setInvoicenum(String newVal) {
        if ((newVal != null && this.invoicenum != null && (newVal.compareTo(this.invoicenum) == 0)) || 
            (newVal == null && this.invoicenum == null && invoicenum_is_initialized)) {
            return; 
        } 
        this.invoicenum = newVal; 
        invoicenum_is_modified = true; 
        invoicenum_is_initialized = true; 
    }

    /**
     * Determines if the invoicenum has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInvoicenumModified() {
        return invoicenum_is_modified; 
    }

    /**
     * Determines if the invoicenum has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInvoicenumInitialized() {
        return invoicenum_is_initialized; 
    }

    /**
     * Getter method for guestname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedoutlist.guestname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of guestname
     */
    public String getGuestname()
    {
        return guestname; 
    }

    /**
     * Setter method for guestname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to guestname
     */
    public void setGuestname(String newVal) {
        if ((newVal != null && this.guestname != null && (newVal.compareTo(this.guestname) == 0)) || 
            (newVal == null && this.guestname == null && guestname_is_initialized)) {
            return; 
        } 
        this.guestname = newVal; 
        guestname_is_modified = true; 
        guestname_is_initialized = true; 
    }

    /**
     * Determines if the guestname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestnameModified() {
        return guestname_is_modified; 
    }

    /**
     * Determines if the guestname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestnameInitialized() {
        return guestname_is_initialized; 
    }

    /**
     * Getter method for arraivaldate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedoutlist.arraivaldate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of arraivaldate
     */
    public java.sql.Timestamp getArraivaldate()
    {
        return arraivaldate; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.arraivaldate != null && (newVal.compareTo(this.arraivaldate) == 0)) || 
            (newVal == null && this.arraivaldate == null && arraivaldate_is_initialized)) {
            return; 
        } 
        this.arraivaldate = newVal; 
        arraivaldate_is_modified = true; 
        arraivaldate_is_initialized = true; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(long newVal) {
        setArraivaldate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the arraivaldate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isArraivaldateModified() {
        return arraivaldate_is_modified; 
    }

    /**
     * Determines if the arraivaldate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isArraivaldateInitialized() {
        return arraivaldate_is_initialized; 
    }

    /**
     * Getter method for departuredate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedoutlist.departuredate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of departuredate
     */
    public java.sql.Timestamp getDeparturedate()
    {
        return departuredate; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.departuredate != null && (newVal.compareTo(this.departuredate) == 0)) || 
            (newVal == null && this.departuredate == null && departuredate_is_initialized)) {
            return; 
        } 
        this.departuredate = newVal; 
        departuredate_is_modified = true; 
        departuredate_is_initialized = true; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(long newVal) {
        setDeparturedate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the departuredate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeparturedateModified() {
        return departuredate_is_modified; 
    }

    /**
     * Determines if the departuredate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeparturedateInitialized() {
        return departuredate_is_initialized; 
    }

    /**
     * Getter method for totalcharges.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedoutlist.totalcharges
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of totalcharges
     */
    public Double getTotalcharges()
    {
        return totalcharges; 
    }

    /**
     * Setter method for totalcharges.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to totalcharges
     */
    public void setTotalcharges(Double newVal) {
        if ((newVal != null && this.totalcharges != null && (newVal.compareTo(this.totalcharges) == 0)) || 
            (newVal == null && this.totalcharges == null && totalcharges_is_initialized)) {
            return; 
        } 
        this.totalcharges = newVal; 
        totalcharges_is_modified = true; 
        totalcharges_is_initialized = true; 
    }

    /**
     * Setter method for totalcharges.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to totalcharges
     */
    public void setTotalcharges(double newVal) {
        setTotalcharges(new Double(newVal));
    }

    /**
     * Determines if the totalcharges has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTotalchargesModified() {
        return totalcharges_is_modified; 
    }

    /**
     * Determines if the totalcharges has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTotalchargesInitialized() {
        return totalcharges_is_initialized; 
    }

    /**
     * Getter method for balance.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedoutlist.balance
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of balance
     */
    public Double getBalance()
    {
        return balance; 
    }

    /**
     * Setter method for balance.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to balance
     */
    public void setBalance(Double newVal) {
        if ((newVal != null && this.balance != null && (newVal.compareTo(this.balance) == 0)) || 
            (newVal == null && this.balance == null && balance_is_initialized)) {
            return; 
        } 
        this.balance = newVal; 
        balance_is_modified = true; 
        balance_is_initialized = true; 
    }

    /**
     * Setter method for balance.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to balance
     */
    public void setBalance(double newVal) {
        setBalance(new Double(newVal));
    }

    /**
     * Determines if the balance has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBalanceModified() {
        return balance_is_modified; 
    }

    /**
     * Determines if the balance has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBalanceInitialized() {
        return balance_is_initialized; 
    }

    /**
     * Getter method for company.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedoutlist.company
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of company
     */
    public String getCompany()
    {
        return company; 
    }

    /**
     * Setter method for company.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to company
     */
    public void setCompany(String newVal) {
        if ((newVal != null && this.company != null && (newVal.compareTo(this.company) == 0)) || 
            (newVal == null && this.company == null && company_is_initialized)) {
            return; 
        } 
        this.company = newVal; 
        company_is_modified = true; 
        company_is_initialized = true; 
    }

    /**
     * Determines if the company has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompanyModified() {
        return company_is_modified; 
    }

    /**
     * Determines if the company has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompanyInitialized() {
        return company_is_initialized; 
    }

    /**
     * Getter method for author.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_guestcheckedoutlist.author
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of author
     */
    public String getAuthor()
    {
        return author; 
    }

    /**
     * Setter method for author.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to author
     */
    public void setAuthor(String newVal) {
        if ((newVal != null && this.author != null && (newVal.compareTo(this.author) == 0)) || 
            (newVal == null && this.author == null && author_is_initialized)) {
            return; 
        } 
        this.author = newVal; 
        author_is_modified = true; 
        author_is_initialized = true; 
    }

    /**
     * Determines if the author has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAuthorModified() {
        return author_is_modified; 
    }

    /**
     * Determines if the author has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAuthorInitialized() {
        return author_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return roomname_is_modified || 
		invoicenum_is_modified || 
		guestname_is_modified || 
		arraivaldate_is_modified || 
		departuredate_is_modified || 
		totalcharges_is_modified || 
		balance_is_modified || 
		company_is_modified || 
		author_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        roomname_is_modified = false;
        invoicenum_is_modified = false;
        guestname_is_modified = false;
        arraivaldate_is_modified = false;
        departuredate_is_modified = false;
        totalcharges_is_modified = false;
        balance_is_modified = false;
        company_is_modified = false;
        author_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VsGuestcheckedoutlistBean bean) {
        setRoomname(bean.getRoomname());
        setInvoicenum(bean.getInvoicenum());
        setGuestname(bean.getGuestname());
        setArraivaldate(bean.getArraivaldate());
        setDeparturedate(bean.getDeparturedate());
        setTotalcharges(bean.getTotalcharges());
        setBalance(bean.getBalance());
        setCompany(bean.getCompany());
        setAuthor(bean.getAuthor());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[vs_guestcheckedoutlist] "
                 + "\n - vs_guestcheckedoutlist.roomname = " + (roomname_is_initialized ? ("[" + (roomname == null ? null : roomname.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedoutlist.invoicenum = " + (invoicenum_is_initialized ? ("[" + (invoicenum == null ? null : invoicenum.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedoutlist.guestname = " + (guestname_is_initialized ? ("[" + (guestname == null ? null : guestname.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedoutlist.arraivaldate = " + (arraivaldate_is_initialized ? ("[" + (arraivaldate == null ? null : arraivaldate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedoutlist.departuredate = " + (departuredate_is_initialized ? ("[" + (departuredate == null ? null : departuredate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedoutlist.totalcharges = " + (totalcharges_is_initialized ? ("[" + (totalcharges == null ? null : totalcharges.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedoutlist.balance = " + (balance_is_initialized ? ("[" + (balance == null ? null : balance.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedoutlist.company = " + (company_is_initialized ? ("[" + (company == null ? null : company.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_guestcheckedoutlist.author = " + (author_is_initialized ? ("[" + (author == null ? null : author.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
