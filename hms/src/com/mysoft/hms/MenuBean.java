// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class MenuBean
// extends+ 

// extends- 

{
    private Integer menuid;
    private boolean menuid_is_modified = false;
    private boolean menuid_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private String file;
    private boolean file_is_modified = false;
    private boolean file_is_initialized = false;
    
    private Integer parentid;
    private boolean parentid_is_modified = false;
    private boolean parentid_is_initialized = false;
    
    private Integer ord;
    private boolean ord_is_modified = false;
    private boolean ord_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    MenuBean()
    {
    }
    
    /**
     * Getter method for menuid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: menu.menuid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of menuid
     */
    public Integer getMenuid()
    {
        return menuid; 
    }

    /**
     * Setter method for menuid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to menuid
     */
    public void setMenuid(Integer newVal) {
        if ((newVal != null && this.menuid != null && (newVal.compareTo(this.menuid) == 0)) || 
            (newVal == null && this.menuid == null && menuid_is_initialized)) {
            return; 
        } 
        this.menuid = newVal; 
        menuid_is_modified = true; 
        menuid_is_initialized = true; 
    }

    /**
     * Setter method for menuid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to menuid
     */
    public void setMenuid(int newVal) {
        setMenuid(new Integer(newVal));
    }

    /**
     * Determines if the menuid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMenuidModified() {
        return menuid_is_modified; 
    }

    /**
     * Determines if the menuid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMenuidInitialized() {
        return menuid_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: menu.name
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for file.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: menu.file
     * <li>column size: 50
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of file
     */
    public String getFile()
    {
        return file; 
    }

    /**
     * Setter method for file.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to file
     */
    public void setFile(String newVal) {
        if ((newVal != null && this.file != null && (newVal.compareTo(this.file) == 0)) || 
            (newVal == null && this.file == null && file_is_initialized)) {
            return; 
        } 
        this.file = newVal; 
        file_is_modified = true; 
        file_is_initialized = true; 
    }

    /**
     * Determines if the file has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFileModified() {
        return file_is_modified; 
    }

    /**
     * Determines if the file has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFileInitialized() {
        return file_is_initialized; 
    }

    /**
     * Getter method for parentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: menu.parentid
     * <li> foreign key: menu.menuid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of parentid
     */
    public Integer getParentid()
    {
        return parentid; 
    }

    /**
     * Setter method for parentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to parentid
     */
    public void setParentid(Integer newVal) {
        if ((newVal != null && this.parentid != null && (newVal.compareTo(this.parentid) == 0)) || 
            (newVal == null && this.parentid == null && parentid_is_initialized)) {
            return; 
        } 
        this.parentid = newVal; 
        parentid_is_modified = true; 
        parentid_is_initialized = true; 
    }

    /**
     * Setter method for parentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to parentid
     */
    public void setParentid(int newVal) {
        setParentid(new Integer(newVal));
    }

    /**
     * Determines if the parentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isParentidModified() {
        return parentid_is_modified; 
    }

    /**
     * Determines if the parentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isParentidInitialized() {
        return parentid_is_initialized; 
    }

    /**
     * Getter method for ord.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: menu.ord
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of ord
     */
    public Integer getOrd()
    {
        return ord; 
    }

    /**
     * Setter method for ord.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ord
     */
    public void setOrd(Integer newVal) {
        if ((newVal != null && this.ord != null && (newVal.compareTo(this.ord) == 0)) || 
            (newVal == null && this.ord == null && ord_is_initialized)) {
            return; 
        } 
        this.ord = newVal; 
        ord_is_modified = true; 
        ord_is_initialized = true; 
    }

    /**
     * Setter method for ord.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ord
     */
    public void setOrd(int newVal) {
        setOrd(new Integer(newVal));
    }

    /**
     * Determines if the ord has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOrdModified() {
        return ord_is_modified; 
    }

    /**
     * Determines if the ord has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOrdInitialized() {
        return ord_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return menuid_is_modified || 
		name_is_modified || 
		file_is_modified || 
		parentid_is_modified || 
		ord_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        menuid_is_modified = false;
        name_is_modified = false;
        file_is_modified = false;
        parentid_is_modified = false;
        ord_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(MenuBean bean) {
        setMenuid(bean.getMenuid());
        setName(bean.getName());
        setFile(bean.getFile());
        setParentid(bean.getParentid());
        setOrd(bean.getOrd());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[menu] "
                 + "\n - menu.menuid = " + (menuid_is_initialized ? ("[" + (menuid == null ? null : menuid.toString()) + "]") : "not initialized") + ""
                 + "\n - menu.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - menu.file = " + (file_is_initialized ? ("[" + (file == null ? null : file.toString()) + "]") : "not initialized") + ""
                 + "\n - menu.parentid = " + (parentid_is_initialized ? ("[" + (parentid == null ? null : parentid.toString()) + "]") : "not initialized") + ""
                 + "\n - menu.ord = " + (ord_is_initialized ? ("[" + (ord == null ? null : ord.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
