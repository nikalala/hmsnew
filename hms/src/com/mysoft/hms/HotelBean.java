// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


import java.io.Serializable;

public class HotelBean implements Serializable
// extends+ 

// extends- 

{
    private Integer hotelid;
    private boolean hotelid_is_modified = false;
    private boolean hotelid_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private String address1;
    private boolean address1_is_modified = false;
    private boolean address1_is_initialized = false;
    
    private String address2;
    private boolean address2_is_modified = false;
    private boolean address2_is_initialized = false;
    
    private Integer countryid;
    private boolean countryid_is_modified = false;
    private boolean countryid_is_initialized = false;
    
    private String city;
    private boolean city_is_modified = false;
    private boolean city_is_initialized = false;
    
    private String zip;
    private boolean zip_is_modified = false;
    private boolean zip_is_initialized = false;
    
    private String phone;
    private boolean phone_is_modified = false;
    private boolean phone_is_initialized = false;
    
    private String rphone;
    private boolean rphone_is_modified = false;
    private boolean rphone_is_initialized = false;
    
    private String fax;
    private boolean fax_is_modified = false;
    private boolean fax_is_initialized = false;
    
    private String email;
    private boolean email_is_modified = false;
    private boolean email_is_initialized = false;
    
    private String propertytype;
    private boolean propertytype_is_modified = false;
    private boolean propertytype_is_initialized = false;
    
    private String logo;
    private boolean logo_is_modified = false;
    private boolean logo_is_initialized = false;
    
    private String url;
    private boolean url_is_modified = false;
    private boolean url_is_initialized = false;
    
    private Integer grade;
    private boolean grade_is_modified = false;
    private boolean grade_is_initialized = false;
    
    private String idn;
    private boolean idn_is_modified = false;
    private boolean idn_is_initialized = false;
    
    private String regno1;
    private boolean regno1_is_modified = false;
    private boolean regno1_is_initialized = false;
    
    private String regno2;
    private boolean regno2_is_modified = false;
    private boolean regno2_is_initialized = false;
    
    private String regno3;
    private boolean regno3_is_modified = false;
    private boolean regno3_is_initialized = false;
    
    private Integer districtid;
    private boolean districtid_is_modified = false;
    private boolean districtid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
   void HotelBean()
    {
    }
    
    /**
     * Getter method for hotelid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.hotelid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of hotelid
     */
    public Integer getHotelid()
    {
        return hotelid; 
    }

    /**
     * Setter method for hotelid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to hotelid
     */
    public void setHotelid(Integer newVal) {
        if ((newVal != null && this.hotelid != null && (newVal.compareTo(this.hotelid) == 0)) || 
            (newVal == null && this.hotelid == null && hotelid_is_initialized)) {
            return; 
        } 
        this.hotelid = newVal; 
        hotelid_is_modified = true; 
        hotelid_is_initialized = true; 
    }

    /**
     * Setter method for hotelid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to hotelid
     */
    public void setHotelid(int newVal) {
        setHotelid(new Integer(newVal));
    }

    /**
     * Determines if the hotelid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isHotelidModified() {
        return hotelid_is_modified; 
    }

    /**
     * Determines if the hotelid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isHotelidInitialized() {
        return hotelid_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.name
     * <li>comments: ??????????
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for address1.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.address1
     * <li>comments: ?????????
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of address1
     */
    public String getAddress1()
    {
        return address1; 
    }

    /**
     * Setter method for address1.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to address1
     */
    public void setAddress1(String newVal) {
        if ((newVal != null && this.address1 != null && (newVal.compareTo(this.address1) == 0)) || 
            (newVal == null && this.address1 == null && address1_is_initialized)) {
            return; 
        } 
        this.address1 = newVal; 
        address1_is_modified = true; 
        address1_is_initialized = true; 
    }

    /**
     * Determines if the address1 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAddress1Modified() {
        return address1_is_modified; 
    }

    /**
     * Determines if the address1 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAddress1Initialized() {
        return address1_is_initialized; 
    }

    /**
     * Getter method for address2.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.address2
     * <li>comments: ????????? 2
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of address2
     */
    public String getAddress2()
    {
        return address2; 
    }

    /**
     * Setter method for address2.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to address2
     */
    public void setAddress2(String newVal) {
        if ((newVal != null && this.address2 != null && (newVal.compareTo(this.address2) == 0)) || 
            (newVal == null && this.address2 == null && address2_is_initialized)) {
            return; 
        } 
        this.address2 = newVal; 
        address2_is_modified = true; 
        address2_is_initialized = true; 
    }

    /**
     * Determines if the address2 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAddress2Modified() {
        return address2_is_modified; 
    }

    /**
     * Determines if the address2 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAddress2Initialized() {
        return address2_is_initialized; 
    }

    /**
     * Getter method for countryid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.countryid
     * <li> foreign key: country.countryid
     * <li>comments: ???????
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of countryid
     */
    public Integer getCountryid()
    {
        return countryid; 
    }

    /**
     * Setter method for countryid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to countryid
     */
    public void setCountryid(Integer newVal) {
        if ((newVal != null && this.countryid != null && (newVal.compareTo(this.countryid) == 0)) || 
            (newVal == null && this.countryid == null && countryid_is_initialized)) {
            return; 
        } 
        this.countryid = newVal; 
        countryid_is_modified = true; 
        countryid_is_initialized = true; 
    }

    /**
     * Setter method for countryid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to countryid
     */
    public void setCountryid(int newVal) {
        setCountryid(new Integer(newVal));
    }

    /**
     * Determines if the countryid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCountryidModified() {
        return countryid_is_modified; 
    }

    /**
     * Determines if the countryid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCountryidInitialized() {
        return countryid_is_initialized; 
    }

    /**
     * Getter method for city.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.city
     * <li>comments: ??????
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of city
     */
    public String getCity()
    {
        return city; 
    }

    /**
     * Setter method for city.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to city
     */
    public void setCity(String newVal) {
        if ((newVal != null && this.city != null && (newVal.compareTo(this.city) == 0)) || 
            (newVal == null && this.city == null && city_is_initialized)) {
            return; 
        } 
        this.city = newVal; 
        city_is_modified = true; 
        city_is_initialized = true; 
    }

    /**
     * Determines if the city has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCityModified() {
        return city_is_modified; 
    }

    /**
     * Determines if the city has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCityInitialized() {
        return city_is_initialized; 
    }

    /**
     * Getter method for zip.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.zip
     * <li>comments: ??????? ???????
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of zip
     */
    public String getZip()
    {
        return zip; 
    }

    /**
     * Setter method for zip.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to zip
     */
    public void setZip(String newVal) {
        if ((newVal != null && this.zip != null && (newVal.compareTo(this.zip) == 0)) || 
            (newVal == null && this.zip == null && zip_is_initialized)) {
            return; 
        } 
        this.zip = newVal; 
        zip_is_modified = true; 
        zip_is_initialized = true; 
    }

    /**
     * Determines if the zip has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isZipModified() {
        return zip_is_modified; 
    }

    /**
     * Determines if the zip has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isZipInitialized() {
        return zip_is_initialized; 
    }

    /**
     * Getter method for phone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.phone
     * <li>comments: ????????
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of phone
     */
    public String getPhone()
    {
        return phone; 
    }

    /**
     * Setter method for phone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to phone
     */
    public void setPhone(String newVal) {
        if ((newVal != null && this.phone != null && (newVal.compareTo(this.phone) == 0)) || 
            (newVal == null && this.phone == null && phone_is_initialized)) {
            return; 
        } 
        this.phone = newVal; 
        phone_is_modified = true; 
        phone_is_initialized = true; 
    }

    /**
     * Determines if the phone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPhoneModified() {
        return phone_is_modified; 
    }

    /**
     * Determines if the phone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPhoneInitialized() {
        return phone_is_initialized; 
    }

    /**
     * Getter method for rphone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.rphone
     * <li>comments: ???????????? ????????
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of rphone
     */
    public String getRphone()
    {
        return rphone; 
    }

    /**
     * Setter method for rphone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rphone
     */
    public void setRphone(String newVal) {
        if ((newVal != null && this.rphone != null && (newVal.compareTo(this.rphone) == 0)) || 
            (newVal == null && this.rphone == null && rphone_is_initialized)) {
            return; 
        } 
        this.rphone = newVal; 
        rphone_is_modified = true; 
        rphone_is_initialized = true; 
    }

    /**
     * Determines if the rphone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRphoneModified() {
        return rphone_is_modified; 
    }

    /**
     * Determines if the rphone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRphoneInitialized() {
        return rphone_is_initialized; 
    }

    /**
     * Getter method for fax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.fax
     * <li>comments: ?????
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of fax
     */
    public String getFax()
    {
        return fax; 
    }

    /**
     * Setter method for fax.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fax
     */
    public void setFax(String newVal) {
        if ((newVal != null && this.fax != null && (newVal.compareTo(this.fax) == 0)) || 
            (newVal == null && this.fax == null && fax_is_initialized)) {
            return; 
        } 
        this.fax = newVal; 
        fax_is_modified = true; 
        fax_is_initialized = true; 
    }

    /**
     * Determines if the fax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFaxModified() {
        return fax_is_modified; 
    }

    /**
     * Determines if the fax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFaxInitialized() {
        return fax_is_initialized; 
    }

    /**
     * Getter method for email.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.email
     * <li>comments: ??-?????
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of email
     */
    public String getEmail()
    {
        return email; 
    }

    /**
     * Setter method for email.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to email
     */
    public void setEmail(String newVal) {
        if ((newVal != null && this.email != null && (newVal.compareTo(this.email) == 0)) || 
            (newVal == null && this.email == null && email_is_initialized)) {
            return; 
        } 
        this.email = newVal; 
        email_is_modified = true; 
        email_is_initialized = true; 
    }

    /**
     * Determines if the email has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEmailModified() {
        return email_is_modified; 
    }

    /**
     * Determines if the email has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEmailInitialized() {
        return email_is_initialized; 
    }

    /**
     * Getter method for propertytype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.propertytype
     * <li>comments: ?????? ??????? ????
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of propertytype
     */
    public String getPropertytype()
    {
        return propertytype; 
    }

    /**
     * Setter method for propertytype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to propertytype
     */
    public void setPropertytype(String newVal) {
        if ((newVal != null && this.propertytype != null && (newVal.compareTo(this.propertytype) == 0)) || 
            (newVal == null && this.propertytype == null && propertytype_is_initialized)) {
            return; 
        } 
        this.propertytype = newVal; 
        propertytype_is_modified = true; 
        propertytype_is_initialized = true; 
    }

    /**
     * Determines if the propertytype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPropertytypeModified() {
        return propertytype_is_modified; 
    }

    /**
     * Determines if the propertytype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPropertytypeInitialized() {
        return propertytype_is_initialized; 
    }

    /**
     * Getter method for logo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.logo
     * <li>comments: ????
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of logo
     */
    public String getLogo()
    {
        return logo; 
    }

    /**
     * Setter method for logo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to logo
     */
    public void setLogo(String newVal) {
        if ((newVal != null && this.logo != null && (newVal.compareTo(this.logo) == 0)) || 
            (newVal == null && this.logo == null && logo_is_initialized)) {
            return; 
        } 
        this.logo = newVal; 
        logo_is_modified = true; 
        logo_is_initialized = true; 
    }

    /**
     * Determines if the logo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLogoModified() {
        return logo_is_modified; 
    }

    /**
     * Determines if the logo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLogoInitialized() {
        return logo_is_initialized; 
    }

    /**
     * Getter method for url.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.url
     * <li>comments: ???????? ??????
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of url
     */
    public String getUrl()
    {
        return url; 
    }

    /**
     * Setter method for url.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to url
     */
    public void setUrl(String newVal) {
        if ((newVal != null && this.url != null && (newVal.compareTo(this.url) == 0)) || 
            (newVal == null && this.url == null && url_is_initialized)) {
            return; 
        } 
        this.url = newVal; 
        url_is_modified = true; 
        url_is_initialized = true; 
    }

    /**
     * Determines if the url has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUrlModified() {
        return url_is_modified; 
    }

    /**
     * Determines if the url has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUrlInitialized() {
        return url_is_initialized; 
    }

    /**
     * Getter method for grade.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.grade
     * <li>comments: ??????????CODEhotelstar
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of grade
     */
    public Integer getGrade()
    {
        return grade; 
    }

    /**
     * Setter method for grade.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to grade
     */
    public void setGrade(Integer newVal) {
        if ((newVal != null && this.grade != null && (newVal.compareTo(this.grade) == 0)) || 
            (newVal == null && this.grade == null && grade_is_initialized)) {
            return; 
        } 
        this.grade = newVal; 
        grade_is_modified = true; 
        grade_is_initialized = true; 
    }

    /**
     * Setter method for grade.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to grade
     */
    public void setGrade(int newVal) {
        setGrade(new Integer(newVal));
    }

    /**
     * Determines if the grade has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGradeModified() {
        return grade_is_modified; 
    }

    /**
     * Determines if the grade has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGradeInitialized() {
        return grade_is_initialized; 
    }

    /**
     * Getter method for idn.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.idn
     * <li>comments: ??????????????? ??????
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of idn
     */
    public String getIdn()
    {
        return idn; 
    }

    /**
     * Setter method for idn.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to idn
     */
    public void setIdn(String newVal) {
        if ((newVal != null && this.idn != null && (newVal.compareTo(this.idn) == 0)) || 
            (newVal == null && this.idn == null && idn_is_initialized)) {
            return; 
        } 
        this.idn = newVal; 
        idn_is_modified = true; 
        idn_is_initialized = true; 
    }

    /**
     * Determines if the idn has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIdnModified() {
        return idn_is_modified; 
    }

    /**
     * Determines if the idn has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIdnInitialized() {
        return idn_is_initialized; 
    }

    /**
     * Getter method for regno1.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.regno1
     * <li>comments: ???????????? ?????? 1
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of regno1
     */
    public String getRegno1()
    {
        return regno1; 
    }

    /**
     * Setter method for regno1.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regno1
     */
    public void setRegno1(String newVal) {
        if ((newVal != null && this.regno1 != null && (newVal.compareTo(this.regno1) == 0)) || 
            (newVal == null && this.regno1 == null && regno1_is_initialized)) {
            return; 
        } 
        this.regno1 = newVal; 
        regno1_is_modified = true; 
        regno1_is_initialized = true; 
    }

    /**
     * Determines if the regno1 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegno1Modified() {
        return regno1_is_modified; 
    }

    /**
     * Determines if the regno1 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegno1Initialized() {
        return regno1_is_initialized; 
    }

    /**
     * Getter method for regno2.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.regno2
     * <li>comments: ???????????? ?????? 2
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of regno2
     */
    public String getRegno2()
    {
        return regno2; 
    }

    /**
     * Setter method for regno2.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regno2
     */
    public void setRegno2(String newVal) {
        if ((newVal != null && this.regno2 != null && (newVal.compareTo(this.regno2) == 0)) || 
            (newVal == null && this.regno2 == null && regno2_is_initialized)) {
            return; 
        } 
        this.regno2 = newVal; 
        regno2_is_modified = true; 
        regno2_is_initialized = true; 
    }

    /**
     * Determines if the regno2 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegno2Modified() {
        return regno2_is_modified; 
    }

    /**
     * Determines if the regno2 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegno2Initialized() {
        return regno2_is_initialized; 
    }

    /**
     * Getter method for regno3.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.regno3
     * <li>comments: ???????????? ?????? 3
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of regno3
     */
    public String getRegno3()
    {
        return regno3; 
    }

    /**
     * Setter method for regno3.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regno3
     */
    public void setRegno3(String newVal) {
        if ((newVal != null && this.regno3 != null && (newVal.compareTo(this.regno3) == 0)) || 
            (newVal == null && this.regno3 == null && regno3_is_initialized)) {
            return; 
        } 
        this.regno3 = newVal; 
        regno3_is_modified = true; 
        regno3_is_initialized = true; 
    }

    /**
     * Determines if the regno3 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegno3Modified() {
        return regno3_is_modified; 
    }

    /**
     * Determines if the regno3 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegno3Initialized() {
        return regno3_is_initialized; 
    }

    /**
     * Getter method for districtid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: hotel.districtid
     * <li> foreign key: district.districtid
     * <li>comments: ??????
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of districtid
     */
    public Integer getDistrictid()
    {
        return districtid; 
    }

    /**
     * Setter method for districtid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to districtid
     */
    public void setDistrictid(Integer newVal) {
        if ((newVal != null && this.districtid != null && (newVal.compareTo(this.districtid) == 0)) || 
            (newVal == null && this.districtid == null && districtid_is_initialized)) {
            return; 
        } 
        this.districtid = newVal; 
        districtid_is_modified = true; 
        districtid_is_initialized = true; 
    }

    /**
     * Setter method for districtid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to districtid
     */
    public void setDistrictid(int newVal) {
        setDistrictid(new Integer(newVal));
    }

    /**
     * Determines if the districtid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDistrictidModified() {
        return districtid_is_modified; 
    }

    /**
     * Determines if the districtid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDistrictidInitialized() {
        return districtid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return hotelid_is_modified || 
		name_is_modified || 
		address1_is_modified || 
		address2_is_modified || 
		countryid_is_modified || 
		city_is_modified || 
		zip_is_modified || 
		phone_is_modified || 
		rphone_is_modified || 
		fax_is_modified || 
		email_is_modified || 
		propertytype_is_modified || 
		logo_is_modified || 
		url_is_modified || 
		grade_is_modified || 
		idn_is_modified || 
		regno1_is_modified || 
		regno2_is_modified || 
		regno3_is_modified || 
		districtid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        hotelid_is_modified = false;
        name_is_modified = false;
        address1_is_modified = false;
        address2_is_modified = false;
        countryid_is_modified = false;
        city_is_modified = false;
        zip_is_modified = false;
        phone_is_modified = false;
        rphone_is_modified = false;
        fax_is_modified = false;
        email_is_modified = false;
        propertytype_is_modified = false;
        logo_is_modified = false;
        url_is_modified = false;
        grade_is_modified = false;
        idn_is_modified = false;
        regno1_is_modified = false;
        regno2_is_modified = false;
        regno3_is_modified = false;
        districtid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(HotelBean bean) {
        setHotelid(bean.getHotelid());
        setName(bean.getName());
        setAddress1(bean.getAddress1());
        setAddress2(bean.getAddress2());
        setCountryid(bean.getCountryid());
        setCity(bean.getCity());
        setZip(bean.getZip());
        setPhone(bean.getPhone());
        setRphone(bean.getRphone());
        setFax(bean.getFax());
        setEmail(bean.getEmail());
        setPropertytype(bean.getPropertytype());
        setLogo(bean.getLogo());
        setUrl(bean.getUrl());
        setGrade(bean.getGrade());
        setIdn(bean.getIdn());
        setRegno1(bean.getRegno1());
        setRegno2(bean.getRegno2());
        setRegno3(bean.getRegno3());
        setDistrictid(bean.getDistrictid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[hotel] "
                 + "\n - hotel.hotelid = " + (hotelid_is_initialized ? ("[" + (hotelid == null ? null : hotelid.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.address1 = " + (address1_is_initialized ? ("[" + (address1 == null ? null : address1.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.address2 = " + (address2_is_initialized ? ("[" + (address2 == null ? null : address2.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.countryid = " + (countryid_is_initialized ? ("[" + (countryid == null ? null : countryid.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.city = " + (city_is_initialized ? ("[" + (city == null ? null : city.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.zip = " + (zip_is_initialized ? ("[" + (zip == null ? null : zip.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.phone = " + (phone_is_initialized ? ("[" + (phone == null ? null : phone.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.rphone = " + (rphone_is_initialized ? ("[" + (rphone == null ? null : rphone.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.fax = " + (fax_is_initialized ? ("[" + (fax == null ? null : fax.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.email = " + (email_is_initialized ? ("[" + (email == null ? null : email.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.propertytype = " + (propertytype_is_initialized ? ("[" + (propertytype == null ? null : propertytype.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.logo = " + (logo_is_initialized ? ("[" + (logo == null ? null : logo.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.url = " + (url_is_initialized ? ("[" + (url == null ? null : url.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.grade = " + (grade_is_initialized ? ("[" + (grade == null ? null : grade.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.idn = " + (idn_is_initialized ? ("[" + (idn == null ? null : idn.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.regno1 = " + (regno1_is_initialized ? ("[" + (regno1 == null ? null : regno1.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.regno2 = " + (regno2_is_initialized ? ("[" + (regno2 == null ? null : regno2.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.regno3 = " + (regno3_is_initialized ? ("[" + (regno3 == null ? null : regno3.toString()) + "]") : "not initialized") + ""
                 + "\n - hotel.districtid = " + (districtid_is_initialized ? ("[" + (districtid == null ? null : districtid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
