// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class VsBreakdownBean
// extends+ 

// extends- 

{
    private String resno;
    private boolean resno_is_modified = false;
    private boolean resno_is_initialized = false;
    
    private java.sql.Timestamp arraivaldate;
    private boolean arraivaldate_is_modified = false;
    private boolean arraivaldate_is_initialized = false;
    
    private java.sql.Timestamp departuredate;
    private boolean departuredate_is_modified = false;
    private boolean departuredate_is_initialized = false;
    
    private String guestname;
    private boolean guestname_is_modified = false;
    private boolean guestname_is_initialized = false;
    
    private String roomname;
    private boolean roomname_is_modified = false;
    private boolean roomname_is_initialized = false;
    
    private String bookingstatus;
    private boolean bookingstatus_is_modified = false;
    private boolean bookingstatus_is_initialized = false;
    
    private String bsource;
    private boolean bsource_is_modified = false;
    private boolean bsource_is_initialized = false;
    
    private String voucher;
    private boolean voucher_is_modified = false;
    private boolean voucher_is_initialized = false;
    
    private Double totalchage;
    private boolean totalchage_is_modified = false;
    private boolean totalchage_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VsBreakdownBean()
    {
    }
    
    /**
     * Getter method for resno.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_breakdown.resno
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of resno
     */
    public String getResno()
    {
        return resno; 
    }

    /**
     * Setter method for resno.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to resno
     */
    public void setResno(String newVal) {
        if ((newVal != null && this.resno != null && (newVal.compareTo(this.resno) == 0)) || 
            (newVal == null && this.resno == null && resno_is_initialized)) {
            return; 
        } 
        this.resno = newVal; 
        resno_is_modified = true; 
        resno_is_initialized = true; 
    }

    /**
     * Determines if the resno has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResnoModified() {
        return resno_is_modified; 
    }

    /**
     * Determines if the resno has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResnoInitialized() {
        return resno_is_initialized; 
    }

    /**
     * Getter method for arraivaldate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_breakdown.arraivaldate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of arraivaldate
     */
    public java.sql.Timestamp getArraivaldate()
    {
        return arraivaldate; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.arraivaldate != null && (newVal.compareTo(this.arraivaldate) == 0)) || 
            (newVal == null && this.arraivaldate == null && arraivaldate_is_initialized)) {
            return; 
        } 
        this.arraivaldate = newVal; 
        arraivaldate_is_modified = true; 
        arraivaldate_is_initialized = true; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(long newVal) {
        setArraivaldate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the arraivaldate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isArraivaldateModified() {
        return arraivaldate_is_modified; 
    }

    /**
     * Determines if the arraivaldate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isArraivaldateInitialized() {
        return arraivaldate_is_initialized; 
    }

    /**
     * Getter method for departuredate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_breakdown.departuredate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of departuredate
     */
    public java.sql.Timestamp getDeparturedate()
    {
        return departuredate; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.departuredate != null && (newVal.compareTo(this.departuredate) == 0)) || 
            (newVal == null && this.departuredate == null && departuredate_is_initialized)) {
            return; 
        } 
        this.departuredate = newVal; 
        departuredate_is_modified = true; 
        departuredate_is_initialized = true; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(long newVal) {
        setDeparturedate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the departuredate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeparturedateModified() {
        return departuredate_is_modified; 
    }

    /**
     * Determines if the departuredate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeparturedateInitialized() {
        return departuredate_is_initialized; 
    }

    /**
     * Getter method for guestname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_breakdown.guestname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of guestname
     */
    public String getGuestname()
    {
        return guestname; 
    }

    /**
     * Setter method for guestname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to guestname
     */
    public void setGuestname(String newVal) {
        if ((newVal != null && this.guestname != null && (newVal.compareTo(this.guestname) == 0)) || 
            (newVal == null && this.guestname == null && guestname_is_initialized)) {
            return; 
        } 
        this.guestname = newVal; 
        guestname_is_modified = true; 
        guestname_is_initialized = true; 
    }

    /**
     * Determines if the guestname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestnameModified() {
        return guestname_is_modified; 
    }

    /**
     * Determines if the guestname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestnameInitialized() {
        return guestname_is_initialized; 
    }

    /**
     * Getter method for roomname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_breakdown.roomname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of roomname
     */
    public String getRoomname()
    {
        return roomname; 
    }

    /**
     * Setter method for roomname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomname
     */
    public void setRoomname(String newVal) {
        if ((newVal != null && this.roomname != null && (newVal.compareTo(this.roomname) == 0)) || 
            (newVal == null && this.roomname == null && roomname_is_initialized)) {
            return; 
        } 
        this.roomname = newVal; 
        roomname_is_modified = true; 
        roomname_is_initialized = true; 
    }

    /**
     * Determines if the roomname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomnameModified() {
        return roomname_is_modified; 
    }

    /**
     * Determines if the roomname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomnameInitialized() {
        return roomname_is_initialized; 
    }

    /**
     * Getter method for bookingstatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_breakdown.bookingstatus
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of bookingstatus
     */
    public String getBookingstatus()
    {
        return bookingstatus; 
    }

    /**
     * Setter method for bookingstatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to bookingstatus
     */
    public void setBookingstatus(String newVal) {
        if ((newVal != null && this.bookingstatus != null && (newVal.compareTo(this.bookingstatus) == 0)) || 
            (newVal == null && this.bookingstatus == null && bookingstatus_is_initialized)) {
            return; 
        } 
        this.bookingstatus = newVal; 
        bookingstatus_is_modified = true; 
        bookingstatus_is_initialized = true; 
    }

    /**
     * Determines if the bookingstatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBookingstatusModified() {
        return bookingstatus_is_modified; 
    }

    /**
     * Determines if the bookingstatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBookingstatusInitialized() {
        return bookingstatus_is_initialized; 
    }

    /**
     * Getter method for bsource.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_breakdown.bsource
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of bsource
     */
    public String getBsource()
    {
        return bsource; 
    }

    /**
     * Setter method for bsource.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to bsource
     */
    public void setBsource(String newVal) {
        if ((newVal != null && this.bsource != null && (newVal.compareTo(this.bsource) == 0)) || 
            (newVal == null && this.bsource == null && bsource_is_initialized)) {
            return; 
        } 
        this.bsource = newVal; 
        bsource_is_modified = true; 
        bsource_is_initialized = true; 
    }

    /**
     * Determines if the bsource has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBsourceModified() {
        return bsource_is_modified; 
    }

    /**
     * Determines if the bsource has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBsourceInitialized() {
        return bsource_is_initialized; 
    }

    /**
     * Getter method for voucher.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_breakdown.voucher
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of voucher
     */
    public String getVoucher()
    {
        return voucher; 
    }

    /**
     * Setter method for voucher.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to voucher
     */
    public void setVoucher(String newVal) {
        if ((newVal != null && this.voucher != null && (newVal.compareTo(this.voucher) == 0)) || 
            (newVal == null && this.voucher == null && voucher_is_initialized)) {
            return; 
        } 
        this.voucher = newVal; 
        voucher_is_modified = true; 
        voucher_is_initialized = true; 
    }

    /**
     * Determines if the voucher has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVoucherModified() {
        return voucher_is_modified; 
    }

    /**
     * Determines if the voucher has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVoucherInitialized() {
        return voucher_is_initialized; 
    }

    /**
     * Getter method for totalchage.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_breakdown.totalchage
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of totalchage
     */
    public Double getTotalchage()
    {
        return totalchage; 
    }

    /**
     * Setter method for totalchage.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to totalchage
     */
    public void setTotalchage(Double newVal) {
        if ((newVal != null && this.totalchage != null && (newVal.compareTo(this.totalchage) == 0)) || 
            (newVal == null && this.totalchage == null && totalchage_is_initialized)) {
            return; 
        } 
        this.totalchage = newVal; 
        totalchage_is_modified = true; 
        totalchage_is_initialized = true; 
    }

    /**
     * Setter method for totalchage.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to totalchage
     */
    public void setTotalchage(double newVal) {
        setTotalchage(new Double(newVal));
    }

    /**
     * Determines if the totalchage has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTotalchageModified() {
        return totalchage_is_modified; 
    }

    /**
     * Determines if the totalchage has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTotalchageInitialized() {
        return totalchage_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return resno_is_modified || 
		arraivaldate_is_modified || 
		departuredate_is_modified || 
		guestname_is_modified || 
		roomname_is_modified || 
		bookingstatus_is_modified || 
		bsource_is_modified || 
		voucher_is_modified || 
		totalchage_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        resno_is_modified = false;
        arraivaldate_is_modified = false;
        departuredate_is_modified = false;
        guestname_is_modified = false;
        roomname_is_modified = false;
        bookingstatus_is_modified = false;
        bsource_is_modified = false;
        voucher_is_modified = false;
        totalchage_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VsBreakdownBean bean) {
        setResno(bean.getResno());
        setArraivaldate(bean.getArraivaldate());
        setDeparturedate(bean.getDeparturedate());
        setGuestname(bean.getGuestname());
        setRoomname(bean.getRoomname());
        setBookingstatus(bean.getBookingstatus());
        setBsource(bean.getBsource());
        setVoucher(bean.getVoucher());
        setTotalchage(bean.getTotalchage());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[vs_breakdown] "
                 + "\n - vs_breakdown.resno = " + (resno_is_initialized ? ("[" + (resno == null ? null : resno.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_breakdown.arraivaldate = " + (arraivaldate_is_initialized ? ("[" + (arraivaldate == null ? null : arraivaldate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_breakdown.departuredate = " + (departuredate_is_initialized ? ("[" + (departuredate == null ? null : departuredate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_breakdown.guestname = " + (guestname_is_initialized ? ("[" + (guestname == null ? null : guestname.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_breakdown.roomname = " + (roomname_is_initialized ? ("[" + (roomname == null ? null : roomname.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_breakdown.bookingstatus = " + (bookingstatus_is_initialized ? ("[" + (bookingstatus == null ? null : bookingstatus.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_breakdown.bsource = " + (bsource_is_initialized ? ("[" + (bsource == null ? null : bsource.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_breakdown.voucher = " + (voucher_is_initialized ? ("[" + (voucher == null ? null : voucher.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_breakdown.totalchage = " + (totalchage_is_initialized ? ("[" + (totalchage == null ? null : totalchage.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
