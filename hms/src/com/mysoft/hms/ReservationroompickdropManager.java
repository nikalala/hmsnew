// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the reservationroompickdrop table.
 */
public class ReservationroompickdropManager
// extends+ 

// extends- 
{

    /**
     * Column reservationroompickdropid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_RESERVATIONROOMPICKDROPID = 0;
    public static final int TYPE_RESERVATIONROOMPICKDROPID = Types.BIGINT;
    public static final String NAME_RESERVATIONROOMPICKDROPID = "reservationroompickdropid";

    /**
     * Column reservationroomid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_RESERVATIONROOMID = 1;
    public static final int TYPE_RESERVATIONROOMID = Types.BIGINT;
    public static final String NAME_RESERVATIONROOMID = "reservationroomid";

    /**
     * Column pickdropid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PICKDROPID = 2;
    public static final int TYPE_PICKDROPID = Types.BIGINT;
    public static final String NAME_PICKDROPID = "pickdropid";

    /**
     * Column guestid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_GUESTID = 3;
    public static final int TYPE_GUESTID = Types.BIGINT;
    public static final String NAME_GUESTID = "guestid";


    private static final String TABLE_NAME = "reservationroompickdrop";

    /**
     * Create an array of type string containing all the fields of the reservationroompickdrop table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "reservationroompickdrop.reservationroompickdropid"
        ,"reservationroompickdrop.reservationroomid"
        ,"reservationroompickdrop.pickdropid"
        ,"reservationroompickdrop.guestid"
    };

    /**
     * Field that contains the comma separated fields of the reservationroompickdrop table.
     */
    private static final String ALL_FIELDS = "reservationroompickdrop.reservationroompickdropid"
                            + ",reservationroompickdrop.reservationroomid"
                            + ",reservationroompickdrop.pickdropid"
                            + ",reservationroompickdrop.guestid";

    private static ReservationroompickdropManager singleton = new ReservationroompickdropManager();

    /**
     * Get the ReservationroompickdropManager singleton.
     *
     * @return ReservationroompickdropManager 
     */
    synchronized public static ReservationroompickdropManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own ReservationroompickdropManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(ReservationroompickdropManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new ReservationroompickdropBean instance.
     *
     * @return the new ReservationroompickdropBean 
     */
    public ReservationroompickdropBean createReservationroompickdropBean()
    {
        return new ReservationroompickdropBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ReservationroompickdropBean from the reservationroompickdrop using its key fields.
     *
     * @return a unique ReservationroompickdropBean 
     */
    //12
    public ReservationroompickdropBean loadByPrimaryKey(Long reservationroompickdropid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservationroompickdrop WHERE reservationroompickdrop.reservationroompickdropid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, reservationroompickdropid);
            ReservationroompickdropBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long reservationroompickdropid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from reservationroompickdrop WHERE reservationroompickdrop.reservationroompickdropid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, reservationroompickdropid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads ReservationroompickdropBean array from the reservationroompickdrop table using its guestid field.
     *
     * @return an array of ReservationroompickdropBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationroompickdropBean[] loadByGuestid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservationroompickdrop WHERE guestid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservationroompickdrop table by guestid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByGuestid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservationroompickdrop WHERE guestid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ReservationroompickdropBean array from the reservationroompickdrop table using its pickdropid field.
     *
     * @return an array of ReservationroompickdropBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationroompickdropBean[] loadByPickdropid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservationroompickdrop WHERE pickdropid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservationroompickdrop table by pickdropid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByPickdropid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservationroompickdrop WHERE pickdropid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ReservationroompickdropBean array from the reservationroompickdrop table using its reservationroomid field.
     *
     * @return an array of ReservationroompickdropBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationroompickdropBean[] loadByReservationroomid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservationroompickdrop WHERE reservationroomid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservationroompickdrop table by reservationroomid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByReservationroomid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservationroompickdrop WHERE reservationroomid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the GuestBean object from the reservationroompickdrop.guestid field.
     *
     * @param pObject the ReservationroompickdropBean 
     * @return the associated GuestBean pObject
     */
    // GET IMPORTED
    public GuestBean getGuestBean(ReservationroompickdropBean pObject) throws SQLException
    {
        GuestBean other = GuestManager.getInstance().createGuestBean();
        other.setGuestid(pObject.getGuestid());
        return GuestManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ReservationroompickdropBean object to the GuestBean object.
     *
     * @param pObject the ReservationroompickdropBean object to use
     * @param pObjectToBeSet the GuestBean object to associate to the ReservationroompickdropBean 
     * @return the associated GuestBean pObject
     */
    // SET IMPORTED
    public ReservationroompickdropBean setGuestBean(ReservationroompickdropBean pObject,GuestBean pObjectToBeSet)
    {
        pObject.setGuestid(pObjectToBeSet.getGuestid());
        return pObject;
    }

    /**
     * Retrieves the PickdropBean object from the reservationroompickdrop.pickdropid field.
     *
     * @param pObject the ReservationroompickdropBean 
     * @return the associated PickdropBean pObject
     */
    // GET IMPORTED
    public PickdropBean getPickdropBean(ReservationroompickdropBean pObject) throws SQLException
    {
        PickdropBean other = PickdropManager.getInstance().createPickdropBean();
        other.setPickdropid(pObject.getPickdropid());
        return PickdropManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ReservationroompickdropBean object to the PickdropBean object.
     *
     * @param pObject the ReservationroompickdropBean object to use
     * @param pObjectToBeSet the PickdropBean object to associate to the ReservationroompickdropBean 
     * @return the associated PickdropBean pObject
     */
    // SET IMPORTED
    public ReservationroompickdropBean setPickdropBean(ReservationroompickdropBean pObject,PickdropBean pObjectToBeSet)
    {
        pObject.setPickdropid(pObjectToBeSet.getPickdropid());
        return pObject;
    }

    /**
     * Retrieves the ReservationroomBean object from the reservationroompickdrop.reservationroomid field.
     *
     * @param pObject the ReservationroompickdropBean 
     * @return the associated ReservationroomBean pObject
     */
    // GET IMPORTED
    public ReservationroomBean getReservationroomBean(ReservationroompickdropBean pObject) throws SQLException
    {
        ReservationroomBean other = ReservationroomManager.getInstance().createReservationroomBean();
        other.setReservationroomid(pObject.getReservationroomid());
        return ReservationroomManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ReservationroompickdropBean object to the ReservationroomBean object.
     *
     * @param pObject the ReservationroompickdropBean object to use
     * @param pObjectToBeSet the ReservationroomBean object to associate to the ReservationroompickdropBean 
     * @return the associated ReservationroomBean pObject
     */
    // SET IMPORTED
    public ReservationroompickdropBean setReservationroomBean(ReservationroompickdropBean pObject,ReservationroomBean pObjectToBeSet)
    {
        pObject.setReservationroomid(pObjectToBeSet.getReservationroomid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from reservationroompickdrop.
     *
     * @return an array of ReservationroompickdropManager pObject
     */
    //38
    public ReservationroompickdropBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservationroompickdrop",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ReservationroompickdropBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ReservationroompickdropBean table 
     */
    //49
    public ReservationroompickdropBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ReservationroompickdropBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting ReservationroompickdropBean table 
     */
    //51
    public ReservationroompickdropBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from reservationroompickdrop " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from reservationroompickdrop ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (ReservationroompickdropBean[])v.toArray(new ReservationroompickdropBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from reservationroompickdrop table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the reservationroompickdrop table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM reservationroompickdrop " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the ReservationroompickdropBean pObject into the database.
     *
     * @param pObject the ReservationroompickdropBean pObject to be saved
     */
    //100
    public ReservationroompickdropBean save(ReservationroompickdropBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isReservationroompickdropidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('reservationroompickdropid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setReservationroompickdropid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into reservationroompickdrop (");
    
                if (pObject.isReservationroompickdropidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("reservationroompickdropid");
                    _dirtyCount++;
                }

                if (pObject.isReservationroomidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("reservationroomid");
                    _dirtyCount++;
                }

                if (pObject.isPickdropidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("pickdropid");
                    _dirtyCount++;
                }

                if (pObject.isGuestidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("guestid");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isReservationroompickdropidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroompickdropid());
                }
    
                if (pObject.isReservationroomidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroomid());
                }
    
                if (pObject.isPickdropidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPickdropid());
                }
    
                if (pObject.isGuestidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE reservationroompickdrop SET ");
                boolean useComma=false;

                if (pObject.isReservationroompickdropidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("reservationroompickdropid").append("=?");
                }

                if (pObject.isReservationroomidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("reservationroomid").append("=?");
                }

                if (pObject.isPickdropidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("pickdropid").append("=?");
                }

                if (pObject.isGuestidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("guestid").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("reservationroompickdrop.reservationroompickdropid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isReservationroompickdropidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroompickdropid());
                }

                if (pObject.isReservationroomidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroomid());
                }

                if (pObject.isPickdropidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getPickdropid());
                }

                if (pObject.isGuestidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroompickdropid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of ReservationroompickdropBean pObjects into the database.
     *
     * @param pObjects the ReservationroompickdropBean pObject table to be saved
     * @return the saved ReservationroompickdropBean array.
     */
    //65
    public ReservationroompickdropBean[] save(ReservationroompickdropBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique ReservationroompickdropBean pObject from a template one giving a c
     *
     * @param pObject the ReservationroompickdropBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public ReservationroompickdropBean loadUniqueUsingTemplate(ReservationroompickdropBean pObject) throws SQLException
    {
         ReservationroompickdropBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of ReservationroompickdropBean from a template one.
     *
     * @param pObject the ReservationroompickdropBean template to look for
     * @return all the ReservationroompickdropBean matching the template
     */
    //88
    public ReservationroompickdropBean[] loadUsingTemplate(ReservationroompickdropBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from reservationroompickdrop WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isReservationroompickdropidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationroompickdropid= ?");
             }
    
             if (pObject.isReservationroomidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationroomid= ?");
             }
    
             if (pObject.isPickdropidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("pickdropid= ?");
             }
    
             if (pObject.isGuestidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestid= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isReservationroompickdropidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroompickdropid());
             }
    
             if (pObject.isReservationroomidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroomid());
             }
    
             if (pObject.isPickdropidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getPickdropid());
             }
    
             if (pObject.isGuestidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a ReservationroompickdropBean template.
     *
     * @param pObject the ReservationroompickdropBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(ReservationroompickdropBean pObject) throws SQLException
    {
        if (pObject.isReservationroompickdropidInitialized())
            return deleteByPrimaryKey(pObject.getReservationroompickdropid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM reservationroompickdrop WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isReservationroompickdropidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("reservationroompickdropid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isReservationroomidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("reservationroomid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPickdropidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("pickdropid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGuestidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("guestid").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isReservationroompickdropidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroompickdropid());
            }
    
            if (pObject.isReservationroomidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroomid());
            }
    
            if (pObject.isPickdropidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getPickdropid());
            }
    
            if (pObject.isGuestidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table reservationroompickdrop.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table reservationroompickdrop with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from reservationroompickdrop " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table reservationroompickdrop with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific ReservationroompickdropBean pObject given a c
     *
     * @param pObject the ReservationroompickdropBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(ReservationroompickdropBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from reservationroompickdrop WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isReservationroompickdropidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationroompickdropid= ?");
                }
    
                if (pObject.isReservationroomidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationroomid= ?");
                }
    
                if (pObject.isPickdropidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("pickdropid= ?");
                }
    
                if (pObject.isGuestidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestid= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isReservationroompickdropidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroompickdropid());
                }
    
                if (pObject.isReservationroomidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getReservationroomid());
                }
    
                if (pObject.isPickdropidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPickdropid());
                }
    
                if (pObject.isGuestidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the reservationroompickdrop on a ReservationroompickdropBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting ReservationroompickdropBean pObject
     */
    //72
    public ReservationroompickdropBean decodeRow(ResultSet rs) throws SQLException
    {
        ReservationroompickdropBean pObject = createReservationroompickdropBean();
        pObject.setReservationroompickdropid(Manager.getLong(rs, 1));
        pObject.setReservationroomid(Manager.getLong(rs, 2));
        pObject.setPickdropid(Manager.getLong(rs, 3));
        pObject.setGuestid(Manager.getLong(rs, 4));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the reservationroompickdrop table on a ReservationroompickdropBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting ReservationroompickdropBean pObject
     */
    //73
    public ReservationroompickdropBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        ReservationroompickdropBean pObject = createReservationroompickdropBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_RESERVATIONROOMPICKDROPID:
                    ++pos;
                    pObject.setReservationroompickdropid(Manager.getLong(rs, pos));
                    break;
                case ID_RESERVATIONROOMID:
                    ++pos;
                    pObject.setReservationroomid(Manager.getLong(rs, pos));
                    break;
                case ID_PICKDROPID:
                    ++pos;
                    pObject.setPickdropid(Manager.getLong(rs, pos));
                    break;
                case ID_GUESTID:
                    ++pos;
                    pObject.setGuestid(Manager.getLong(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ReservationroompickdropBean 
     */
    //41
    public ReservationroompickdropBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ReservationroompickdropBean 
     */
    public ReservationroompickdropBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (ReservationroompickdropBean[])v.toArray(new ReservationroompickdropBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private ReservationroompickdropListener listener = null;

    /**
     * Registers a unique ReservationroompickdropListener listener.
     */
    //66.5
    public void registerListener(ReservationroompickdropListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the ReservationroompickdropBean pObject.
     *
     * @param pObject the ReservationroompickdropBean pObject to be saved
     */
    //67
    void beforeInsert(ReservationroompickdropBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the ReservationroompickdropBean pObject.
     *
     * @param pObject the ReservationroompickdropBean pObject to be saved
     */
    //68
    void afterInsert(ReservationroompickdropBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the ReservationroompickdropBean pObject.
     *
     * @param pObject the ReservationroompickdropBean pObject to be updated
     */
    //69
    void beforeUpdate(ReservationroompickdropBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the ReservationroompickdropBean pObject.
     *
     * @param pObject the ReservationroompickdropBean pObject to be updated
     */
    //70
    void afterUpdate(ReservationroompickdropBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
