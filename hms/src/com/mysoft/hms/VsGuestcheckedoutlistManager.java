// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the vs_guestcheckedoutlist table.
 */
public class VsGuestcheckedoutlistManager
// extends+ 

// extends- 

{

    /**
     * Column roomname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ROOMNAME = 0;
    public static final int TYPE_ROOMNAME = Types.VARCHAR;
    public static final String NAME_ROOMNAME = "roomname";

    /**
     * Column invoicenum of type Types.VARCHAR mapped to String.
     */
    public static final int ID_INVOICENUM = 1;
    public static final int TYPE_INVOICENUM = Types.VARCHAR;
    public static final String NAME_INVOICENUM = "invoicenum";

    /**
     * Column guestname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_GUESTNAME = 2;
    public static final int TYPE_GUESTNAME = Types.VARCHAR;
    public static final String NAME_GUESTNAME = "guestname";

    /**
     * Column arraivaldate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_ARRAIVALDATE = 3;
    public static final int TYPE_ARRAIVALDATE = Types.TIMESTAMP;
    public static final String NAME_ARRAIVALDATE = "arraivaldate";

    /**
     * Column departuredate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_DEPARTUREDATE = 4;
    public static final int TYPE_DEPARTUREDATE = Types.TIMESTAMP;
    public static final String NAME_DEPARTUREDATE = "departuredate";

    /**
     * Column totalcharges of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_TOTALCHARGES = 5;
    public static final int TYPE_TOTALCHARGES = Types.DOUBLE;
    public static final String NAME_TOTALCHARGES = "totalcharges";

    /**
     * Column balance of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_BALANCE = 6;
    public static final int TYPE_BALANCE = Types.DOUBLE;
    public static final String NAME_BALANCE = "balance";

    /**
     * Column company of type Types.VARCHAR mapped to String.
     */
    public static final int ID_COMPANY = 7;
    public static final int TYPE_COMPANY = Types.VARCHAR;
    public static final String NAME_COMPANY = "company";

    /**
     * Column author of type Types.VARCHAR mapped to String.
     */
    public static final int ID_AUTHOR = 8;
    public static final int TYPE_AUTHOR = Types.VARCHAR;
    public static final String NAME_AUTHOR = "author";


    private static final String TABLE_NAME = "vs_guestcheckedoutlist";

    /**
     * Create an array of type string containing all the fields of the vs_guestcheckedoutlist table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "vs_guestcheckedoutlist.roomname"
        ,"vs_guestcheckedoutlist.invoicenum"
        ,"vs_guestcheckedoutlist.guestname"
        ,"vs_guestcheckedoutlist.arraivaldate"
        ,"vs_guestcheckedoutlist.departuredate"
        ,"vs_guestcheckedoutlist.totalcharges"
        ,"vs_guestcheckedoutlist.balance"
        ,"vs_guestcheckedoutlist.company"
        ,"vs_guestcheckedoutlist.author"
    };

    /**
     * Field that contains the comma separated fields of the vs_guestcheckedoutlist table.
     */
    private static final String ALL_FIELDS = "vs_guestcheckedoutlist.roomname"
                            + ",vs_guestcheckedoutlist.invoicenum"
                            + ",vs_guestcheckedoutlist.guestname"
                            + ",vs_guestcheckedoutlist.arraivaldate"
                            + ",vs_guestcheckedoutlist.departuredate"
                            + ",vs_guestcheckedoutlist.totalcharges"
                            + ",vs_guestcheckedoutlist.balance"
                            + ",vs_guestcheckedoutlist.company"
                            + ",vs_guestcheckedoutlist.author";

    private static VsGuestcheckedoutlistManager singleton = new VsGuestcheckedoutlistManager();

    /**
     * Get the VsGuestcheckedoutlistManager singleton.
     *
     * @return VsGuestcheckedoutlistManager 
     */
    synchronized public static VsGuestcheckedoutlistManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own VsGuestcheckedoutlistManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(VsGuestcheckedoutlistManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new VsGuestcheckedoutlistBean instance.
     *
     * @return the new VsGuestcheckedoutlistBean 
     */
    public VsGuestcheckedoutlistBean createVsGuestcheckedoutlistBean()
    {
        return new VsGuestcheckedoutlistBean();
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from vs_guestcheckedoutlist.
     *
     * @return an array of VsGuestcheckedoutlistManager pObject
     */
    //38
    public VsGuestcheckedoutlistBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM vs_guestcheckedoutlist",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of VsGuestcheckedoutlistBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting VsGuestcheckedoutlistBean table 
     */
    //49
    public VsGuestcheckedoutlistBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of VsGuestcheckedoutlistBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting VsGuestcheckedoutlistBean table 
     */
    //51
    public VsGuestcheckedoutlistBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from vs_guestcheckedoutlist " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from vs_guestcheckedoutlist ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (VsGuestcheckedoutlistBean[])v.toArray(new VsGuestcheckedoutlistBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from vs_guestcheckedoutlist table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the vs_guestcheckedoutlist table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM vs_guestcheckedoutlist " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the VsGuestcheckedoutlistBean pObject into the database.
     *
     * @param pObject the VsGuestcheckedoutlistBean pObject to be saved
     */
    //100
    public VsGuestcheckedoutlistBean save(VsGuestcheckedoutlistBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into vs_guestcheckedoutlist (");
    
                if (pObject.isRoomnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roomname");
                    _dirtyCount++;
                }

                if (pObject.isInvoicenumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("invoicenum");
                    _dirtyCount++;
                }

                if (pObject.isGuestnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("guestname");
                    _dirtyCount++;
                }

                if (pObject.isArraivaldateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("arraivaldate");
                    _dirtyCount++;
                }

                if (pObject.isDeparturedateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("departuredate");
                    _dirtyCount++;
                }

                if (pObject.isTotalchargesModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("totalcharges");
                    _dirtyCount++;
                }

                if (pObject.isBalanceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("balance");
                    _dirtyCount++;
                }

                if (pObject.isCompanyModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("company");
                    _dirtyCount++;
                }

                if (pObject.isAuthorModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("author");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isRoomnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getRoomname());
                }
    
                if (pObject.isInvoicenumModified()) {
                    ps.setString(++_dirtyCount, pObject.getInvoicenum());
                }
    
                if (pObject.isGuestnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getGuestname());
                }
    
                if (pObject.isArraivaldateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
                }
    
                if (pObject.isDeparturedateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
                }
    
                if (pObject.isTotalchargesModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getTotalcharges());
                }
    
                if (pObject.isBalanceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getBalance());
                }
    
                if (pObject.isCompanyModified()) {
                    ps.setString(++_dirtyCount, pObject.getCompany());
                }
    
                if (pObject.isAuthorModified()) {
                    ps.setString(++_dirtyCount, pObject.getAuthor());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE vs_guestcheckedoutlist SET ");
                boolean useComma=false;

                if (pObject.isRoomnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roomname").append("=?");
                }

                if (pObject.isInvoicenumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("invoicenum").append("=?");
                }

                if (pObject.isGuestnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("guestname").append("=?");
                }

                if (pObject.isArraivaldateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("arraivaldate").append("=?");
                }

                if (pObject.isDeparturedateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("departuredate").append("=?");
                }

                if (pObject.isTotalchargesModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("totalcharges").append("=?");
                }

                if (pObject.isBalanceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("balance").append("=?");
                }

                if (pObject.isCompanyModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("company").append("=?");
                }

                if (pObject.isAuthorModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("author").append("=?");
                }
                _sql.append("");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isRoomnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getRoomname());
                }

                if (pObject.isInvoicenumModified()) {
                      ps.setString(++_dirtyCount, pObject.getInvoicenum());
                }

                if (pObject.isGuestnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getGuestname());
                }

                if (pObject.isArraivaldateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
                }

                if (pObject.isDeparturedateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
                }

                if (pObject.isTotalchargesModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getTotalcharges());
                }

                if (pObject.isBalanceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getBalance());
                }

                if (pObject.isCompanyModified()) {
                      ps.setString(++_dirtyCount, pObject.getCompany());
                }

                if (pObject.isAuthorModified()) {
                      ps.setString(++_dirtyCount, pObject.getAuthor());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of VsGuestcheckedoutlistBean pObjects into the database.
     *
     * @param pObjects the VsGuestcheckedoutlistBean pObject table to be saved
     * @return the saved VsGuestcheckedoutlistBean array.
     */
    //65
    public VsGuestcheckedoutlistBean[] save(VsGuestcheckedoutlistBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique VsGuestcheckedoutlistBean pObject from a template one giving a c
     *
     * @param pObject the VsGuestcheckedoutlistBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public VsGuestcheckedoutlistBean loadUniqueUsingTemplate(VsGuestcheckedoutlistBean pObject) throws SQLException
    {
         VsGuestcheckedoutlistBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of VsGuestcheckedoutlistBean from a template one.
     *
     * @param pObject the VsGuestcheckedoutlistBean template to look for
     * @return all the VsGuestcheckedoutlistBean matching the template
     */
    //88
    public VsGuestcheckedoutlistBean[] loadUsingTemplate(VsGuestcheckedoutlistBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from vs_guestcheckedoutlist WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isRoomnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomname= ?");
             }
    
             if (pObject.isInvoicenumModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("invoicenum= ?");
             }
    
             if (pObject.isGuestnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestname= ?");
             }
    
             if (pObject.isArraivaldateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("arraivaldate= ?");
             }
    
             if (pObject.isDeparturedateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("departuredate= ?");
             }
    
             if (pObject.isTotalchargesModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("totalcharges= ?");
             }
    
             if (pObject.isBalanceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("balance= ?");
             }
    
             if (pObject.isCompanyModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("company= ?");
             }
    
             if (pObject.isAuthorModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("author= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isRoomnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getRoomname());
             }
    
             if (pObject.isInvoicenumModified()) {
                 ps.setString(++_dirtyCount, pObject.getInvoicenum());
             }
    
             if (pObject.isGuestnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getGuestname());
             }
    
             if (pObject.isArraivaldateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
             }
    
             if (pObject.isDeparturedateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
             }
    
             if (pObject.isTotalchargesModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getTotalcharges());
             }
    
             if (pObject.isBalanceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getBalance());
             }
    
             if (pObject.isCompanyModified()) {
                 ps.setString(++_dirtyCount, pObject.getCompany());
             }
    
             if (pObject.isAuthorModified()) {
                 ps.setString(++_dirtyCount, pObject.getAuthor());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a VsGuestcheckedoutlistBean template.
     *
     * @param pObject the VsGuestcheckedoutlistBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(VsGuestcheckedoutlistBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM vs_guestcheckedoutlist WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isRoomnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roomname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInvoicenumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("invoicenum").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGuestnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("guestname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isArraivaldateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("arraivaldate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeparturedateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("departuredate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTotalchargesInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("totalcharges").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBalanceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("balance").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCompanyInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("company").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAuthorInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("author").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isRoomnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getRoomname());
            }
    
            if (pObject.isInvoicenumInitialized()) {
                ps.setString(++_dirtyCount, pObject.getInvoicenum());
            }
    
            if (pObject.isGuestnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getGuestname());
            }
    
            if (pObject.isArraivaldateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
            }
    
            if (pObject.isDeparturedateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
            }
    
            if (pObject.isTotalchargesInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getTotalcharges());
            }
    
            if (pObject.isBalanceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getBalance());
            }
    
            if (pObject.isCompanyInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCompany());
            }
    
            if (pObject.isAuthorInitialized()) {
                ps.setString(++_dirtyCount, pObject.getAuthor());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table vs_guestcheckedoutlist.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table vs_guestcheckedoutlist with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from vs_guestcheckedoutlist " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table vs_guestcheckedoutlist with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific VsGuestcheckedoutlistBean pObject given a c
     *
     * @param pObject the VsGuestcheckedoutlistBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(VsGuestcheckedoutlistBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from vs_guestcheckedoutlist WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isRoomnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomname= ?");
                }
    
                if (pObject.isInvoicenumModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("invoicenum= ?");
                }
    
                if (pObject.isGuestnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestname= ?");
                }
    
                if (pObject.isArraivaldateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("arraivaldate= ?");
                }
    
                if (pObject.isDeparturedateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("departuredate= ?");
                }
    
                if (pObject.isTotalchargesModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("totalcharges= ?");
                }
    
                if (pObject.isBalanceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("balance= ?");
                }
    
                if (pObject.isCompanyModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("company= ?");
                }
    
                if (pObject.isAuthorModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("author= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isRoomnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getRoomname());
                }
    
                if (pObject.isInvoicenumModified()) {
                    ps.setString(++_dirtyCount, pObject.getInvoicenum());
                }
    
                if (pObject.isGuestnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getGuestname());
                }
    
                if (pObject.isArraivaldateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
                }
    
                if (pObject.isDeparturedateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
                }
    
                if (pObject.isTotalchargesModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getTotalcharges());
                }
    
                if (pObject.isBalanceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getBalance());
                }
    
                if (pObject.isCompanyModified()) {
                    ps.setString(++_dirtyCount, pObject.getCompany());
                }
    
                if (pObject.isAuthorModified()) {
                    ps.setString(++_dirtyCount, pObject.getAuthor());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the vs_guestcheckedoutlist on a VsGuestcheckedoutlistBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting VsGuestcheckedoutlistBean pObject
     */
    //72
    public VsGuestcheckedoutlistBean decodeRow(ResultSet rs) throws SQLException
    {
        VsGuestcheckedoutlistBean pObject = createVsGuestcheckedoutlistBean();
        pObject.setRoomname(rs.getString(1));
        pObject.setInvoicenum(rs.getString(2));
        pObject.setGuestname(rs.getString(3));
        pObject.setArraivaldate(rs.getTimestamp(4));
        pObject.setDeparturedate(rs.getTimestamp(5));
        pObject.setTotalcharges(Manager.getDouble(rs, 6));
        pObject.setBalance(Manager.getDouble(rs, 7));
        pObject.setCompany(rs.getString(8));
        pObject.setAuthor(rs.getString(9));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the vs_guestcheckedoutlist table on a VsGuestcheckedoutlistBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting VsGuestcheckedoutlistBean pObject
     */
    //73
    public VsGuestcheckedoutlistBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        VsGuestcheckedoutlistBean pObject = createVsGuestcheckedoutlistBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_ROOMNAME:
                    ++pos;
                    pObject.setRoomname(rs.getString(pos));
                    break;
                case ID_INVOICENUM:
                    ++pos;
                    pObject.setInvoicenum(rs.getString(pos));
                    break;
                case ID_GUESTNAME:
                    ++pos;
                    pObject.setGuestname(rs.getString(pos));
                    break;
                case ID_ARRAIVALDATE:
                    ++pos;
                    pObject.setArraivaldate(rs.getTimestamp(pos));
                    break;
                case ID_DEPARTUREDATE:
                    ++pos;
                    pObject.setDeparturedate(rs.getTimestamp(pos));
                    break;
                case ID_TOTALCHARGES:
                    ++pos;
                    pObject.setTotalcharges(Manager.getDouble(rs, pos));
                    break;
                case ID_BALANCE:
                    ++pos;
                    pObject.setBalance(Manager.getDouble(rs, pos));
                    break;
                case ID_COMPANY:
                    ++pos;
                    pObject.setCompany(rs.getString(pos));
                    break;
                case ID_AUTHOR:
                    ++pos;
                    pObject.setAuthor(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of VsGuestcheckedoutlistBean 
     */
    //41
    public VsGuestcheckedoutlistBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of VsGuestcheckedoutlistBean 
     */
    public VsGuestcheckedoutlistBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (VsGuestcheckedoutlistBean[])v.toArray(new VsGuestcheckedoutlistBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private VsGuestcheckedoutlistListener listener = null;

    /**
     * Registers a unique VsGuestcheckedoutlistListener listener.
     */
    //66.5
    public void registerListener(VsGuestcheckedoutlistListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the VsGuestcheckedoutlistBean pObject.
     *
     * @param pObject the VsGuestcheckedoutlistBean pObject to be saved
     */
    //67
    void beforeInsert(VsGuestcheckedoutlistBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the VsGuestcheckedoutlistBean pObject.
     *
     * @param pObject the VsGuestcheckedoutlistBean pObject to be saved
     */
    //68
    void afterInsert(VsGuestcheckedoutlistBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the VsGuestcheckedoutlistBean pObject.
     *
     * @param pObject the VsGuestcheckedoutlistBean pObject to be updated
     */
    //69
    void beforeUpdate(VsGuestcheckedoutlistBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the VsGuestcheckedoutlistBean pObject.
     *
     * @param pObject the VsGuestcheckedoutlistBean pObject to be updated
     */
    //70
    void afterUpdate(VsGuestcheckedoutlistBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
