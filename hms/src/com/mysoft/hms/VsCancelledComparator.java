// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.util.Comparator;
// imports+ 

// imports- 


/**
 * Comparator class is used to sort the VsCancelledBean objects.
 */
public class VsCancelledComparator implements Comparator
// extends+ 

// extends- 

{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for VsCancelledComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new VsCancelledComparator(VsCancelledManager.RESERVATIONID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>VsCancelledManager.ID_RESERVATIONID
     *   <li>VsCancelledManager.ID_GUESTNAME
     *   <li>VsCancelledManager.ID_ARRAIVALDATE
     *   <li>VsCancelledManager.ID_DEPARTUREDATE
     *   <li>VsCancelledManager.ID_FOLIOID
     *   <li>VsCancelledManager.ID_CHARGES
     *   <li>VsCancelledManager.ID_PAID
     *   <li>VsCancelledManager.ID_BALANCE
     *   <li>VsCancelledManager.ID_SOURCE
     *   <li>VsCancelledManager.ID_PUSER
     *   <li>VsCancelledManager.ID_REGDATE
     *   <li>VsCancelledManager.ID_REMARK
     *   <li>VsCancelledManager.ID_PERSONNELID
     *   <li>VsCancelledManager.ID_ROOMTYPEID
     *   <li>VsCancelledManager.ID_RATETYPEID
     *   <li>VsCancelledManager.ID_BSOURCEID
     * </ul>
     */
    public VsCancelledComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for VsCancelledComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new VsCancelledComparator(VsCancelledManager.RESERVATIONID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>VsCancelledManager.ID_RESERVATIONID
     *   <li>VsCancelledManager.ID_GUESTNAME
     *   <li>VsCancelledManager.ID_ARRAIVALDATE
     *   <li>VsCancelledManager.ID_DEPARTUREDATE
     *   <li>VsCancelledManager.ID_FOLIOID
     *   <li>VsCancelledManager.ID_CHARGES
     *   <li>VsCancelledManager.ID_PAID
     *   <li>VsCancelledManager.ID_BALANCE
     *   <li>VsCancelledManager.ID_SOURCE
     *   <li>VsCancelledManager.ID_PUSER
     *   <li>VsCancelledManager.ID_REGDATE
     *   <li>VsCancelledManager.ID_REMARK
     *   <li>VsCancelledManager.ID_PERSONNELID
     *   <li>VsCancelledManager.ID_ROOMTYPEID
     *   <li>VsCancelledManager.ID_RATETYPEID
     *   <li>VsCancelledManager.ID_BSOURCEID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public VsCancelledComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        VsCancelledBean b1 = (VsCancelledBean)pObj1;
        VsCancelledBean b2 = (VsCancelledBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case VsCancelledManager.ID_RESERVATIONID:
                if (b1.getReservationid() == null && b2.getReservationid() != null) {
                    iReturn = -1;
                } else if (b1.getReservationid() == null && b2.getReservationid() == null) {
                    iReturn = 0;
                } else if (b1.getReservationid() != null && b2.getReservationid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getReservationid().compareTo(b2.getReservationid());
                }
                break;
            case VsCancelledManager.ID_GUESTNAME:
                if (b1.getGuestname() == null && b2.getGuestname() != null) {
                    iReturn = -1;
                } else if (b1.getGuestname() == null && b2.getGuestname() == null) {
                    iReturn = 0;
                } else if (b1.getGuestname() != null && b2.getGuestname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getGuestname().compareTo(b2.getGuestname());
                }
                break;
            case VsCancelledManager.ID_ARRAIVALDATE:
                if (b1.getArraivaldate() == null && b2.getArraivaldate() != null) {
                    iReturn = -1;
                } else if (b1.getArraivaldate() == null && b2.getArraivaldate() == null) {
                    iReturn = 0;
                } else if (b1.getArraivaldate() != null && b2.getArraivaldate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getArraivaldate().compareTo(b2.getArraivaldate());
                }
                break;
            case VsCancelledManager.ID_DEPARTUREDATE:
                if (b1.getDeparturedate() == null && b2.getDeparturedate() != null) {
                    iReturn = -1;
                } else if (b1.getDeparturedate() == null && b2.getDeparturedate() == null) {
                    iReturn = 0;
                } else if (b1.getDeparturedate() != null && b2.getDeparturedate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getDeparturedate().compareTo(b2.getDeparturedate());
                }
                break;
            case VsCancelledManager.ID_FOLIOID:
                if (b1.getFolioid() == null && b2.getFolioid() != null) {
                    iReturn = -1;
                } else if (b1.getFolioid() == null && b2.getFolioid() == null) {
                    iReturn = 0;
                } else if (b1.getFolioid() != null && b2.getFolioid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getFolioid().compareTo(b2.getFolioid());
                }
                break;
            case VsCancelledManager.ID_CHARGES:
                if (b1.getCharges() == null && b2.getCharges() != null) {
                    iReturn = -1;
                } else if (b1.getCharges() == null && b2.getCharges() == null) {
                    iReturn = 0;
                } else if (b1.getCharges() != null && b2.getCharges() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCharges().compareTo(b2.getCharges());
                }
                break;
            case VsCancelledManager.ID_PAID:
                if (b1.getPaid() == null && b2.getPaid() != null) {
                    iReturn = -1;
                } else if (b1.getPaid() == null && b2.getPaid() == null) {
                    iReturn = 0;
                } else if (b1.getPaid() != null && b2.getPaid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPaid().compareTo(b2.getPaid());
                }
                break;
            case VsCancelledManager.ID_BALANCE:
                if (b1.getBalance() == null && b2.getBalance() != null) {
                    iReturn = -1;
                } else if (b1.getBalance() == null && b2.getBalance() == null) {
                    iReturn = 0;
                } else if (b1.getBalance() != null && b2.getBalance() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getBalance().compareTo(b2.getBalance());
                }
                break;
            case VsCancelledManager.ID_SOURCE:
                if (b1.getSource() == null && b2.getSource() != null) {
                    iReturn = -1;
                } else if (b1.getSource() == null && b2.getSource() == null) {
                    iReturn = 0;
                } else if (b1.getSource() != null && b2.getSource() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getSource().compareTo(b2.getSource());
                }
                break;
            case VsCancelledManager.ID_PUSER:
                if (b1.getPuser() == null && b2.getPuser() != null) {
                    iReturn = -1;
                } else if (b1.getPuser() == null && b2.getPuser() == null) {
                    iReturn = 0;
                } else if (b1.getPuser() != null && b2.getPuser() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPuser().compareTo(b2.getPuser());
                }
                break;
            case VsCancelledManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            case VsCancelledManager.ID_REMARK:
                if (b1.getRemark() == null && b2.getRemark() != null) {
                    iReturn = -1;
                } else if (b1.getRemark() == null && b2.getRemark() == null) {
                    iReturn = 0;
                } else if (b1.getRemark() != null && b2.getRemark() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRemark().compareTo(b2.getRemark());
                }
                break;
            case VsCancelledManager.ID_PERSONNELID:
                if (b1.getPersonnelid() == null && b2.getPersonnelid() != null) {
                    iReturn = -1;
                } else if (b1.getPersonnelid() == null && b2.getPersonnelid() == null) {
                    iReturn = 0;
                } else if (b1.getPersonnelid() != null && b2.getPersonnelid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPersonnelid().compareTo(b2.getPersonnelid());
                }
                break;
            case VsCancelledManager.ID_ROOMTYPEID:
                if (b1.getRoomtypeid() == null && b2.getRoomtypeid() != null) {
                    iReturn = -1;
                } else if (b1.getRoomtypeid() == null && b2.getRoomtypeid() == null) {
                    iReturn = 0;
                } else if (b1.getRoomtypeid() != null && b2.getRoomtypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRoomtypeid().compareTo(b2.getRoomtypeid());
                }
                break;
            case VsCancelledManager.ID_RATETYPEID:
                if (b1.getRatetypeid() == null && b2.getRatetypeid() != null) {
                    iReturn = -1;
                } else if (b1.getRatetypeid() == null && b2.getRatetypeid() == null) {
                    iReturn = 0;
                } else if (b1.getRatetypeid() != null && b2.getRatetypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRatetypeid().compareTo(b2.getRatetypeid());
                }
                break;
            case VsCancelledManager.ID_BSOURCEID:
                if (b1.getBsourceid() == null && b2.getBsourceid() != null) {
                    iReturn = -1;
                } else if (b1.getBsourceid() == null && b2.getBsourceid() == null) {
                    iReturn = 0;
                } else if (b1.getBsourceid() != null && b2.getBsourceid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getBsourceid().compareTo(b2.getBsourceid());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 

}
