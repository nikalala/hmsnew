// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.util.Comparator;
// imports+ 

// imports- 


/**
 * Comparator class is used to sort the PersonnelBean objects.
 */
public class PersonnelComparator implements Comparator
// extends+ 

// extends- 

{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for PersonnelComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new PersonnelComparator(PersonnelManager.PERSONNELID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>PersonnelManager.ID_PERSONNELID
     *   <li>PersonnelManager.ID_FNAME
     *   <li>PersonnelManager.ID_LNAME
     *   <li>PersonnelManager.ID_PHONE
     *   <li>PersonnelManager.ID_PERSONNELTYPEID
     *   <li>PersonnelManager.ID_LOGINID
     *   <li>PersonnelManager.ID_PASSWORD
     *   <li>PersonnelManager.ID_EMAIL
     *   <li>PersonnelManager.ID_ADDRESS
     *   <li>PersonnelManager.ID_REGDATE
     *   <li>PersonnelManager.ID_CHANGEBYID
     *   <li>PersonnelManager.ID_CHANGEDATE
     * </ul>
     */
    public PersonnelComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for PersonnelComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new PersonnelComparator(PersonnelManager.PERSONNELID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>PersonnelManager.ID_PERSONNELID
     *   <li>PersonnelManager.ID_FNAME
     *   <li>PersonnelManager.ID_LNAME
     *   <li>PersonnelManager.ID_PHONE
     *   <li>PersonnelManager.ID_PERSONNELTYPEID
     *   <li>PersonnelManager.ID_LOGINID
     *   <li>PersonnelManager.ID_PASSWORD
     *   <li>PersonnelManager.ID_EMAIL
     *   <li>PersonnelManager.ID_ADDRESS
     *   <li>PersonnelManager.ID_REGDATE
     *   <li>PersonnelManager.ID_DELETED
     *   <li>PersonnelManager.ID_CHANGEBYID
     *   <li>PersonnelManager.ID_CHANGEDATE
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public PersonnelComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        PersonnelBean b1 = (PersonnelBean)pObj1;
        PersonnelBean b2 = (PersonnelBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case PersonnelManager.ID_PERSONNELID:
                if (b1.getPersonnelid() == null && b2.getPersonnelid() != null) {
                    iReturn = -1;
                } else if (b1.getPersonnelid() == null && b2.getPersonnelid() == null) {
                    iReturn = 0;
                } else if (b1.getPersonnelid() != null && b2.getPersonnelid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPersonnelid().compareTo(b2.getPersonnelid());
                }
                break;
            case PersonnelManager.ID_FNAME:
                if (b1.getFname() == null && b2.getFname() != null) {
                    iReturn = -1;
                } else if (b1.getFname() == null && b2.getFname() == null) {
                    iReturn = 0;
                } else if (b1.getFname() != null && b2.getFname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getFname().compareTo(b2.getFname());
                }
                break;
            case PersonnelManager.ID_LNAME:
                if (b1.getLname() == null && b2.getLname() != null) {
                    iReturn = -1;
                } else if (b1.getLname() == null && b2.getLname() == null) {
                    iReturn = 0;
                } else if (b1.getLname() != null && b2.getLname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getLname().compareTo(b2.getLname());
                }
                break;
            case PersonnelManager.ID_PHONE:
                if (b1.getPhone() == null && b2.getPhone() != null) {
                    iReturn = -1;
                } else if (b1.getPhone() == null && b2.getPhone() == null) {
                    iReturn = 0;
                } else if (b1.getPhone() != null && b2.getPhone() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPhone().compareTo(b2.getPhone());
                }
                break;
            case PersonnelManager.ID_PERSONNELTYPEID:
                if (b1.getPersonneltypeid() == null && b2.getPersonneltypeid() != null) {
                    iReturn = -1;
                } else if (b1.getPersonneltypeid() == null && b2.getPersonneltypeid() == null) {
                    iReturn = 0;
                } else if (b1.getPersonneltypeid() != null && b2.getPersonneltypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPersonneltypeid().compareTo(b2.getPersonneltypeid());
                }
                break;
            case PersonnelManager.ID_LOGINID:
                if (b1.getLoginid() == null && b2.getLoginid() != null) {
                    iReturn = -1;
                } else if (b1.getLoginid() == null && b2.getLoginid() == null) {
                    iReturn = 0;
                } else if (b1.getLoginid() != null && b2.getLoginid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getLoginid().compareTo(b2.getLoginid());
                }
                break;
            case PersonnelManager.ID_PASSWORD:
                if (b1.getPassword() == null && b2.getPassword() != null) {
                    iReturn = -1;
                } else if (b1.getPassword() == null && b2.getPassword() == null) {
                    iReturn = 0;
                } else if (b1.getPassword() != null && b2.getPassword() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPassword().compareTo(b2.getPassword());
                }
                break;
            case PersonnelManager.ID_EMAIL:
                if (b1.getEmail() == null && b2.getEmail() != null) {
                    iReturn = -1;
                } else if (b1.getEmail() == null && b2.getEmail() == null) {
                    iReturn = 0;
                } else if (b1.getEmail() != null && b2.getEmail() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getEmail().compareTo(b2.getEmail());
                }
                break;
            case PersonnelManager.ID_ADDRESS:
                if (b1.getAddress() == null && b2.getAddress() != null) {
                    iReturn = -1;
                } else if (b1.getAddress() == null && b2.getAddress() == null) {
                    iReturn = 0;
                } else if (b1.getAddress() != null && b2.getAddress() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAddress().compareTo(b2.getAddress());
                }
                break;
            case PersonnelManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            case PersonnelManager.ID_CHANGEBYID:
                if (b1.getChangebyid() == null && b2.getChangebyid() != null) {
                    iReturn = -1;
                } else if (b1.getChangebyid() == null && b2.getChangebyid() == null) {
                    iReturn = 0;
                } else if (b1.getChangebyid() != null && b2.getChangebyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getChangebyid().compareTo(b2.getChangebyid());
                }
                break;
            case PersonnelManager.ID_CHANGEDATE:
                if (b1.getChangedate() == null && b2.getChangedate() != null) {
                    iReturn = -1;
                } else if (b1.getChangedate() == null && b2.getChangedate() == null) {
                    iReturn = 0;
                } else if (b1.getChangedate() != null && b2.getChangedate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getChangedate().compareTo(b2.getChangedate());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 

}
