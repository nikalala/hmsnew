// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class CurrencyrateBean
// extends+ 

// extends- 

{
    private Long currencyrateid;
    private boolean currencyrateid_is_modified = false;
    private boolean currencyrateid_is_initialized = false;
    
    private Integer currencyid;
    private boolean currencyid_is_modified = false;
    private boolean currencyid_is_initialized = false;
    
    private java.util.Date ratedate;
    private boolean ratedate_is_modified = false;
    private boolean ratedate_is_initialized = false;
    
    private Double value;
    private boolean value_is_modified = false;
    private boolean value_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    CurrencyrateBean()
    {
    }
    
    /**
     * Getter method for currencyrateid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: currencyrate.currencyrateid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of currencyrateid
     */
    public Long getCurrencyrateid()
    {
        return currencyrateid; 
    }

    /**
     * Setter method for currencyrateid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to currencyrateid
     */
    public void setCurrencyrateid(Long newVal) {
        if ((newVal != null && this.currencyrateid != null && (newVal.compareTo(this.currencyrateid) == 0)) || 
            (newVal == null && this.currencyrateid == null && currencyrateid_is_initialized)) {
            return; 
        } 
        this.currencyrateid = newVal; 
        currencyrateid_is_modified = true; 
        currencyrateid_is_initialized = true; 
    }

    /**
     * Setter method for currencyrateid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to currencyrateid
     */
    public void setCurrencyrateid(long newVal) {
        setCurrencyrateid(new Long(newVal));
    }

    /**
     * Determines if the currencyrateid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCurrencyrateidModified() {
        return currencyrateid_is_modified; 
    }

    /**
     * Determines if the currencyrateid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCurrencyrateidInitialized() {
        return currencyrateid_is_initialized; 
    }

    /**
     * Getter method for currencyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: currencyrate.currencyid
     * <li> foreign key: currency.currencyid
     * <li>comments: ??????
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of currencyid
     */
    public Integer getCurrencyid()
    {
        return currencyid; 
    }

    /**
     * Setter method for currencyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to currencyid
     */
    public void setCurrencyid(Integer newVal) {
        if ((newVal != null && this.currencyid != null && (newVal.compareTo(this.currencyid) == 0)) || 
            (newVal == null && this.currencyid == null && currencyid_is_initialized)) {
            return; 
        } 
        this.currencyid = newVal; 
        currencyid_is_modified = true; 
        currencyid_is_initialized = true; 
    }

    /**
     * Setter method for currencyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to currencyid
     */
    public void setCurrencyid(int newVal) {
        setCurrencyid(new Integer(newVal));
    }

    /**
     * Determines if the currencyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCurrencyidModified() {
        return currencyid_is_modified; 
    }

    /**
     * Determines if the currencyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCurrencyidInitialized() {
        return currencyid_is_initialized; 
    }

    /**
     * Getter method for ratedate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: currencyrate.ratedate
     * <li>comments: ??????
     * <li>column size: 13
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of ratedate
     */
    public java.util.Date getRatedate()
    {
        return ratedate; 
    }

    /**
     * Setter method for ratedate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ratedate
     */
    public void setRatedate(java.util.Date newVal) {
        if ((newVal != null && this.ratedate != null && (newVal.compareTo(this.ratedate) == 0)) || 
            (newVal == null && this.ratedate == null && ratedate_is_initialized)) {
            return; 
        } 
        this.ratedate = newVal; 
        ratedate_is_modified = true; 
        ratedate_is_initialized = true; 
    }

    /**
     * Setter method for ratedate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ratedate
     */
    public void setRatedate(long newVal) {
        setRatedate(new java.util.Date(newVal));
    }

    /**
     * Determines if the ratedate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRatedateModified() {
        return ratedate_is_modified; 
    }

    /**
     * Determines if the ratedate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRatedateInitialized() {
        return ratedate_is_initialized; 
    }

    /**
     * Getter method for value.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: currencyrate.value
     * <li>comments: ???????
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of value
     */
    public Double getValue()
    {
        return value; 
    }

    /**
     * Setter method for value.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to value
     */
    public void setValue(Double newVal) {
        if ((newVal != null && this.value != null && (newVal.compareTo(this.value) == 0)) || 
            (newVal == null && this.value == null && value_is_initialized)) {
            return; 
        } 
        this.value = newVal; 
        value_is_modified = true; 
        value_is_initialized = true; 
    }

    /**
     * Setter method for value.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to value
     */
    public void setValue(double newVal) {
        setValue(new Double(newVal));
    }

    /**
     * Determines if the value has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isValueModified() {
        return value_is_modified; 
    }

    /**
     * Determines if the value has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isValueInitialized() {
        return value_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return currencyrateid_is_modified || 
		currencyid_is_modified || 
		ratedate_is_modified || 
		value_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        currencyrateid_is_modified = false;
        currencyid_is_modified = false;
        ratedate_is_modified = false;
        value_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(CurrencyrateBean bean) {
        setCurrencyrateid(bean.getCurrencyrateid());
        setCurrencyid(bean.getCurrencyid());
        setRatedate(bean.getRatedate());
        setValue(bean.getValue());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[currencyrate] "
                 + "\n - currencyrate.currencyrateid = " + (currencyrateid_is_initialized ? ("[" + (currencyrateid == null ? null : currencyrateid.toString()) + "]") : "not initialized") + ""
                 + "\n - currencyrate.currencyid = " + (currencyid_is_initialized ? ("[" + (currencyid == null ? null : currencyid.toString()) + "]") : "not initialized") + ""
                 + "\n - currencyrate.ratedate = " + (ratedate_is_initialized ? ("[" + (ratedate == null ? null : ratedate.toString()) + "]") : "not initialized") + ""
                 + "\n - currencyrate.value = " + (value_is_initialized ? ("[" + (value == null ? null : value.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
