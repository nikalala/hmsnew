// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the message table.
 */
public class MessageManager
// extends+ 

// extends- 

{

    /**
     * Column messageid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_MESSAGEID = 0;
    public static final int TYPE_MESSAGEID = Types.INTEGER;
    public static final String NAME_MESSAGEID = "messageid";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 1;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column guestid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_GUESTID = 2;
    public static final int TYPE_GUESTID = Types.BIGINT;
    public static final String NAME_GUESTID = "guestid";

    /**
     * Column stid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_STID = 3;
    public static final int TYPE_STID = Types.INTEGER;
    public static final String NAME_STID = "stid";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 4;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 5;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column active of type Types.BIT mapped to Boolean.
     */
    public static final int ID_ACTIVE = 6;
    public static final int TYPE_ACTIVE = Types.BIT;
    public static final String NAME_ACTIVE = "active";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 7;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";

    /**
     * Column reservationid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_RESERVATIONID = 8;
    public static final int TYPE_RESERVATIONID = Types.INTEGER;
    public static final String NAME_RESERVATIONID = "reservationid";


    private static final String TABLE_NAME = "message";

    /**
     * Create an array of type string containing all the fields of the message table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "message.messageid"
        ,"message.name"
        ,"message.guestid"
        ,"message.stid"
        ,"message.regbyid"
        ,"message.regdate"
        ,"message.active"
        ,"message.deleted"
        ,"message.reservationid"
    };

    /**
     * Field that contains the comma separated fields of the message table.
     */
    private static final String ALL_FIELDS = "message.messageid"
                            + ",message.name"
                            + ",message.guestid"
                            + ",message.stid"
                            + ",message.regbyid"
                            + ",message.regdate"
                            + ",message.active"
                            + ",message.deleted"
                            + ",message.reservationid";

    private static MessageManager singleton = new MessageManager();

    /**
     * Get the MessageManager singleton.
     *
     * @return MessageManager 
     */
    synchronized public static MessageManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own MessageManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(MessageManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new MessageBean instance.
     *
     * @return the new MessageBean 
     */
    public MessageBean createMessageBean()
    {
        return new MessageBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a MessageBean from the message using its key fields.
     *
     * @return a unique MessageBean 
     */
    //12
    public MessageBean loadByPrimaryKey(Integer messageid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM message WHERE message.messageid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, messageid);
            MessageBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer messageid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from message WHERE message.messageid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, messageid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads MessageBean array from the message table using its regbyid field.
     *
     * @return an array of MessageBean 
     */
    // LOAD BY IMPORTED KEY
    public MessageBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM message WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the message table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM message WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the PersonnelBean object from the message.personnelid field.
     *
     * @param pObject the MessageBean 
     * @return the associated PersonnelBean pObject
     */
    // GET IMPORTED
    public PersonnelBean getPersonnelBean(MessageBean pObject) throws SQLException
    {
        PersonnelBean other = PersonnelManager.getInstance().createPersonnelBean();
        other.setPersonnelid(pObject.getRegbyid());
        return PersonnelManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the MessageBean object to the PersonnelBean object.
     *
     * @param pObject the MessageBean object to use
     * @param pObjectToBeSet the PersonnelBean object to associate to the MessageBean 
     * @return the associated PersonnelBean pObject
     */
    // SET IMPORTED
    public MessageBean setPersonnelBean(MessageBean pObject,PersonnelBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonnelid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from message.
     *
     * @return an array of MessageManager pObject
     */
    //38
    public MessageBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM message",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of MessageBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting MessageBean table 
     */
    //49
    public MessageBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of MessageBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting MessageBean table 
     */
    //51
    public MessageBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from message " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from message ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (MessageBean[])v.toArray(new MessageBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from message table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the message table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM message " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the MessageBean pObject into the database.
     *
     * @param pObject the MessageBean pObject to be saved
     */
    //100
    public MessageBean save(MessageBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isMessageidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('messageid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setMessageid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into message (");
    
                if (pObject.isMessageidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("messageid");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isGuestidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("guestid");
                    _dirtyCount++;
                }

                if (pObject.isStidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("stid");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isActiveModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("active");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                if (pObject.isReservationidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("reservationid");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isMessageidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getMessageid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isGuestidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
                }
    
                if (pObject.isStidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStid());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isActiveModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isReservationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationid());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE message SET ");
                boolean useComma=false;

                if (pObject.isMessageidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("messageid").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isGuestidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("guestid").append("=?");
                }

                if (pObject.isStidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("stid").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isActiveModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("active").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }

                if (pObject.isReservationidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("reservationid").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("message.messageid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isMessageidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getMessageid());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isGuestidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
                }

                if (pObject.isStidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getStid());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isActiveModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }

                if (pObject.isReservationidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationid());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getMessageid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of MessageBean pObjects into the database.
     *
     * @param pObjects the MessageBean pObject table to be saved
     * @return the saved MessageBean array.
     */
    //65
    public MessageBean[] save(MessageBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique MessageBean pObject from a template one giving a c
     *
     * @param pObject the MessageBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public MessageBean loadUniqueUsingTemplate(MessageBean pObject) throws SQLException
    {
         MessageBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of MessageBean from a template one.
     *
     * @param pObject the MessageBean template to look for
     * @return all the MessageBean matching the template
     */
    //88
    public MessageBean[] loadUsingTemplate(MessageBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from message WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isMessageidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("messageid= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isGuestidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestid= ?");
             }
    
             if (pObject.isStidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stid= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isActiveModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("active= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (pObject.isReservationidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationid= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isMessageidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getMessageid());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isGuestidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
             }
    
             if (pObject.isStidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getStid());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isActiveModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             if (pObject.isReservationidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationid());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a MessageBean template.
     *
     * @param pObject the MessageBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(MessageBean pObject) throws SQLException
    {
        if (pObject.isMessageidInitialized())
            return deleteByPrimaryKey(pObject.getMessageid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM message WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isMessageidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("messageid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGuestidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("guestid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("stid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isActiveInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("active").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isReservationidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("reservationid").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isMessageidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getMessageid());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isGuestidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
            }
    
            if (pObject.isStidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getStid());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isActiveInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            if (pObject.isReservationidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationid());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table message.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table message with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from message " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table message with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific MessageBean pObject given a c
     *
     * @param pObject the MessageBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(MessageBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from message WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isMessageidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("messageid= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isGuestidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestid= ?");
                }
    
                if (pObject.isStidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stid= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isActiveModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("active= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (pObject.isReservationidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationid= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isMessageidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getMessageid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isGuestidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
                }
    
                if (pObject.isStidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStid());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isActiveModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isReservationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationid());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the message on a MessageBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting MessageBean pObject
     */
    //72
    public MessageBean decodeRow(ResultSet rs) throws SQLException
    {
        MessageBean pObject = createMessageBean();
        pObject.setMessageid(Manager.getInteger(rs, 1));
        pObject.setName(rs.getString(2));
        pObject.setGuestid(Manager.getLong(rs, 3));
        pObject.setStid(Manager.getInteger(rs, 4));
        pObject.setRegbyid(Manager.getInteger(rs, 5));
        pObject.setRegdate(rs.getTimestamp(6));
        pObject.setActive(Manager.getBoolean(rs, 7));
        pObject.setDeleted(Manager.getBoolean(rs, 8));
        pObject.setReservationid(Manager.getInteger(rs, 9));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the message table on a MessageBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting MessageBean pObject
     */
    //73
    public MessageBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        MessageBean pObject = createMessageBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_MESSAGEID:
                    ++pos;
                    pObject.setMessageid(Manager.getInteger(rs, pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_GUESTID:
                    ++pos;
                    pObject.setGuestid(Manager.getLong(rs, pos));
                    break;
                case ID_STID:
                    ++pos;
                    pObject.setStid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_ACTIVE:
                    ++pos;
                    pObject.setActive(Manager.getBoolean(rs, pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
                case ID_RESERVATIONID:
                    ++pos;
                    pObject.setReservationid(Manager.getInteger(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of MessageBean 
     */
    //41
    public MessageBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of MessageBean 
     */
    public MessageBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (MessageBean[])v.toArray(new MessageBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private MessageListener listener = null;

    /**
     * Registers a unique MessageListener listener.
     */
    //66.5
    public void registerListener(MessageListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the MessageBean pObject.
     *
     * @param pObject the MessageBean pObject to be saved
     */
    //67
    void beforeInsert(MessageBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the MessageBean pObject.
     *
     * @param pObject the MessageBean pObject to be saved
     */
    //68
    void afterInsert(MessageBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the MessageBean pObject.
     *
     * @param pObject the MessageBean pObject to be updated
     */
    //69
    void beforeUpdate(MessageBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the MessageBean pObject.
     *
     * @param pObject the MessageBean pObject to be updated
     */
    //70
    void afterUpdate(MessageBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
