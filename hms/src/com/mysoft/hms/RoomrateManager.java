// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the roomrate table.
 */
public class RoomrateManager
// extends+ 

// extends- 

{

    /**
     * Column roomrateid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ROOMRATEID = 0;
    public static final int TYPE_ROOMRATEID = Types.INTEGER;
    public static final String NAME_ROOMRATEID = "roomrateid";

    /**
     * Column roomtypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ROOMTYPEID = 1;
    public static final int TYPE_ROOMTYPEID = Types.INTEGER;
    public static final String NAME_ROOMTYPEID = "roomtypeid";

    /**
     * Column seasonid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SEASONID = 2;
    public static final int TYPE_SEASONID = Types.INTEGER;
    public static final String NAME_SEASONID = "seasonid";

    /**
     * Column contragentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRAGENTID = 3;
    public static final int TYPE_CONTRAGENTID = Types.BIGINT;
    public static final String NAME_CONTRAGENTID = "contragentid";

    /**
     * Column tax of type Types.BIT mapped to Boolean.
     */
    public static final int ID_TAX = 4;
    public static final int TYPE_TAX = Types.BIT;
    public static final String NAME_TAX = "tax";

    /**
     * Column rate of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_RATE = 5;
    public static final int TYPE_RATE = Types.DOUBLE;
    public static final String NAME_RATE = "rate";

    /**
     * Column rateadult of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_RATEADULT = 6;
    public static final int TYPE_RATEADULT = Types.DOUBLE;
    public static final String NAME_RATEADULT = "rateadult";

    /**
     * Column ratechild of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_RATECHILD = 7;
    public static final int TYPE_RATECHILD = Types.DOUBLE;
    public static final String NAME_RATECHILD = "ratechild";

    /**
     * Column ratetypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_RATETYPEID = 8;
    public static final int TYPE_RATETYPEID = Types.INTEGER;
    public static final String NAME_RATETYPEID = "ratetypeid";

    /**
     * Column ord of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ORD = 9;
    public static final int TYPE_ORD = Types.INTEGER;
    public static final String NAME_ORD = "ord";


    private static final String TABLE_NAME = "roomrate";

    /**
     * Create an array of type string containing all the fields of the roomrate table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "roomrate.roomrateid"
        ,"roomrate.roomtypeid"
        ,"roomrate.seasonid"
        ,"roomrate.contragentid"
        ,"roomrate.tax"
        ,"roomrate.rate"
        ,"roomrate.rateadult"
        ,"roomrate.ratechild"
        ,"roomrate.ratetypeid"
        ,"roomrate.ord"
    };

    /**
     * Field that contains the comma separated fields of the roomrate table.
     */
    private static final String ALL_FIELDS = "roomrate.roomrateid"
                            + ",roomrate.roomtypeid"
                            + ",roomrate.seasonid"
                            + ",roomrate.contragentid"
                            + ",roomrate.tax"
                            + ",roomrate.rate"
                            + ",roomrate.rateadult"
                            + ",roomrate.ratechild"
                            + ",roomrate.ratetypeid"
                            + ",roomrate.ord";

    private static RoomrateManager singleton = new RoomrateManager();

    /**
     * Get the RoomrateManager singleton.
     *
     * @return RoomrateManager 
     */
    synchronized public static RoomrateManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own RoomrateManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(RoomrateManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new RoomrateBean instance.
     *
     * @return the new RoomrateBean 
     */
    public RoomrateBean createRoomrateBean()
    {
        return new RoomrateBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a RoomrateBean from the roomrate using its key fields.
     *
     * @return a unique RoomrateBean 
     */
    //12
    public RoomrateBean loadByPrimaryKey(Integer roomrateid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM roomrate WHERE roomrate.roomrateid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, roomrateid);
            RoomrateBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer roomrateid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from roomrate WHERE roomrate.roomrateid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, roomrateid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads RoomrateBean array from the roomrate table using its contragentid field.
     *
     * @return an array of RoomrateBean 
     */
    // LOAD BY IMPORTED KEY
    public RoomrateBean[] loadByContragentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM roomrate WHERE contragentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the roomrate table by contragentid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByContragentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM roomrate WHERE contragentid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads RoomrateBean array from the roomrate table using its ratetypeid field.
     *
     * @return an array of RoomrateBean 
     */
    // LOAD BY IMPORTED KEY
    public RoomrateBean[] loadByRatetypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM roomrate WHERE ratetypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the roomrate table by ratetypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRatetypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM roomrate WHERE ratetypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads RoomrateBean array from the roomrate table using its roomtypeid field.
     *
     * @return an array of RoomrateBean 
     */
    // LOAD BY IMPORTED KEY
    public RoomrateBean[] loadByRoomtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM roomrate WHERE roomtypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the roomrate table by roomtypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRoomtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM roomrate WHERE roomtypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads RoomrateBean array from the roomrate table using its seasonid field.
     *
     * @return an array of RoomrateBean 
     */
    // LOAD BY IMPORTED KEY
    public RoomrateBean[] loadBySeasonid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM roomrate WHERE seasonid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the roomrate table by seasonid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySeasonid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM roomrate WHERE seasonid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the ContragentBean object from the roomrate.contragentid field.
     *
     * @param pObject the RoomrateBean 
     * @return the associated ContragentBean pObject
     */
    // GET IMPORTED
    public ContragentBean getContragentBean(RoomrateBean pObject) throws SQLException
    {
        ContragentBean other = ContragentManager.getInstance().createContragentBean();
        other.setContragentid(pObject.getContragentid());
        return ContragentManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the RoomrateBean object to the ContragentBean object.
     *
     * @param pObject the RoomrateBean object to use
     * @param pObjectToBeSet the ContragentBean object to associate to the RoomrateBean 
     * @return the associated ContragentBean pObject
     */
    // SET IMPORTED
    public RoomrateBean setContragentBean(RoomrateBean pObject,ContragentBean pObjectToBeSet)
    {
        pObject.setContragentid(pObjectToBeSet.getContragentid());
        return pObject;
    }

    /**
     * Retrieves the RatetypeBean object from the roomrate.ratetypeid field.
     *
     * @param pObject the RoomrateBean 
     * @return the associated RatetypeBean pObject
     */
    // GET IMPORTED
    public RatetypeBean getRatetypeBean(RoomrateBean pObject) throws SQLException
    {
        RatetypeBean other = RatetypeManager.getInstance().createRatetypeBean();
        other.setRatetypeid(pObject.getRatetypeid());
        return RatetypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the RoomrateBean object to the RatetypeBean object.
     *
     * @param pObject the RoomrateBean object to use
     * @param pObjectToBeSet the RatetypeBean object to associate to the RoomrateBean 
     * @return the associated RatetypeBean pObject
     */
    // SET IMPORTED
    public RoomrateBean setRatetypeBean(RoomrateBean pObject,RatetypeBean pObjectToBeSet)
    {
        pObject.setRatetypeid(pObjectToBeSet.getRatetypeid());
        return pObject;
    }

    /**
     * Retrieves the RoomtypeBean object from the roomrate.roomtypeid field.
     *
     * @param pObject the RoomrateBean 
     * @return the associated RoomtypeBean pObject
     */
    // GET IMPORTED
    public RoomtypeBean getRoomtypeBean(RoomrateBean pObject) throws SQLException
    {
        RoomtypeBean other = RoomtypeManager.getInstance().createRoomtypeBean();
        other.setRoomtypeid(pObject.getRoomtypeid());
        return RoomtypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the RoomrateBean object to the RoomtypeBean object.
     *
     * @param pObject the RoomrateBean object to use
     * @param pObjectToBeSet the RoomtypeBean object to associate to the RoomrateBean 
     * @return the associated RoomtypeBean pObject
     */
    // SET IMPORTED
    public RoomrateBean setRoomtypeBean(RoomrateBean pObject,RoomtypeBean pObjectToBeSet)
    {
        pObject.setRoomtypeid(pObjectToBeSet.getRoomtypeid());
        return pObject;
    }

    /**
     * Retrieves the SeasonBean object from the roomrate.seasonid field.
     *
     * @param pObject the RoomrateBean 
     * @return the associated SeasonBean pObject
     */
    // GET IMPORTED
    public SeasonBean getSeasonBean(RoomrateBean pObject) throws SQLException
    {
        SeasonBean other = SeasonManager.getInstance().createSeasonBean();
        other.setSeasonid(pObject.getSeasonid());
        return SeasonManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the RoomrateBean object to the SeasonBean object.
     *
     * @param pObject the RoomrateBean object to use
     * @param pObjectToBeSet the SeasonBean object to associate to the RoomrateBean 
     * @return the associated SeasonBean pObject
     */
    // SET IMPORTED
    public RoomrateBean setSeasonBean(RoomrateBean pObject,SeasonBean pObjectToBeSet)
    {
        pObject.setSeasonid(pObjectToBeSet.getSeasonid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from roomrate.
     *
     * @return an array of RoomrateManager pObject
     */
    //38
    public RoomrateBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM roomrate",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of RoomrateBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting RoomrateBean table 
     */
    //49
    public RoomrateBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of RoomrateBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting RoomrateBean table 
     */
    //51
    public RoomrateBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from roomrate " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from roomrate ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (RoomrateBean[])v.toArray(new RoomrateBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from roomrate table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the roomrate table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM roomrate " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the RoomrateBean pObject into the database.
     *
     * @param pObject the RoomrateBean pObject to be saved
     */
    //100
    public RoomrateBean save(RoomrateBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isRoomrateidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('roomrateid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setRoomrateid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into roomrate (");
    
                if (pObject.isRoomrateidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roomrateid");
                    _dirtyCount++;
                }

                if (pObject.isRoomtypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roomtypeid");
                    _dirtyCount++;
                }

                if (pObject.isSeasonidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("seasonid");
                    _dirtyCount++;
                }

                if (pObject.isContragentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contragentid");
                    _dirtyCount++;
                }

                if (pObject.isTaxModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("tax");
                    _dirtyCount++;
                }

                if (pObject.isRateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("rate");
                    _dirtyCount++;
                }

                if (pObject.isRateadultModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("rateadult");
                    _dirtyCount++;
                }

                if (pObject.isRatechildModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ratechild");
                    _dirtyCount++;
                }

                if (pObject.isRatetypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ratetypeid");
                    _dirtyCount++;
                }

                if (pObject.isOrdModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ord");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isRoomrateidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomrateid());
                }
    
                if (pObject.isRoomtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
                }
    
                if (pObject.isSeasonidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
                }
    
                if (pObject.isContragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }
    
                if (pObject.isTaxModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getTax());
                }
    
                if (pObject.isRateModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getRate());
                }
    
                if (pObject.isRateadultModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getRateadult());
                }
    
                if (pObject.isRatechildModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getRatechild());
                }
    
                if (pObject.isRatetypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRatetypeid());
                }
    
                if (pObject.isOrdModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE roomrate SET ");
                boolean useComma=false;

                if (pObject.isRoomrateidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roomrateid").append("=?");
                }

                if (pObject.isRoomtypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roomtypeid").append("=?");
                }

                if (pObject.isSeasonidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("seasonid").append("=?");
                }

                if (pObject.isContragentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contragentid").append("=?");
                }

                if (pObject.isTaxModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("tax").append("=?");
                }

                if (pObject.isRateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("rate").append("=?");
                }

                if (pObject.isRateadultModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("rateadult").append("=?");
                }

                if (pObject.isRatechildModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ratechild").append("=?");
                }

                if (pObject.isRatetypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ratetypeid").append("=?");
                }

                if (pObject.isOrdModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ord").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("roomrate.roomrateid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isRoomrateidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomrateid());
                }

                if (pObject.isRoomtypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
                }

                if (pObject.isSeasonidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
                }

                if (pObject.isContragentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }

                if (pObject.isTaxModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getTax());
                }

                if (pObject.isRateModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getRate());
                }

                if (pObject.isRateadultModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getRateadult());
                }

                if (pObject.isRatechildModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getRatechild());
                }

                if (pObject.isRatetypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRatetypeid());
                }

                if (pObject.isOrdModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomrateid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of RoomrateBean pObjects into the database.
     *
     * @param pObjects the RoomrateBean pObject table to be saved
     * @return the saved RoomrateBean array.
     */
    //65
    public RoomrateBean[] save(RoomrateBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique RoomrateBean pObject from a template one giving a c
     *
     * @param pObject the RoomrateBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public RoomrateBean loadUniqueUsingTemplate(RoomrateBean pObject) throws SQLException
    {
         RoomrateBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of RoomrateBean from a template one.
     *
     * @param pObject the RoomrateBean template to look for
     * @return all the RoomrateBean matching the template
     */
    //88
    public RoomrateBean[] loadUsingTemplate(RoomrateBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from roomrate WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isRoomrateidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomrateid= ?");
             }
    
             if (pObject.isRoomtypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomtypeid= ?");
             }
    
             if (pObject.isSeasonidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("seasonid= ?");
             }
    
             if (pObject.isContragentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contragentid= ?");
             }
    
             if (pObject.isTaxModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tax= ?");
             }
    
             if (pObject.isRateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("rate= ?");
             }
    
             if (pObject.isRateadultModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("rateadult= ?");
             }
    
             if (pObject.isRatechildModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ratechild= ?");
             }
    
             if (pObject.isRatetypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ratetypeid= ?");
             }
    
             if (pObject.isOrdModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ord= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isRoomrateidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomrateid());
             }
    
             if (pObject.isRoomtypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
             }
    
             if (pObject.isSeasonidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
             }
    
             if (pObject.isContragentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
             }
    
             if (pObject.isTaxModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getTax());
             }
    
             if (pObject.isRateModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getRate());
             }
    
             if (pObject.isRateadultModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getRateadult());
             }
    
             if (pObject.isRatechildModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getRatechild());
             }
    
             if (pObject.isRatetypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRatetypeid());
             }
    
             if (pObject.isOrdModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a RoomrateBean template.
     *
     * @param pObject the RoomrateBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(RoomrateBean pObject) throws SQLException
    {
        if (pObject.isRoomrateidInitialized())
            return deleteByPrimaryKey(pObject.getRoomrateid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM roomrate WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isRoomrateidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roomrateid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRoomtypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roomtypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSeasonidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("seasonid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContragentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contragentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTaxInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("tax").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("rate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRateadultInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("rateadult").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRatechildInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ratechild").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRatetypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ratetypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isOrdInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ord").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isRoomrateidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomrateid());
            }
    
            if (pObject.isRoomtypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
            }
    
            if (pObject.isSeasonidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
            }
    
            if (pObject.isContragentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
            }
    
            if (pObject.isTaxInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getTax());
            }
    
            if (pObject.isRateInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getRate());
            }
    
            if (pObject.isRateadultInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getRateadult());
            }
    
            if (pObject.isRatechildInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getRatechild());
            }
    
            if (pObject.isRatetypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRatetypeid());
            }
    
            if (pObject.isOrdInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table roomrate.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table roomrate with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from roomrate " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table roomrate with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific RoomrateBean pObject given a c
     *
     * @param pObject the RoomrateBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(RoomrateBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from roomrate WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isRoomrateidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomrateid= ?");
                }
    
                if (pObject.isRoomtypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomtypeid= ?");
                }
    
                if (pObject.isSeasonidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("seasonid= ?");
                }
    
                if (pObject.isContragentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contragentid= ?");
                }
    
                if (pObject.isTaxModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tax= ?");
                }
    
                if (pObject.isRateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("rate= ?");
                }
    
                if (pObject.isRateadultModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("rateadult= ?");
                }
    
                if (pObject.isRatechildModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ratechild= ?");
                }
    
                if (pObject.isRatetypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ratetypeid= ?");
                }
    
                if (pObject.isOrdModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ord= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isRoomrateidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomrateid());
                }
    
                if (pObject.isRoomtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
                }
    
                if (pObject.isSeasonidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
                }
    
                if (pObject.isContragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }
    
                if (pObject.isTaxModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getTax());
                }
    
                if (pObject.isRateModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getRate());
                }
    
                if (pObject.isRateadultModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getRateadult());
                }
    
                if (pObject.isRatechildModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getRatechild());
                }
    
                if (pObject.isRatetypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRatetypeid());
                }
    
                if (pObject.isOrdModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the roomrate on a RoomrateBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting RoomrateBean pObject
     */
    //72
    public RoomrateBean decodeRow(ResultSet rs) throws SQLException
    {
        RoomrateBean pObject = createRoomrateBean();
        pObject.setRoomrateid(Manager.getInteger(rs, 1));
        pObject.setRoomtypeid(Manager.getInteger(rs, 2));
        pObject.setSeasonid(Manager.getInteger(rs, 3));
        pObject.setContragentid(Manager.getLong(rs, 4));
        pObject.setTax(Manager.getBoolean(rs, 5));
        pObject.setRate(Manager.getDouble(rs, 6));
        pObject.setRateadult(Manager.getDouble(rs, 7));
        pObject.setRatechild(Manager.getDouble(rs, 8));
        pObject.setRatetypeid(Manager.getInteger(rs, 9));
        pObject.setOrd(Manager.getInteger(rs, 10));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the roomrate table on a RoomrateBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting RoomrateBean pObject
     */
    //73
    public RoomrateBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        RoomrateBean pObject = createRoomrateBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_ROOMRATEID:
                    ++pos;
                    pObject.setRoomrateid(Manager.getInteger(rs, pos));
                    break;
                case ID_ROOMTYPEID:
                    ++pos;
                    pObject.setRoomtypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_SEASONID:
                    ++pos;
                    pObject.setSeasonid(Manager.getInteger(rs, pos));
                    break;
                case ID_CONTRAGENTID:
                    ++pos;
                    pObject.setContragentid(Manager.getLong(rs, pos));
                    break;
                case ID_TAX:
                    ++pos;
                    pObject.setTax(Manager.getBoolean(rs, pos));
                    break;
                case ID_RATE:
                    ++pos;
                    pObject.setRate(Manager.getDouble(rs, pos));
                    break;
                case ID_RATEADULT:
                    ++pos;
                    pObject.setRateadult(Manager.getDouble(rs, pos));
                    break;
                case ID_RATECHILD:
                    ++pos;
                    pObject.setRatechild(Manager.getDouble(rs, pos));
                    break;
                case ID_RATETYPEID:
                    ++pos;
                    pObject.setRatetypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_ORD:
                    ++pos;
                    pObject.setOrd(Manager.getInteger(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of RoomrateBean 
     */
    //41
    public RoomrateBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of RoomrateBean 
     */
    public RoomrateBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (RoomrateBean[])v.toArray(new RoomrateBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private RoomrateListener listener = null;

    /**
     * Registers a unique RoomrateListener listener.
     */
    //66.5
    public void registerListener(RoomrateListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the RoomrateBean pObject.
     *
     * @param pObject the RoomrateBean pObject to be saved
     */
    //67
    void beforeInsert(RoomrateBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the RoomrateBean pObject.
     *
     * @param pObject the RoomrateBean pObject to be saved
     */
    //68
    void afterInsert(RoomrateBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the RoomrateBean pObject.
     *
     * @param pObject the RoomrateBean pObject to be updated
     */
    //69
    void beforeUpdate(RoomrateBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the RoomrateBean pObject.
     *
     * @param pObject the RoomrateBean pObject to be updated
     */
    //70
    void afterUpdate(RoomrateBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
