// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class PickdropBean
// extends+ 

// extends- 

{
    private Long pickdropid;
    private boolean pickdropid_is_modified = false;
    private boolean pickdropid_is_initialized = false;
    
    private Integer transportationmodeid;
    private boolean transportationmodeid_is_modified = false;
    private boolean transportationmodeid_is_initialized = false;
    
    private String vehicle;
    private boolean vehicle_is_modified = false;
    private boolean vehicle_is_initialized = false;
    
    private Boolean pick;
    private boolean pick_is_modified = false;
    private boolean pick_is_initialized = false;
    
    private java.sql.Timestamp actiondate;
    private boolean actiondate_is_modified = false;
    private boolean actiondate_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    PickdropBean()
    {
    }
    
    /**
     * Getter method for pickdropid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: pickdrop.pickdropid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of pickdropid
     */
    public Long getPickdropid()
    {
        return pickdropid; 
    }

    /**
     * Setter method for pickdropid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to pickdropid
     */
    public void setPickdropid(Long newVal) {
        if ((newVal != null && this.pickdropid != null && (newVal.compareTo(this.pickdropid) == 0)) || 
            (newVal == null && this.pickdropid == null && pickdropid_is_initialized)) {
            return; 
        } 
        this.pickdropid = newVal; 
        pickdropid_is_modified = true; 
        pickdropid_is_initialized = true; 
    }

    /**
     * Setter method for pickdropid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to pickdropid
     */
    public void setPickdropid(long newVal) {
        setPickdropid(new Long(newVal));
    }

    /**
     * Determines if the pickdropid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPickdropidModified() {
        return pickdropid_is_modified; 
    }

    /**
     * Determines if the pickdropid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPickdropidInitialized() {
        return pickdropid_is_initialized; 
    }

    /**
     * Getter method for transportationmodeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: pickdrop.transportationmodeid
     * <li> foreign key: transportationmode.transportationmodeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of transportationmodeid
     */
    public Integer getTransportationmodeid()
    {
        return transportationmodeid; 
    }

    /**
     * Setter method for transportationmodeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to transportationmodeid
     */
    public void setTransportationmodeid(Integer newVal) {
        if ((newVal != null && this.transportationmodeid != null && (newVal.compareTo(this.transportationmodeid) == 0)) || 
            (newVal == null && this.transportationmodeid == null && transportationmodeid_is_initialized)) {
            return; 
        } 
        this.transportationmodeid = newVal; 
        transportationmodeid_is_modified = true; 
        transportationmodeid_is_initialized = true; 
    }

    /**
     * Setter method for transportationmodeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to transportationmodeid
     */
    public void setTransportationmodeid(int newVal) {
        setTransportationmodeid(new Integer(newVal));
    }

    /**
     * Determines if the transportationmodeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTransportationmodeidModified() {
        return transportationmodeid_is_modified; 
    }

    /**
     * Determines if the transportationmodeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTransportationmodeidInitialized() {
        return transportationmodeid_is_initialized; 
    }

    /**
     * Getter method for vehicle.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: pickdrop.vehicle
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of vehicle
     */
    public String getVehicle()
    {
        return vehicle; 
    }

    /**
     * Setter method for vehicle.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to vehicle
     */
    public void setVehicle(String newVal) {
        if ((newVal != null && this.vehicle != null && (newVal.compareTo(this.vehicle) == 0)) || 
            (newVal == null && this.vehicle == null && vehicle_is_initialized)) {
            return; 
        } 
        this.vehicle = newVal; 
        vehicle_is_modified = true; 
        vehicle_is_initialized = true; 
    }

    /**
     * Determines if the vehicle has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVehicleModified() {
        return vehicle_is_modified; 
    }

    /**
     * Determines if the vehicle has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVehicleInitialized() {
        return vehicle_is_initialized; 
    }

    /**
     * Getter method for pick.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: pickdrop.pick
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of pick
     */
    public Boolean getPick()
    {
        return pick; 
    }

    /**
     * Setter method for pick.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to pick
     */
    public void setPick(Boolean newVal) {
        if ((newVal != null && this.pick != null && newVal.equals(this.pick)) || 
            (newVal == null && this.pick == null && pick_is_initialized)) {
            return; 
        } 
        this.pick = newVal; 
        pick_is_modified = true; 
        pick_is_initialized = true; 
    }

    /**
     * Setter method for pick.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to pick
     */
    public void setPick(boolean newVal) {
        setPick(new Boolean(newVal));
    }

    /**
     * Determines if the pick has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPickModified() {
        return pick_is_modified; 
    }

    /**
     * Determines if the pick has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPickInitialized() {
        return pick_is_initialized; 
    }

    /**
     * Getter method for actiondate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: pickdrop.actiondate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of actiondate
     */
    public java.sql.Timestamp getActiondate()
    {
        return actiondate; 
    }

    /**
     * Setter method for actiondate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to actiondate
     */
    public void setActiondate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.actiondate != null && (newVal.compareTo(this.actiondate) == 0)) || 
            (newVal == null && this.actiondate == null && actiondate_is_initialized)) {
            return; 
        } 
        this.actiondate = newVal; 
        actiondate_is_modified = true; 
        actiondate_is_initialized = true; 
    }

    /**
     * Setter method for actiondate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to actiondate
     */
    public void setActiondate(long newVal) {
        setActiondate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the actiondate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isActiondateModified() {
        return actiondate_is_modified; 
    }

    /**
     * Determines if the actiondate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isActiondateInitialized() {
        return actiondate_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: pickdrop.regdate
     * <li>default value: now()
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: pickdrop.regbyid
     * <li> foreign key: personnel.personnelid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return pickdropid_is_modified || 
		transportationmodeid_is_modified || 
		vehicle_is_modified || 
		pick_is_modified || 
		actiondate_is_modified || 
		regdate_is_modified || 
		regbyid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        pickdropid_is_modified = false;
        transportationmodeid_is_modified = false;
        vehicle_is_modified = false;
        pick_is_modified = false;
        actiondate_is_modified = false;
        regdate_is_modified = false;
        regbyid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(PickdropBean bean) {
        setPickdropid(bean.getPickdropid());
        setTransportationmodeid(bean.getTransportationmodeid());
        setVehicle(bean.getVehicle());
        setPick(bean.getPick());
        setActiondate(bean.getActiondate());
        setRegdate(bean.getRegdate());
        setRegbyid(bean.getRegbyid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[pickdrop] "
                 + "\n - pickdrop.pickdropid = " + (pickdropid_is_initialized ? ("[" + (pickdropid == null ? null : pickdropid.toString()) + "]") : "not initialized") + ""
                 + "\n - pickdrop.transportationmodeid = " + (transportationmodeid_is_initialized ? ("[" + (transportationmodeid == null ? null : transportationmodeid.toString()) + "]") : "not initialized") + ""
                 + "\n - pickdrop.vehicle = " + (vehicle_is_initialized ? ("[" + (vehicle == null ? null : vehicle.toString()) + "]") : "not initialized") + ""
                 + "\n - pickdrop.pick = " + (pick_is_initialized ? ("[" + (pick == null ? null : pick.toString()) + "]") : "not initialized") + ""
                 + "\n - pickdrop.actiondate = " + (actiondate_is_initialized ? ("[" + (actiondate == null ? null : actiondate.toString()) + "]") : "not initialized") + ""
                 + "\n - pickdrop.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - pickdrop.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
