// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class ExtrachargeBean
// extends+ 

// extends- 

{
    private Integer extrachargeid;
    private boolean extrachargeid_is_modified = false;
    private boolean extrachargeid_is_initialized = false;
    
    private String code;
    private boolean code_is_modified = false;
    private boolean code_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private Double rate;
    private boolean rate_is_modified = false;
    private boolean rate_is_initialized = false;
    
    private Boolean fixedprice;
    private boolean fixedprice_is_modified = false;
    private boolean fixedprice_is_initialized = false;
    
    private Integer ord;
    private boolean ord_is_modified = false;
    private boolean ord_is_initialized = false;
    
    private Integer voucherno;
    private boolean voucherno_is_modified = false;
    private boolean voucherno_is_initialized = false;
    
    private Boolean web;
    private boolean web_is_modified = false;
    private boolean web_is_initialized = false;
    
    private String webdescription;
    private boolean webdescription_is_modified = false;
    private boolean webdescription_is_initialized = false;
    
    private Integer chargeapplieson;
    private boolean chargeapplieson_is_modified = false;
    private boolean chargeapplieson_is_initialized = false;
    
    private Integer postingtype;
    private boolean postingtype_is_modified = false;
    private boolean postingtype_is_initialized = false;
    
    private Boolean applychargealways;
    private boolean applychargealways_is_modified = false;
    private boolean applychargealways_is_initialized = false;
    
    private Integer webord;
    private boolean webord_is_modified = false;
    private boolean webord_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Boolean active;
    private boolean active_is_modified = false;
    private boolean active_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ExtrachargeBean()
    {
    }
    
    /**
     * Getter method for extrachargeid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.extrachargeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of extrachargeid
     */
    public Integer getExtrachargeid()
    {
        return extrachargeid; 
    }

    /**
     * Setter method for extrachargeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to extrachargeid
     */
    public void setExtrachargeid(Integer newVal) {
        if ((newVal != null && this.extrachargeid != null && (newVal.compareTo(this.extrachargeid) == 0)) || 
            (newVal == null && this.extrachargeid == null && extrachargeid_is_initialized)) {
            return; 
        } 
        this.extrachargeid = newVal; 
        extrachargeid_is_modified = true; 
        extrachargeid_is_initialized = true; 
    }

    /**
     * Setter method for extrachargeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to extrachargeid
     */
    public void setExtrachargeid(int newVal) {
        setExtrachargeid(new Integer(newVal));
    }

    /**
     * Determines if the extrachargeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExtrachargeidModified() {
        return extrachargeid_is_modified; 
    }

    /**
     * Determines if the extrachargeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExtrachargeidInitialized() {
        return extrachargeid_is_initialized; 
    }

    /**
     * Getter method for code.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.code
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of code
     */
    public String getCode()
    {
        return code; 
    }

    /**
     * Setter method for code.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to code
     */
    public void setCode(String newVal) {
        if ((newVal != null && this.code != null && (newVal.compareTo(this.code) == 0)) || 
            (newVal == null && this.code == null && code_is_initialized)) {
            return; 
        } 
        this.code = newVal; 
        code_is_modified = true; 
        code_is_initialized = true; 
    }

    /**
     * Determines if the code has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodeModified() {
        return code_is_modified; 
    }

    /**
     * Determines if the code has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodeInitialized() {
        return code_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.name
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for rate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.rate
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of rate
     */
    public Double getRate()
    {
        return rate; 
    }

    /**
     * Setter method for rate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rate
     */
    public void setRate(Double newVal) {
        if ((newVal != null && this.rate != null && (newVal.compareTo(this.rate) == 0)) || 
            (newVal == null && this.rate == null && rate_is_initialized)) {
            return; 
        } 
        this.rate = newVal; 
        rate_is_modified = true; 
        rate_is_initialized = true; 
    }

    /**
     * Setter method for rate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to rate
     */
    public void setRate(double newVal) {
        setRate(new Double(newVal));
    }

    /**
     * Determines if the rate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRateModified() {
        return rate_is_modified; 
    }

    /**
     * Determines if the rate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRateInitialized() {
        return rate_is_initialized; 
    }

    /**
     * Getter method for fixedprice.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.fixedprice
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of fixedprice
     */
    public Boolean getFixedprice()
    {
        return fixedprice; 
    }

    /**
     * Setter method for fixedprice.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to fixedprice
     */
    public void setFixedprice(Boolean newVal) {
        if ((newVal != null && this.fixedprice != null && newVal.equals(this.fixedprice)) || 
            (newVal == null && this.fixedprice == null && fixedprice_is_initialized)) {
            return; 
        } 
        this.fixedprice = newVal; 
        fixedprice_is_modified = true; 
        fixedprice_is_initialized = true; 
    }

    /**
     * Setter method for fixedprice.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to fixedprice
     */
    public void setFixedprice(boolean newVal) {
        setFixedprice(new Boolean(newVal));
    }

    /**
     * Determines if the fixedprice has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFixedpriceModified() {
        return fixedprice_is_modified; 
    }

    /**
     * Determines if the fixedprice has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFixedpriceInitialized() {
        return fixedprice_is_initialized; 
    }

    /**
     * Getter method for ord.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.ord
     * <li>default value: 0
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of ord
     */
    public Integer getOrd()
    {
        return ord; 
    }

    /**
     * Setter method for ord.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ord
     */
    public void setOrd(Integer newVal) {
        if ((newVal != null && this.ord != null && (newVal.compareTo(this.ord) == 0)) || 
            (newVal == null && this.ord == null && ord_is_initialized)) {
            return; 
        } 
        this.ord = newVal; 
        ord_is_modified = true; 
        ord_is_initialized = true; 
    }

    /**
     * Setter method for ord.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ord
     */
    public void setOrd(int newVal) {
        setOrd(new Integer(newVal));
    }

    /**
     * Determines if the ord has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOrdModified() {
        return ord_is_modified; 
    }

    /**
     * Determines if the ord has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOrdInitialized() {
        return ord_is_initialized; 
    }

    /**
     * Getter method for voucherno.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.voucherno
     * <li>comments: 0 - Auto General, 1 - Auto Private, 2 - Manual
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of voucherno
     */
    public Integer getVoucherno()
    {
        return voucherno; 
    }

    /**
     * Setter method for voucherno.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to voucherno
     */
    public void setVoucherno(Integer newVal) {
        if ((newVal != null && this.voucherno != null && (newVal.compareTo(this.voucherno) == 0)) || 
            (newVal == null && this.voucherno == null && voucherno_is_initialized)) {
            return; 
        } 
        this.voucherno = newVal; 
        voucherno_is_modified = true; 
        voucherno_is_initialized = true; 
    }

    /**
     * Setter method for voucherno.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to voucherno
     */
    public void setVoucherno(int newVal) {
        setVoucherno(new Integer(newVal));
    }

    /**
     * Determines if the voucherno has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVouchernoModified() {
        return voucherno_is_modified; 
    }

    /**
     * Determines if the voucherno has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVouchernoInitialized() {
        return voucherno_is_initialized; 
    }

    /**
     * Getter method for web.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.web
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of web
     */
    public Boolean getWeb()
    {
        return web; 
    }

    /**
     * Setter method for web.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to web
     */
    public void setWeb(Boolean newVal) {
        if ((newVal != null && this.web != null && newVal.equals(this.web)) || 
            (newVal == null && this.web == null && web_is_initialized)) {
            return; 
        } 
        this.web = newVal; 
        web_is_modified = true; 
        web_is_initialized = true; 
    }

    /**
     * Setter method for web.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to web
     */
    public void setWeb(boolean newVal) {
        setWeb(new Boolean(newVal));
    }

    /**
     * Determines if the web has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWebModified() {
        return web_is_modified; 
    }

    /**
     * Determines if the web has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWebInitialized() {
        return web_is_initialized; 
    }

    /**
     * Getter method for webdescription.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.webdescription
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of webdescription
     */
    public String getWebdescription()
    {
        return webdescription; 
    }

    /**
     * Setter method for webdescription.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to webdescription
     */
    public void setWebdescription(String newVal) {
        if ((newVal != null && this.webdescription != null && (newVal.compareTo(this.webdescription) == 0)) || 
            (newVal == null && this.webdescription == null && webdescription_is_initialized)) {
            return; 
        } 
        this.webdescription = newVal; 
        webdescription_is_modified = true; 
        webdescription_is_initialized = true; 
    }

    /**
     * Determines if the webdescription has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWebdescriptionModified() {
        return webdescription_is_modified; 
    }

    /**
     * Determines if the webdescription has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWebdescriptionInitialized() {
        return webdescription_is_initialized; 
    }

    /**
     * Getter method for chargeapplieson.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.chargeapplieson
     * <li>comments: 0 - Per Adult, 1 - Per Booking, 2 - Per Child, 3 - Per Instance, 4 - Per Person, 5 - Per Quantity
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of chargeapplieson
     */
    public Integer getChargeapplieson()
    {
        return chargeapplieson; 
    }

    /**
     * Setter method for chargeapplieson.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to chargeapplieson
     */
    public void setChargeapplieson(Integer newVal) {
        if ((newVal != null && this.chargeapplieson != null && (newVal.compareTo(this.chargeapplieson) == 0)) || 
            (newVal == null && this.chargeapplieson == null && chargeapplieson_is_initialized)) {
            return; 
        } 
        this.chargeapplieson = newVal; 
        chargeapplieson_is_modified = true; 
        chargeapplieson_is_initialized = true; 
    }

    /**
     * Setter method for chargeapplieson.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to chargeapplieson
     */
    public void setChargeapplieson(int newVal) {
        setChargeapplieson(new Integer(newVal));
    }

    /**
     * Determines if the chargeapplieson has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isChargeappliesonModified() {
        return chargeapplieson_is_modified; 
    }

    /**
     * Determines if the chargeapplieson has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isChargeappliesonInitialized() {
        return chargeapplieson_is_initialized; 
    }

    /**
     * Getter method for postingtype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.postingtype
     * <li>comments: 0 - Check in and check out, 1 - Everyday, 2 - Everyday except checkin, 3 - Everyday except checkin and checkout, 4 - Everyday except checkout, 5 - Only checkin, 6 - Only checkout
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of postingtype
     */
    public Integer getPostingtype()
    {
        return postingtype; 
    }

    /**
     * Setter method for postingtype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to postingtype
     */
    public void setPostingtype(Integer newVal) {
        if ((newVal != null && this.postingtype != null && (newVal.compareTo(this.postingtype) == 0)) || 
            (newVal == null && this.postingtype == null && postingtype_is_initialized)) {
            return; 
        } 
        this.postingtype = newVal; 
        postingtype_is_modified = true; 
        postingtype_is_initialized = true; 
    }

    /**
     * Setter method for postingtype.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to postingtype
     */
    public void setPostingtype(int newVal) {
        setPostingtype(new Integer(newVal));
    }

    /**
     * Determines if the postingtype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPostingtypeModified() {
        return postingtype_is_modified; 
    }

    /**
     * Determines if the postingtype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPostingtypeInitialized() {
        return postingtype_is_initialized; 
    }

    /**
     * Getter method for applychargealways.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.applychargealways
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of applychargealways
     */
    public Boolean getApplychargealways()
    {
        return applychargealways; 
    }

    /**
     * Setter method for applychargealways.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to applychargealways
     */
    public void setApplychargealways(Boolean newVal) {
        if ((newVal != null && this.applychargealways != null && newVal.equals(this.applychargealways)) || 
            (newVal == null && this.applychargealways == null && applychargealways_is_initialized)) {
            return; 
        } 
        this.applychargealways = newVal; 
        applychargealways_is_modified = true; 
        applychargealways_is_initialized = true; 
    }

    /**
     * Setter method for applychargealways.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to applychargealways
     */
    public void setApplychargealways(boolean newVal) {
        setApplychargealways(new Boolean(newVal));
    }

    /**
     * Determines if the applychargealways has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isApplychargealwaysModified() {
        return applychargealways_is_modified; 
    }

    /**
     * Determines if the applychargealways has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isApplychargealwaysInitialized() {
        return applychargealways_is_initialized; 
    }

    /**
     * Getter method for webord.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.webord
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of webord
     */
    public Integer getWebord()
    {
        return webord; 
    }

    /**
     * Setter method for webord.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to webord
     */
    public void setWebord(Integer newVal) {
        if ((newVal != null && this.webord != null && (newVal.compareTo(this.webord) == 0)) || 
            (newVal == null && this.webord == null && webord_is_initialized)) {
            return; 
        } 
        this.webord = newVal; 
        webord_is_modified = true; 
        webord_is_initialized = true; 
    }

    /**
     * Setter method for webord.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to webord
     */
    public void setWebord(int newVal) {
        setWebord(new Integer(newVal));
    }

    /**
     * Determines if the webord has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWebordModified() {
        return webord_is_modified; 
    }

    /**
     * Determines if the webord has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWebordInitialized() {
        return webord_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.regbyid
     * <li> foreign key: personnel.personnelid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.regdate
     * <li>default value: now()
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for active.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extracharge.active
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of active
     */
    public Boolean getActive()
    {
        return active; 
    }

    /**
     * Setter method for active.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to active
     */
    public void setActive(Boolean newVal) {
        if ((newVal != null && this.active != null && newVal.equals(this.active)) || 
            (newVal == null && this.active == null && active_is_initialized)) {
            return; 
        } 
        this.active = newVal; 
        active_is_modified = true; 
        active_is_initialized = true; 
    }

    /**
     * Setter method for active.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to active
     */
    public void setActive(boolean newVal) {
        setActive(new Boolean(newVal));
    }

    /**
     * Determines if the active has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isActiveModified() {
        return active_is_modified; 
    }

    /**
     * Determines if the active has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isActiveInitialized() {
        return active_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return extrachargeid_is_modified || 
		code_is_modified || 
		name_is_modified || 
		rate_is_modified || 
		fixedprice_is_modified || 
		ord_is_modified || 
		voucherno_is_modified || 
		web_is_modified || 
		webdescription_is_modified || 
		chargeapplieson_is_modified || 
		postingtype_is_modified || 
		applychargealways_is_modified || 
		webord_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		active_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        extrachargeid_is_modified = false;
        code_is_modified = false;
        name_is_modified = false;
        rate_is_modified = false;
        fixedprice_is_modified = false;
        ord_is_modified = false;
        voucherno_is_modified = false;
        web_is_modified = false;
        webdescription_is_modified = false;
        chargeapplieson_is_modified = false;
        postingtype_is_modified = false;
        applychargealways_is_modified = false;
        webord_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        active_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ExtrachargeBean bean) {
        setExtrachargeid(bean.getExtrachargeid());
        setCode(bean.getCode());
        setName(bean.getName());
        setRate(bean.getRate());
        setFixedprice(bean.getFixedprice());
        setOrd(bean.getOrd());
        setVoucherno(bean.getVoucherno());
        setWeb(bean.getWeb());
        setWebdescription(bean.getWebdescription());
        setChargeapplieson(bean.getChargeapplieson());
        setPostingtype(bean.getPostingtype());
        setApplychargealways(bean.getApplychargealways());
        setWebord(bean.getWebord());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setActive(bean.getActive());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[extracharge] "
                 + "\n - extracharge.extrachargeid = " + (extrachargeid_is_initialized ? ("[" + (extrachargeid == null ? null : extrachargeid.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.code = " + (code_is_initialized ? ("[" + (code == null ? null : code.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.rate = " + (rate_is_initialized ? ("[" + (rate == null ? null : rate.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.fixedprice = " + (fixedprice_is_initialized ? ("[" + (fixedprice == null ? null : fixedprice.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.ord = " + (ord_is_initialized ? ("[" + (ord == null ? null : ord.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.voucherno = " + (voucherno_is_initialized ? ("[" + (voucherno == null ? null : voucherno.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.web = " + (web_is_initialized ? ("[" + (web == null ? null : web.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.webdescription = " + (webdescription_is_initialized ? ("[" + (webdescription == null ? null : webdescription.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.chargeapplieson = " + (chargeapplieson_is_initialized ? ("[" + (chargeapplieson == null ? null : chargeapplieson.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.postingtype = " + (postingtype_is_initialized ? ("[" + (postingtype == null ? null : postingtype.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.applychargealways = " + (applychargealways_is_initialized ? ("[" + (applychargealways == null ? null : applychargealways.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.webord = " + (webord_is_initialized ? ("[" + (webord == null ? null : webord.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - extracharge.active = " + (active_is_initialized ? ("[" + (active == null ? null : active.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
