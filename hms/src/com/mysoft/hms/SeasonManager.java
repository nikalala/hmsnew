// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the season table.
 */
public class SeasonManager
// extends+ 

// extends- 

{

    /**
     * Column seasonid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SEASONID = 0;
    public static final int TYPE_SEASONID = Types.INTEGER;
    public static final String NAME_SEASONID = "seasonid";

    /**
     * Column code of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CODE = 1;
    public static final int TYPE_CODE = Types.VARCHAR;
    public static final String NAME_CODE = "code";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 2;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column fday of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_FDAY = 3;
    public static final int TYPE_FDAY = Types.INTEGER;
    public static final String NAME_FDAY = "fday";

    /**
     * Column tday of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TDAY = 4;
    public static final int TYPE_TDAY = Types.INTEGER;
    public static final String NAME_TDAY = "tday";

    /**
     * Column fmonth of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_FMONTH = 5;
    public static final int TYPE_FMONTH = Types.INTEGER;
    public static final String NAME_FMONTH = "fmonth";

    /**
     * Column tmonth of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TMONTH = 6;
    public static final int TYPE_TMONTH = Types.INTEGER;
    public static final String NAME_TMONTH = "tmonth";

    /**
     * Column startdate of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_STARTDATE = 7;
    public static final int TYPE_STARTDATE = Types.DATE;
    public static final String NAME_STARTDATE = "startdate";

    /**
     * Column enddate of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_ENDDATE = 8;
    public static final int TYPE_ENDDATE = Types.DATE;
    public static final String NAME_ENDDATE = "enddate";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 9;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 10;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column active of type Types.BIT mapped to Boolean.
     */
    public static final int ID_ACTIVE = 11;
    public static final int TYPE_ACTIVE = Types.BIT;
    public static final String NAME_ACTIVE = "active";


    private static final String TABLE_NAME = "season";

    /**
     * Create an array of type string containing all the fields of the season table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "season.seasonid"
        ,"season.code"
        ,"season.name"
        ,"season.fday"
        ,"season.tday"
        ,"season.fmonth"
        ,"season.tmonth"
        ,"season.startdate"
        ,"season.enddate"
        ,"season.regbyid"
        ,"season.regdate"
        ,"season.active"
    };

    /**
     * Field that contains the comma separated fields of the season table.
     */
    private static final String ALL_FIELDS = "season.seasonid"
                            + ",season.code"
                            + ",season.name"
                            + ",season.fday"
                            + ",season.tday"
                            + ",season.fmonth"
                            + ",season.tmonth"
                            + ",season.startdate"
                            + ",season.enddate"
                            + ",season.regbyid"
                            + ",season.regdate"
                            + ",season.active";

    private static SeasonManager singleton = new SeasonManager();

    /**
     * Get the SeasonManager singleton.
     *
     * @return SeasonManager 
     */
    synchronized public static SeasonManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own SeasonManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(SeasonManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new SeasonBean instance.
     *
     * @return the new SeasonBean 
     */
    public SeasonBean createSeasonBean()
    {
        return new SeasonBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a SeasonBean from the season using its key fields.
     *
     * @return a unique SeasonBean 
     */
    //12
    public SeasonBean loadByPrimaryKey(Integer seasonid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM season WHERE season.seasonid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, seasonid);
            SeasonBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer seasonid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from season WHERE season.seasonid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, seasonid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads SeasonBean array from the season table using its regbyid field.
     *
     * @return an array of SeasonBean 
     */
    // LOAD BY IMPORTED KEY
    public SeasonBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM season WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the season table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM season WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the PersonnelBean object from the season.personnelid field.
     *
     * @param pObject the SeasonBean 
     * @return the associated PersonnelBean pObject
     */
    // GET IMPORTED
    public PersonnelBean getPersonnelBean(SeasonBean pObject) throws SQLException
    {
        PersonnelBean other = PersonnelManager.getInstance().createPersonnelBean();
        other.setPersonnelid(pObject.getRegbyid());
        return PersonnelManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the SeasonBean object to the PersonnelBean object.
     *
     * @param pObject the SeasonBean object to use
     * @param pObjectToBeSet the PersonnelBean object to associate to the SeasonBean 
     * @return the associated PersonnelBean pObject
     */
    // SET IMPORTED
    public SeasonBean setPersonnelBean(SeasonBean pObject,PersonnelBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonnelid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from season.
     *
     * @return an array of SeasonManager pObject
     */
    //38
    public SeasonBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM season",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of SeasonBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting SeasonBean table 
     */
    //49
    public SeasonBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of SeasonBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting SeasonBean table 
     */
    //51
    public SeasonBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from season " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from season ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (SeasonBean[])v.toArray(new SeasonBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from season table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the season table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM season " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the SeasonBean pObject into the database.
     *
     * @param pObject the SeasonBean pObject to be saved
     */
    //100
    public SeasonBean save(SeasonBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isSeasonidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('seasonid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setSeasonid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into season (");
    
                if (pObject.isSeasonidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("seasonid");
                    _dirtyCount++;
                }

                if (pObject.isCodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("code");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isFdayModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fday");
                    _dirtyCount++;
                }

                if (pObject.isTdayModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("tday");
                    _dirtyCount++;
                }

                if (pObject.isFmonthModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fmonth");
                    _dirtyCount++;
                }

                if (pObject.isTmonthModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("tmonth");
                    _dirtyCount++;
                }

                if (pObject.isStartdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("startdate");
                    _dirtyCount++;
                }

                if (pObject.isEnddateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("enddate");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isActiveModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("active");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isSeasonidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isFdayModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFday());
                }
    
                if (pObject.isTdayModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTday());
                }
    
                if (pObject.isFmonthModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFmonth());
                }
    
                if (pObject.isTmonthModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTmonth());
                }
    
                if (pObject.isStartdateModified()) {
                    if (pObject.getStartdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartdate().getTime()));
                }
    
                if (pObject.isEnddateModified()) {
                    if (pObject.getEnddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getEnddate().getTime()));
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isActiveModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE season SET ");
                boolean useComma=false;

                if (pObject.isSeasonidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("seasonid").append("=?");
                }

                if (pObject.isCodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("code").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isFdayModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fday").append("=?");
                }

                if (pObject.isTdayModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("tday").append("=?");
                }

                if (pObject.isFmonthModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fmonth").append("=?");
                }

                if (pObject.isTmonthModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("tmonth").append("=?");
                }

                if (pObject.isStartdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("startdate").append("=?");
                }

                if (pObject.isEnddateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("enddate").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isActiveModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("active").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("season.seasonid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isSeasonidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
                }

                if (pObject.isCodeModified()) {
                      ps.setString(++_dirtyCount, pObject.getCode());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isFdayModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getFday());
                }

                if (pObject.isTdayModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getTday());
                }

                if (pObject.isFmonthModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getFmonth());
                }

                if (pObject.isTmonthModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getTmonth());
                }

                if (pObject.isStartdateModified()) {
                      if (pObject.getStartdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartdate().getTime()));
                }

                if (pObject.isEnddateModified()) {
                      if (pObject.getEnddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getEnddate().getTime()));
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isActiveModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of SeasonBean pObjects into the database.
     *
     * @param pObjects the SeasonBean pObject table to be saved
     * @return the saved SeasonBean array.
     */
    //65
    public SeasonBean[] save(SeasonBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique SeasonBean pObject from a template one giving a c
     *
     * @param pObject the SeasonBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public SeasonBean loadUniqueUsingTemplate(SeasonBean pObject) throws SQLException
    {
         SeasonBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of SeasonBean from a template one.
     *
     * @param pObject the SeasonBean template to look for
     * @return all the SeasonBean matching the template
     */
    //88
    public SeasonBean[] loadUsingTemplate(SeasonBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from season WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isSeasonidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("seasonid= ?");
             }
    
             if (pObject.isCodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isFdayModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fday= ?");
             }
    
             if (pObject.isTdayModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tday= ?");
             }
    
             if (pObject.isFmonthModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fmonth= ?");
             }
    
             if (pObject.isTmonthModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tmonth= ?");
             }
    
             if (pObject.isStartdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("startdate= ?");
             }
    
             if (pObject.isEnddateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("enddate= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isActiveModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("active= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isSeasonidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
             }
    
             if (pObject.isCodeModified()) {
                 ps.setString(++_dirtyCount, pObject.getCode());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isFdayModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getFday());
             }
    
             if (pObject.isTdayModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getTday());
             }
    
             if (pObject.isFmonthModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getFmonth());
             }
    
             if (pObject.isTmonthModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getTmonth());
             }
    
             if (pObject.isStartdateModified()) {
                 if (pObject.getStartdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartdate().getTime()));
             }
    
             if (pObject.isEnddateModified()) {
                 if (pObject.getEnddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getEnddate().getTime()));
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isActiveModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a SeasonBean template.
     *
     * @param pObject the SeasonBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(SeasonBean pObject) throws SQLException
    {
        if (pObject.isSeasonidInitialized())
            return deleteByPrimaryKey(pObject.getSeasonid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM season WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isSeasonidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("seasonid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("code").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFdayInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fday").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTdayInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("tday").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFmonthInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fmonth").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTmonthInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("tmonth").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStartdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("startdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isEnddateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("enddate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isActiveInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("active").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isSeasonidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
            }
    
            if (pObject.isCodeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCode());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isFdayInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getFday());
            }
    
            if (pObject.isTdayInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTday());
            }
    
            if (pObject.isFmonthInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getFmonth());
            }
    
            if (pObject.isTmonthInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTmonth());
            }
    
            if (pObject.isStartdateInitialized()) {
                if (pObject.getStartdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartdate().getTime()));
            }
    
            if (pObject.isEnddateInitialized()) {
                if (pObject.getEnddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getEnddate().getTime()));
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isActiveInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of ContragentBean using the relation table Roomrate given a SeasonBean object.
     *
     * @param pObject the SeasonBean pObject to be used
     * @return an array of ContragentBean 
     */
    // MANY TO MANY
    public ContragentBean[] loadContragentViaRoomrate(SeasonBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contragent,roomrate"
                         + " WHERE "    
                         + "     roomrate.seasonid = ?"
                         + " AND roomrate.contragentid = contragent.contragentid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSeasonid());
             return ContragentManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RatetypeBean using the relation table Roomrate given a SeasonBean object.
     *
     * @param pObject the SeasonBean pObject to be used
     * @return an array of RatetypeBean 
     */
    // MANY TO MANY
    public RatetypeBean[] loadRatetypeViaRoomrate(SeasonBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        ratetype,roomrate"
                         + " WHERE "    
                         + "     roomrate.seasonid = ?"
                         + " AND roomrate.ratetypeid = ratetype.ratetypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSeasonid());
             return RatetypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RoomtypeBean using the relation table Roomrate given a SeasonBean object.
     *
     * @param pObject the SeasonBean pObject to be used
     * @return an array of RoomtypeBean 
     */
    // MANY TO MANY
    public RoomtypeBean[] loadRoomtypeViaRoomrate(SeasonBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        roomtype,roomrate"
                         + " WHERE "    
                         + "     roomrate.seasonid = ?"
                         + " AND roomrate.roomtypeid = roomtype.roomtypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSeasonid());
             return RoomtypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table season.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table season with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from season " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table season with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific SeasonBean pObject given a c
     *
     * @param pObject the SeasonBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(SeasonBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from season WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isSeasonidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("seasonid= ?");
                }
    
                if (pObject.isCodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isFdayModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fday= ?");
                }
    
                if (pObject.isTdayModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tday= ?");
                }
    
                if (pObject.isFmonthModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fmonth= ?");
                }
    
                if (pObject.isTmonthModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tmonth= ?");
                }
    
                if (pObject.isStartdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("startdate= ?");
                }
    
                if (pObject.isEnddateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("enddate= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isActiveModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("active= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isSeasonidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isFdayModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFday());
                }
    
                if (pObject.isTdayModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTday());
                }
    
                if (pObject.isFmonthModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFmonth());
                }
    
                if (pObject.isTmonthModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTmonth());
                }
    
                if (pObject.isStartdateModified()) {
                    if (pObject.getStartdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartdate().getTime()));
                }
    
                if (pObject.isEnddateModified()) {
                    if (pObject.getEnddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getEnddate().getTime()));
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isActiveModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the season on a SeasonBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting SeasonBean pObject
     */
    //72
    public SeasonBean decodeRow(ResultSet rs) throws SQLException
    {
        SeasonBean pObject = createSeasonBean();
        pObject.setSeasonid(Manager.getInteger(rs, 1));
        pObject.setCode(rs.getString(2));
        pObject.setName(rs.getString(3));
        pObject.setFday(Manager.getInteger(rs, 4));
        pObject.setTday(Manager.getInteger(rs, 5));
        pObject.setFmonth(Manager.getInteger(rs, 6));
        pObject.setTmonth(Manager.getInteger(rs, 7));
        pObject.setStartdate(rs.getDate(8));
        pObject.setEnddate(rs.getDate(9));
        pObject.setRegbyid(Manager.getInteger(rs, 10));
        pObject.setRegdate(rs.getTimestamp(11));
        pObject.setActive(Manager.getBoolean(rs, 12));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the season table on a SeasonBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting SeasonBean pObject
     */
    //73
    public SeasonBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        SeasonBean pObject = createSeasonBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_SEASONID:
                    ++pos;
                    pObject.setSeasonid(Manager.getInteger(rs, pos));
                    break;
                case ID_CODE:
                    ++pos;
                    pObject.setCode(rs.getString(pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_FDAY:
                    ++pos;
                    pObject.setFday(Manager.getInteger(rs, pos));
                    break;
                case ID_TDAY:
                    ++pos;
                    pObject.setTday(Manager.getInteger(rs, pos));
                    break;
                case ID_FMONTH:
                    ++pos;
                    pObject.setFmonth(Manager.getInteger(rs, pos));
                    break;
                case ID_TMONTH:
                    ++pos;
                    pObject.setTmonth(Manager.getInteger(rs, pos));
                    break;
                case ID_STARTDATE:
                    ++pos;
                    pObject.setStartdate(rs.getDate(pos));
                    break;
                case ID_ENDDATE:
                    ++pos;
                    pObject.setEnddate(rs.getDate(pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_ACTIVE:
                    ++pos;
                    pObject.setActive(Manager.getBoolean(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of SeasonBean 
     */
    //41
    public SeasonBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of SeasonBean 
     */
    public SeasonBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (SeasonBean[])v.toArray(new SeasonBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private SeasonListener listener = null;

    /**
     * Registers a unique SeasonListener listener.
     */
    //66.5
    public void registerListener(SeasonListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the SeasonBean pObject.
     *
     * @param pObject the SeasonBean pObject to be saved
     */
    //67
    void beforeInsert(SeasonBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the SeasonBean pObject.
     *
     * @param pObject the SeasonBean pObject to be saved
     */
    //68
    void afterInsert(SeasonBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the SeasonBean pObject.
     *
     * @param pObject the SeasonBean pObject to be updated
     */
    //69
    void beforeUpdate(SeasonBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the SeasonBean pObject.
     *
     * @param pObject the SeasonBean pObject to be updated
     */
    //70
    void afterUpdate(SeasonBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
