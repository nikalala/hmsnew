// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class GuestBean
// extends+ 

// extends- 

{
    private Long guestid;
    private boolean guestid_is_modified = false;
    private boolean guestid_is_initialized = false;
    
    private Integer salutationid;
    private boolean salutationid_is_modified = false;
    private boolean salutationid_is_initialized = false;
    
    private String fname;
    private boolean fname_is_modified = false;
    private boolean fname_is_initialized = false;
    
    private String lname;
    private boolean lname_is_modified = false;
    private boolean lname_is_initialized = false;
    
    private Integer type;
    private boolean type_is_modified = false;
    private boolean type_is_initialized = false;
    
    private Integer gender;
    private boolean gender_is_modified = false;
    private boolean gender_is_initialized = false;
    
    private String address;
    private boolean address_is_modified = false;
    private boolean address_is_initialized = false;
    
    private Integer countryid;
    private boolean countryid_is_modified = false;
    private boolean countryid_is_initialized = false;
    
    private String city;
    private boolean city_is_modified = false;
    private boolean city_is_initialized = false;
    
    private String zip;
    private boolean zip_is_modified = false;
    private boolean zip_is_initialized = false;
    
    private Integer idtypeid;
    private boolean idtypeid_is_modified = false;
    private boolean idtypeid_is_initialized = false;
    
    private String idn;
    private boolean idn_is_modified = false;
    private boolean idn_is_initialized = false;
    
    private Integer vipstatusid;
    private boolean vipstatusid_is_modified = false;
    private boolean vipstatusid_is_initialized = false;
    
    private String phone;
    private boolean phone_is_modified = false;
    private boolean phone_is_initialized = false;
    
    private String mobile;
    private boolean mobile_is_modified = false;
    private boolean mobile_is_initialized = false;
    
    private String fax;
    private boolean fax_is_modified = false;
    private boolean fax_is_initialized = false;
    
    private String email;
    private boolean email_is_modified = false;
    private boolean email_is_initialized = false;
    
    private java.util.Date dob;
    private boolean dob_is_modified = false;
    private boolean dob_is_initialized = false;
    
    private java.util.Date sdob;
    private boolean sdob_is_modified = false;
    private boolean sdob_is_initialized = false;
    
    private java.util.Date weddingdate;
    private boolean weddingdate_is_modified = false;
    private boolean weddingdate_is_initialized = false;
    
    private Integer nationalityid;
    private boolean nationalityid_is_modified = false;
    private boolean nationalityid_is_initialized = false;
    
    private Long contragentid;
    private boolean contragentid_is_modified = false;
    private boolean contragentid_is_initialized = false;
    
    private Integer paymentmethodid;
    private boolean paymentmethodid_is_modified = false;
    private boolean paymentmethodid_is_initialized = false;
    
    private String cardnum;
    private boolean cardnum_is_modified = false;
    private boolean cardnum_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    GuestBean()
    {
    }
    
    /**
     * Getter method for guestid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.guestid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of guestid
     */
    public Long getGuestid()
    {
        return guestid; 
    }

    /**
     * Setter method for guestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to guestid
     */
    public void setGuestid(Long newVal) {
        if ((newVal != null && this.guestid != null && (newVal.compareTo(this.guestid) == 0)) || 
            (newVal == null && this.guestid == null && guestid_is_initialized)) {
            return; 
        } 
        this.guestid = newVal; 
        guestid_is_modified = true; 
        guestid_is_initialized = true; 
    }

    /**
     * Setter method for guestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to guestid
     */
    public void setGuestid(long newVal) {
        setGuestid(new Long(newVal));
    }

    /**
     * Determines if the guestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestidModified() {
        return guestid_is_modified; 
    }

    /**
     * Determines if the guestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestidInitialized() {
        return guestid_is_initialized; 
    }

    /**
     * Getter method for salutationid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.salutationid
     * <li> foreign key: salutation.salutationid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of salutationid
     */
    public Integer getSalutationid()
    {
        return salutationid; 
    }

    /**
     * Setter method for salutationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to salutationid
     */
    public void setSalutationid(Integer newVal) {
        if ((newVal != null && this.salutationid != null && (newVal.compareTo(this.salutationid) == 0)) || 
            (newVal == null && this.salutationid == null && salutationid_is_initialized)) {
            return; 
        } 
        this.salutationid = newVal; 
        salutationid_is_modified = true; 
        salutationid_is_initialized = true; 
    }

    /**
     * Setter method for salutationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to salutationid
     */
    public void setSalutationid(int newVal) {
        setSalutationid(new Integer(newVal));
    }

    /**
     * Determines if the salutationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSalutationidModified() {
        return salutationid_is_modified; 
    }

    /**
     * Determines if the salutationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSalutationidInitialized() {
        return salutationid_is_initialized; 
    }

    /**
     * Getter method for fname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.fname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of fname
     */
    public String getFname()
    {
        return fname; 
    }

    /**
     * Setter method for fname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fname
     */
    public void setFname(String newVal) {
        if ((newVal != null && this.fname != null && (newVal.compareTo(this.fname) == 0)) || 
            (newVal == null && this.fname == null && fname_is_initialized)) {
            return; 
        } 
        this.fname = newVal; 
        fname_is_modified = true; 
        fname_is_initialized = true; 
    }

    /**
     * Determines if the fname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFnameModified() {
        return fname_is_modified; 
    }

    /**
     * Determines if the fname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFnameInitialized() {
        return fname_is_initialized; 
    }

    /**
     * Getter method for lname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.lname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of lname
     */
    public String getLname()
    {
        return lname; 
    }

    /**
     * Setter method for lname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lname
     */
    public void setLname(String newVal) {
        if ((newVal != null && this.lname != null && (newVal.compareTo(this.lname) == 0)) || 
            (newVal == null && this.lname == null && lname_is_initialized)) {
            return; 
        } 
        this.lname = newVal; 
        lname_is_modified = true; 
        lname_is_initialized = true; 
    }

    /**
     * Determines if the lname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLnameModified() {
        return lname_is_modified; 
    }

    /**
     * Determines if the lname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLnameInitialized() {
        return lname_is_initialized; 
    }

    /**
     * Getter method for type.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.type
     * <li>comments: 0 - Adult, 1 - Child
     * <li>default value: 0
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of type
     */
    public Integer getType()
    {
        return type; 
    }

    /**
     * Setter method for type.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to type
     */
    public void setType(Integer newVal) {
        if ((newVal != null && this.type != null && (newVal.compareTo(this.type) == 0)) || 
            (newVal == null && this.type == null && type_is_initialized)) {
            return; 
        } 
        this.type = newVal; 
        type_is_modified = true; 
        type_is_initialized = true; 
    }

    /**
     * Setter method for type.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to type
     */
    public void setType(int newVal) {
        setType(new Integer(newVal));
    }

    /**
     * Determines if the type has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTypeModified() {
        return type_is_modified; 
    }

    /**
     * Determines if the type has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTypeInitialized() {
        return type_is_initialized; 
    }

    /**
     * Getter method for gender.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.gender
     * <li>comments: 0 - Male, 1 - Female
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of gender
     */
    public Integer getGender()
    {
        return gender; 
    }

    /**
     * Setter method for gender.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to gender
     */
    public void setGender(Integer newVal) {
        if ((newVal != null && this.gender != null && (newVal.compareTo(this.gender) == 0)) || 
            (newVal == null && this.gender == null && gender_is_initialized)) {
            return; 
        } 
        this.gender = newVal; 
        gender_is_modified = true; 
        gender_is_initialized = true; 
    }

    /**
     * Setter method for gender.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to gender
     */
    public void setGender(int newVal) {
        setGender(new Integer(newVal));
    }

    /**
     * Determines if the gender has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGenderModified() {
        return gender_is_modified; 
    }

    /**
     * Determines if the gender has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGenderInitialized() {
        return gender_is_initialized; 
    }

    /**
     * Getter method for address.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.address
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of address
     */
    public String getAddress()
    {
        return address; 
    }

    /**
     * Setter method for address.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to address
     */
    public void setAddress(String newVal) {
        if ((newVal != null && this.address != null && (newVal.compareTo(this.address) == 0)) || 
            (newVal == null && this.address == null && address_is_initialized)) {
            return; 
        } 
        this.address = newVal; 
        address_is_modified = true; 
        address_is_initialized = true; 
    }

    /**
     * Determines if the address has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAddressModified() {
        return address_is_modified; 
    }

    /**
     * Determines if the address has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAddressInitialized() {
        return address_is_initialized; 
    }

    /**
     * Getter method for countryid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.countryid
     * <li> foreign key: country.countryid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of countryid
     */
    public Integer getCountryid()
    {
        return countryid; 
    }

    /**
     * Setter method for countryid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to countryid
     */
    public void setCountryid(Integer newVal) {
        if ((newVal != null && this.countryid != null && (newVal.compareTo(this.countryid) == 0)) || 
            (newVal == null && this.countryid == null && countryid_is_initialized)) {
            return; 
        } 
        this.countryid = newVal; 
        countryid_is_modified = true; 
        countryid_is_initialized = true; 
    }

    /**
     * Setter method for countryid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to countryid
     */
    public void setCountryid(int newVal) {
        setCountryid(new Integer(newVal));
    }

    /**
     * Determines if the countryid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCountryidModified() {
        return countryid_is_modified; 
    }

    /**
     * Determines if the countryid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCountryidInitialized() {
        return countryid_is_initialized; 
    }

    /**
     * Getter method for city.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.city
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of city
     */
    public String getCity()
    {
        return city; 
    }

    /**
     * Setter method for city.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to city
     */
    public void setCity(String newVal) {
        if ((newVal != null && this.city != null && (newVal.compareTo(this.city) == 0)) || 
            (newVal == null && this.city == null && city_is_initialized)) {
            return; 
        } 
        this.city = newVal; 
        city_is_modified = true; 
        city_is_initialized = true; 
    }

    /**
     * Determines if the city has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCityModified() {
        return city_is_modified; 
    }

    /**
     * Determines if the city has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCityInitialized() {
        return city_is_initialized; 
    }

    /**
     * Getter method for zip.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.zip
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of zip
     */
    public String getZip()
    {
        return zip; 
    }

    /**
     * Setter method for zip.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to zip
     */
    public void setZip(String newVal) {
        if ((newVal != null && this.zip != null && (newVal.compareTo(this.zip) == 0)) || 
            (newVal == null && this.zip == null && zip_is_initialized)) {
            return; 
        } 
        this.zip = newVal; 
        zip_is_modified = true; 
        zip_is_initialized = true; 
    }

    /**
     * Determines if the zip has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isZipModified() {
        return zip_is_modified; 
    }

    /**
     * Determines if the zip has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isZipInitialized() {
        return zip_is_initialized; 
    }

    /**
     * Getter method for idtypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.idtypeid
     * <li> foreign key: idtype.idtypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of idtypeid
     */
    public Integer getIdtypeid()
    {
        return idtypeid; 
    }

    /**
     * Setter method for idtypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to idtypeid
     */
    public void setIdtypeid(Integer newVal) {
        if ((newVal != null && this.idtypeid != null && (newVal.compareTo(this.idtypeid) == 0)) || 
            (newVal == null && this.idtypeid == null && idtypeid_is_initialized)) {
            return; 
        } 
        this.idtypeid = newVal; 
        idtypeid_is_modified = true; 
        idtypeid_is_initialized = true; 
    }

    /**
     * Setter method for idtypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to idtypeid
     */
    public void setIdtypeid(int newVal) {
        setIdtypeid(new Integer(newVal));
    }

    /**
     * Determines if the idtypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIdtypeidModified() {
        return idtypeid_is_modified; 
    }

    /**
     * Determines if the idtypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIdtypeidInitialized() {
        return idtypeid_is_initialized; 
    }

    /**
     * Getter method for idn.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.idn
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of idn
     */
    public String getIdn()
    {
        return idn; 
    }

    /**
     * Setter method for idn.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to idn
     */
    public void setIdn(String newVal) {
        if ((newVal != null && this.idn != null && (newVal.compareTo(this.idn) == 0)) || 
            (newVal == null && this.idn == null && idn_is_initialized)) {
            return; 
        } 
        this.idn = newVal; 
        idn_is_modified = true; 
        idn_is_initialized = true; 
    }

    /**
     * Determines if the idn has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIdnModified() {
        return idn_is_modified; 
    }

    /**
     * Determines if the idn has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIdnInitialized() {
        return idn_is_initialized; 
    }

    /**
     * Getter method for vipstatusid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.vipstatusid
     * <li> foreign key: vipstatus.vipstatusid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of vipstatusid
     */
    public Integer getVipstatusid()
    {
        return vipstatusid; 
    }

    /**
     * Setter method for vipstatusid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to vipstatusid
     */
    public void setVipstatusid(Integer newVal) {
        if ((newVal != null && this.vipstatusid != null && (newVal.compareTo(this.vipstatusid) == 0)) || 
            (newVal == null && this.vipstatusid == null && vipstatusid_is_initialized)) {
            return; 
        } 
        this.vipstatusid = newVal; 
        vipstatusid_is_modified = true; 
        vipstatusid_is_initialized = true; 
    }

    /**
     * Setter method for vipstatusid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to vipstatusid
     */
    public void setVipstatusid(int newVal) {
        setVipstatusid(new Integer(newVal));
    }

    /**
     * Determines if the vipstatusid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVipstatusidModified() {
        return vipstatusid_is_modified; 
    }

    /**
     * Determines if the vipstatusid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVipstatusidInitialized() {
        return vipstatusid_is_initialized; 
    }

    /**
     * Getter method for phone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.phone
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of phone
     */
    public String getPhone()
    {
        return phone; 
    }

    /**
     * Setter method for phone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to phone
     */
    public void setPhone(String newVal) {
        if ((newVal != null && this.phone != null && (newVal.compareTo(this.phone) == 0)) || 
            (newVal == null && this.phone == null && phone_is_initialized)) {
            return; 
        } 
        this.phone = newVal; 
        phone_is_modified = true; 
        phone_is_initialized = true; 
    }

    /**
     * Determines if the phone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPhoneModified() {
        return phone_is_modified; 
    }

    /**
     * Determines if the phone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPhoneInitialized() {
        return phone_is_initialized; 
    }

    /**
     * Getter method for mobile.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.mobile
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of mobile
     */
    public String getMobile()
    {
        return mobile; 
    }

    /**
     * Setter method for mobile.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mobile
     */
    public void setMobile(String newVal) {
        if ((newVal != null && this.mobile != null && (newVal.compareTo(this.mobile) == 0)) || 
            (newVal == null && this.mobile == null && mobile_is_initialized)) {
            return; 
        } 
        this.mobile = newVal; 
        mobile_is_modified = true; 
        mobile_is_initialized = true; 
    }

    /**
     * Determines if the mobile has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMobileModified() {
        return mobile_is_modified; 
    }

    /**
     * Determines if the mobile has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMobileInitialized() {
        return mobile_is_initialized; 
    }

    /**
     * Getter method for fax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.fax
     * <li>column size: 100
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of fax
     */
    public String getFax()
    {
        return fax; 
    }

    /**
     * Setter method for fax.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fax
     */
    public void setFax(String newVal) {
        if ((newVal != null && this.fax != null && (newVal.compareTo(this.fax) == 0)) || 
            (newVal == null && this.fax == null && fax_is_initialized)) {
            return; 
        } 
        this.fax = newVal; 
        fax_is_modified = true; 
        fax_is_initialized = true; 
    }

    /**
     * Determines if the fax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFaxModified() {
        return fax_is_modified; 
    }

    /**
     * Determines if the fax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFaxInitialized() {
        return fax_is_initialized; 
    }

    /**
     * Getter method for email.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.email
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of email
     */
    public String getEmail()
    {
        return email; 
    }

    /**
     * Setter method for email.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to email
     */
    public void setEmail(String newVal) {
        if ((newVal != null && this.email != null && (newVal.compareTo(this.email) == 0)) || 
            (newVal == null && this.email == null && email_is_initialized)) {
            return; 
        } 
        this.email = newVal; 
        email_is_modified = true; 
        email_is_initialized = true; 
    }

    /**
     * Determines if the email has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEmailModified() {
        return email_is_modified; 
    }

    /**
     * Determines if the email has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEmailInitialized() {
        return email_is_initialized; 
    }

    /**
     * Getter method for dob.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.dob
     * <li>column size: 13
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of dob
     */
    public java.util.Date getDob()
    {
        return dob; 
    }

    /**
     * Setter method for dob.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to dob
     */
    public void setDob(java.util.Date newVal) {
        if ((newVal != null && this.dob != null && (newVal.compareTo(this.dob) == 0)) || 
            (newVal == null && this.dob == null && dob_is_initialized)) {
            return; 
        } 
        this.dob = newVal; 
        dob_is_modified = true; 
        dob_is_initialized = true; 
    }

    /**
     * Setter method for dob.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to dob
     */
    public void setDob(long newVal) {
        setDob(new java.util.Date(newVal));
    }

    /**
     * Determines if the dob has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDobModified() {
        return dob_is_modified; 
    }

    /**
     * Determines if the dob has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDobInitialized() {
        return dob_is_initialized; 
    }

    /**
     * Getter method for sdob.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.sdob
     * <li>column size: 13
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of sdob
     */
    public java.util.Date getSdob()
    {
        return sdob; 
    }

    /**
     * Setter method for sdob.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sdob
     */
    public void setSdob(java.util.Date newVal) {
        if ((newVal != null && this.sdob != null && (newVal.compareTo(this.sdob) == 0)) || 
            (newVal == null && this.sdob == null && sdob_is_initialized)) {
            return; 
        } 
        this.sdob = newVal; 
        sdob_is_modified = true; 
        sdob_is_initialized = true; 
    }

    /**
     * Setter method for sdob.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sdob
     */
    public void setSdob(long newVal) {
        setSdob(new java.util.Date(newVal));
    }

    /**
     * Determines if the sdob has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSdobModified() {
        return sdob_is_modified; 
    }

    /**
     * Determines if the sdob has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSdobInitialized() {
        return sdob_is_initialized; 
    }

    /**
     * Getter method for weddingdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.weddingdate
     * <li>column size: 13
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of weddingdate
     */
    public java.util.Date getWeddingdate()
    {
        return weddingdate; 
    }

    /**
     * Setter method for weddingdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to weddingdate
     */
    public void setWeddingdate(java.util.Date newVal) {
        if ((newVal != null && this.weddingdate != null && (newVal.compareTo(this.weddingdate) == 0)) || 
            (newVal == null && this.weddingdate == null && weddingdate_is_initialized)) {
            return; 
        } 
        this.weddingdate = newVal; 
        weddingdate_is_modified = true; 
        weddingdate_is_initialized = true; 
    }

    /**
     * Setter method for weddingdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to weddingdate
     */
    public void setWeddingdate(long newVal) {
        setWeddingdate(new java.util.Date(newVal));
    }

    /**
     * Determines if the weddingdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWeddingdateModified() {
        return weddingdate_is_modified; 
    }

    /**
     * Determines if the weddingdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWeddingdateInitialized() {
        return weddingdate_is_initialized; 
    }

    /**
     * Getter method for nationalityid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.nationalityid
     * <li> foreign key: nationality.nationalityid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of nationalityid
     */
    public Integer getNationalityid()
    {
        return nationalityid; 
    }

    /**
     * Setter method for nationalityid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to nationalityid
     */
    public void setNationalityid(Integer newVal) {
        if ((newVal != null && this.nationalityid != null && (newVal.compareTo(this.nationalityid) == 0)) || 
            (newVal == null && this.nationalityid == null && nationalityid_is_initialized)) {
            return; 
        } 
        this.nationalityid = newVal; 
        nationalityid_is_modified = true; 
        nationalityid_is_initialized = true; 
    }

    /**
     * Setter method for nationalityid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to nationalityid
     */
    public void setNationalityid(int newVal) {
        setNationalityid(new Integer(newVal));
    }

    /**
     * Determines if the nationalityid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNationalityidModified() {
        return nationalityid_is_modified; 
    }

    /**
     * Determines if the nationalityid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNationalityidInitialized() {
        return nationalityid_is_initialized; 
    }

    /**
     * Getter method for contragentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.contragentid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contragentid
     */
    public Long getContragentid()
    {
        return contragentid; 
    }

    /**
     * Setter method for contragentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contragentid
     */
    public void setContragentid(Long newVal) {
        if ((newVal != null && this.contragentid != null && (newVal.compareTo(this.contragentid) == 0)) || 
            (newVal == null && this.contragentid == null && contragentid_is_initialized)) {
            return; 
        } 
        this.contragentid = newVal; 
        contragentid_is_modified = true; 
        contragentid_is_initialized = true; 
    }

    /**
     * Setter method for contragentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contragentid
     */
    public void setContragentid(long newVal) {
        setContragentid(new Long(newVal));
    }

    /**
     * Determines if the contragentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContragentidModified() {
        return contragentid_is_modified; 
    }

    /**
     * Determines if the contragentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContragentidInitialized() {
        return contragentid_is_initialized; 
    }

    /**
     * Getter method for paymentmethodid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.paymentmethodid
     * <li> foreign key: paymentmethod.paymentmethodid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of paymentmethodid
     */
    public Integer getPaymentmethodid()
    {
        return paymentmethodid; 
    }

    /**
     * Setter method for paymentmethodid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to paymentmethodid
     */
    public void setPaymentmethodid(Integer newVal) {
        if ((newVal != null && this.paymentmethodid != null && (newVal.compareTo(this.paymentmethodid) == 0)) || 
            (newVal == null && this.paymentmethodid == null && paymentmethodid_is_initialized)) {
            return; 
        } 
        this.paymentmethodid = newVal; 
        paymentmethodid_is_modified = true; 
        paymentmethodid_is_initialized = true; 
    }

    /**
     * Setter method for paymentmethodid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to paymentmethodid
     */
    public void setPaymentmethodid(int newVal) {
        setPaymentmethodid(new Integer(newVal));
    }

    /**
     * Determines if the paymentmethodid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaymentmethodidModified() {
        return paymentmethodid_is_modified; 
    }

    /**
     * Determines if the paymentmethodid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaymentmethodidInitialized() {
        return paymentmethodid_is_initialized; 
    }

    /**
     * Getter method for cardnum.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.cardnum
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of cardnum
     */
    public String getCardnum()
    {
        return cardnum; 
    }

    /**
     * Setter method for cardnum.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to cardnum
     */
    public void setCardnum(String newVal) {
        if ((newVal != null && this.cardnum != null && (newVal.compareTo(this.cardnum) == 0)) || 
            (newVal == null && this.cardnum == null && cardnum_is_initialized)) {
            return; 
        } 
        this.cardnum = newVal; 
        cardnum_is_modified = true; 
        cardnum_is_initialized = true; 
    }

    /**
     * Determines if the cardnum has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCardnumModified() {
        return cardnum_is_modified; 
    }

    /**
     * Determines if the cardnum has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCardnumInitialized() {
        return cardnum_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.regbyid
     * <li> foreign key: personnel.personnelid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.regdate
     * <li>default value: now()
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: guest.deleted
     * <li>comments: ???????
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return guestid_is_modified || 
		salutationid_is_modified || 
		fname_is_modified || 
		lname_is_modified || 
		type_is_modified || 
		gender_is_modified || 
		address_is_modified || 
		countryid_is_modified || 
		city_is_modified || 
		zip_is_modified || 
		idtypeid_is_modified || 
		idn_is_modified || 
		vipstatusid_is_modified || 
		phone_is_modified || 
		mobile_is_modified || 
		fax_is_modified || 
		email_is_modified || 
		dob_is_modified || 
		sdob_is_modified || 
		weddingdate_is_modified || 
		nationalityid_is_modified || 
		contragentid_is_modified || 
		paymentmethodid_is_modified || 
		cardnum_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		deleted_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        guestid_is_modified = false;
        salutationid_is_modified = false;
        fname_is_modified = false;
        lname_is_modified = false;
        type_is_modified = false;
        gender_is_modified = false;
        address_is_modified = false;
        countryid_is_modified = false;
        city_is_modified = false;
        zip_is_modified = false;
        idtypeid_is_modified = false;
        idn_is_modified = false;
        vipstatusid_is_modified = false;
        phone_is_modified = false;
        mobile_is_modified = false;
        fax_is_modified = false;
        email_is_modified = false;
        dob_is_modified = false;
        sdob_is_modified = false;
        weddingdate_is_modified = false;
        nationalityid_is_modified = false;
        contragentid_is_modified = false;
        paymentmethodid_is_modified = false;
        cardnum_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        deleted_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(GuestBean bean) {
        setGuestid(bean.getGuestid());
        setSalutationid(bean.getSalutationid());
        setFname(bean.getFname());
        setLname(bean.getLname());
        setType(bean.getType());
        setGender(bean.getGender());
        setAddress(bean.getAddress());
        setCountryid(bean.getCountryid());
        setCity(bean.getCity());
        setZip(bean.getZip());
        setIdtypeid(bean.getIdtypeid());
        setIdn(bean.getIdn());
        setVipstatusid(bean.getVipstatusid());
        setPhone(bean.getPhone());
        setMobile(bean.getMobile());
        setFax(bean.getFax());
        setEmail(bean.getEmail());
        setDob(bean.getDob());
        setSdob(bean.getSdob());
        setWeddingdate(bean.getWeddingdate());
        setNationalityid(bean.getNationalityid());
        setContragentid(bean.getContragentid());
        setPaymentmethodid(bean.getPaymentmethodid());
        setCardnum(bean.getCardnum());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setDeleted(bean.getDeleted());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[guest] "
                 + "\n - guest.guestid = " + (guestid_is_initialized ? ("[" + (guestid == null ? null : guestid.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.salutationid = " + (salutationid_is_initialized ? ("[" + (salutationid == null ? null : salutationid.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.fname = " + (fname_is_initialized ? ("[" + (fname == null ? null : fname.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.lname = " + (lname_is_initialized ? ("[" + (lname == null ? null : lname.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.type = " + (type_is_initialized ? ("[" + (type == null ? null : type.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.gender = " + (gender_is_initialized ? ("[" + (gender == null ? null : gender.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.address = " + (address_is_initialized ? ("[" + (address == null ? null : address.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.countryid = " + (countryid_is_initialized ? ("[" + (countryid == null ? null : countryid.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.city = " + (city_is_initialized ? ("[" + (city == null ? null : city.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.zip = " + (zip_is_initialized ? ("[" + (zip == null ? null : zip.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.idtypeid = " + (idtypeid_is_initialized ? ("[" + (idtypeid == null ? null : idtypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.idn = " + (idn_is_initialized ? ("[" + (idn == null ? null : idn.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.vipstatusid = " + (vipstatusid_is_initialized ? ("[" + (vipstatusid == null ? null : vipstatusid.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.phone = " + (phone_is_initialized ? ("[" + (phone == null ? null : phone.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.mobile = " + (mobile_is_initialized ? ("[" + (mobile == null ? null : mobile.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.fax = " + (fax_is_initialized ? ("[" + (fax == null ? null : fax.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.email = " + (email_is_initialized ? ("[" + (email == null ? null : email.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.dob = " + (dob_is_initialized ? ("[" + (dob == null ? null : dob.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.sdob = " + (sdob_is_initialized ? ("[" + (sdob == null ? null : sdob.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.weddingdate = " + (weddingdate_is_initialized ? ("[" + (weddingdate == null ? null : weddingdate.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.nationalityid = " + (nationalityid_is_initialized ? ("[" + (nationalityid == null ? null : nationalityid.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.contragentid = " + (contragentid_is_initialized ? ("[" + (contragentid == null ? null : contragentid.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.paymentmethodid = " + (paymentmethodid_is_initialized ? ("[" + (paymentmethodid == null ? null : paymentmethodid.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.cardnum = " + (cardnum_is_initialized ? ("[" + (cardnum == null ? null : cardnum.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - guest.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
