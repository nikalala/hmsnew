// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the hotel table.
 */
public class HotelManager
// extends+ 

// extends- 

{

    /**
     * Column hotelid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_HOTELID = 0;
    public static final int TYPE_HOTELID = Types.INTEGER;
    public static final String NAME_HOTELID = "hotelid";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 1;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column address1 of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ADDRESS1 = 2;
    public static final int TYPE_ADDRESS1 = Types.VARCHAR;
    public static final String NAME_ADDRESS1 = "address1";

    /**
     * Column address2 of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ADDRESS2 = 3;
    public static final int TYPE_ADDRESS2 = Types.VARCHAR;
    public static final String NAME_ADDRESS2 = "address2";

    /**
     * Column countryid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_COUNTRYID = 4;
    public static final int TYPE_COUNTRYID = Types.INTEGER;
    public static final String NAME_COUNTRYID = "countryid";

    /**
     * Column city of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CITY = 5;
    public static final int TYPE_CITY = Types.VARCHAR;
    public static final String NAME_CITY = "city";

    /**
     * Column zip of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ZIP = 6;
    public static final int TYPE_ZIP = Types.VARCHAR;
    public static final String NAME_ZIP = "zip";

    /**
     * Column phone of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PHONE = 7;
    public static final int TYPE_PHONE = Types.VARCHAR;
    public static final String NAME_PHONE = "phone";

    /**
     * Column rphone of type Types.VARCHAR mapped to String.
     */
    public static final int ID_RPHONE = 8;
    public static final int TYPE_RPHONE = Types.VARCHAR;
    public static final String NAME_RPHONE = "rphone";

    /**
     * Column fax of type Types.VARCHAR mapped to String.
     */
    public static final int ID_FAX = 9;
    public static final int TYPE_FAX = Types.VARCHAR;
    public static final String NAME_FAX = "fax";

    /**
     * Column email of type Types.VARCHAR mapped to String.
     */
    public static final int ID_EMAIL = 10;
    public static final int TYPE_EMAIL = Types.VARCHAR;
    public static final String NAME_EMAIL = "email";

    /**
     * Column propertytype of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PROPERTYTYPE = 11;
    public static final int TYPE_PROPERTYTYPE = Types.VARCHAR;
    public static final String NAME_PROPERTYTYPE = "propertytype";

    /**
     * Column logo of type Types.VARCHAR mapped to String.
     */
    public static final int ID_LOGO = 12;
    public static final int TYPE_LOGO = Types.VARCHAR;
    public static final String NAME_LOGO = "logo";

    /**
     * Column url of type Types.VARCHAR mapped to String.
     */
    public static final int ID_URL = 13;
    public static final int TYPE_URL = Types.VARCHAR;
    public static final String NAME_URL = "url";

    /**
     * Column grade of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_GRADE = 14;
    public static final int TYPE_GRADE = Types.INTEGER;
    public static final String NAME_GRADE = "grade";

    /**
     * Column idn of type Types.VARCHAR mapped to String.
     */
    public static final int ID_IDN = 15;
    public static final int TYPE_IDN = Types.VARCHAR;
    public static final String NAME_IDN = "idn";

    /**
     * Column regno1 of type Types.VARCHAR mapped to String.
     */
    public static final int ID_REGNO1 = 16;
    public static final int TYPE_REGNO1 = Types.VARCHAR;
    public static final String NAME_REGNO1 = "regno1";

    /**
     * Column regno2 of type Types.VARCHAR mapped to String.
     */
    public static final int ID_REGNO2 = 17;
    public static final int TYPE_REGNO2 = Types.VARCHAR;
    public static final String NAME_REGNO2 = "regno2";

    /**
     * Column regno3 of type Types.VARCHAR mapped to String.
     */
    public static final int ID_REGNO3 = 18;
    public static final int TYPE_REGNO3 = Types.VARCHAR;
    public static final String NAME_REGNO3 = "regno3";


    private static final String TABLE_NAME = "hotel";

    /**
     * Create an array of type string containing all the fields of the hotel table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "hotel.hotelid"
        ,"hotel.name"
        ,"hotel.address1"
        ,"hotel.address2"
        ,"hotel.countryid"
        ,"hotel.city"
        ,"hotel.zip"
        ,"hotel.phone"
        ,"hotel.rphone"
        ,"hotel.fax"
        ,"hotel.email"
        ,"hotel.propertytype"
        ,"hotel.logo"
        ,"hotel.url"
        ,"hotel.grade"
        ,"hotel.idn"
        ,"hotel.regno1"
        ,"hotel.regno2"
        ,"hotel.regno3"
    };

    /**
     * Field that contains the comma separated fields of the hotel table.
     */
    private static final String ALL_FIELDS = "hotel.hotelid"
                            + ",hotel.name"
                            + ",hotel.address1"
                            + ",hotel.address2"
                            + ",hotel.countryid"
                            + ",hotel.city"
                            + ",hotel.zip"
                            + ",hotel.phone"
                            + ",hotel.rphone"
                            + ",hotel.fax"
                            + ",hotel.email"
                            + ",hotel.propertytype"
                            + ",hotel.logo"
                            + ",hotel.url"
                            + ",hotel.grade"
                            + ",hotel.idn"
                            + ",hotel.regno1"
                            + ",hotel.regno2"
                            + ",hotel.regno3";

    private static HotelManager singleton = new HotelManager();

    /**
     * Get the HotelManager singleton.
     *
     * @return HotelManager 
     */
    synchronized public static HotelManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own HotelManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(HotelManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new HotelBean instance.
     *
     * @return the new HotelBean 
     */
    public HotelBean createHotelBean()
    {
        return new HotelBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a HotelBean from the hotel using its key fields.
     *
     * @return a unique HotelBean 
     */
    //12
    public HotelBean loadByPrimaryKey(Integer hotelid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM hotel WHERE hotel.hotelid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, hotelid);
            HotelBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer hotelid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from hotel WHERE hotel.hotelid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, hotelid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads HotelBean array from the hotel table using its countryid field.
     *
     * @return an array of HotelBean 
     */
    // LOAD BY IMPORTED KEY
    public HotelBean[] loadByCountryid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM hotel WHERE countryid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the hotel table by countryid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByCountryid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM hotel WHERE countryid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the CountryBean object from the hotel.countryid field.
     *
     * @param pObject the HotelBean 
     * @return the associated CountryBean pObject
     */
    // GET IMPORTED
    public CountryBean getCountryBean(HotelBean pObject) throws SQLException
    {
        CountryBean other = CountryManager.getInstance().createCountryBean();
        other.setCountryid(pObject.getCountryid());
        return CountryManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the HotelBean object to the CountryBean object.
     *
     * @param pObject the HotelBean object to use
     * @param pObjectToBeSet the CountryBean object to associate to the HotelBean 
     * @return the associated CountryBean pObject
     */
    // SET IMPORTED
    public HotelBean setCountryBean(HotelBean pObject,CountryBean pObjectToBeSet)
    {
        pObject.setCountryid(pObjectToBeSet.getCountryid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from hotel.
     *
     * @return an array of HotelManager pObject
     */
    //38
    public HotelBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM hotel",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of HotelBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting HotelBean table 
     */
    //49
    public HotelBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of HotelBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting HotelBean table 
     */
    //51
    public HotelBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from hotel " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from hotel ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (HotelBean[])v.toArray(new HotelBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from hotel table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the hotel table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM hotel " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the HotelBean pObject into the database.
     *
     * @param pObject the HotelBean pObject to be saved
     */
    //100
    public HotelBean save(HotelBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isHotelidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('hotelid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setHotelid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into hotel (");
    
                if (pObject.isHotelidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("hotelid");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isAddress1Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("address1");
                    _dirtyCount++;
                }

                if (pObject.isAddress2Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("address2");
                    _dirtyCount++;
                }

                if (pObject.isCountryidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("countryid");
                    _dirtyCount++;
                }

                if (pObject.isCityModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("city");
                    _dirtyCount++;
                }

                if (pObject.isZipModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("zip");
                    _dirtyCount++;
                }

                if (pObject.isPhoneModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("phone");
                    _dirtyCount++;
                }

                if (pObject.isRphoneModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("rphone");
                    _dirtyCount++;
                }

                if (pObject.isFaxModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fax");
                    _dirtyCount++;
                }

                if (pObject.isEmailModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("email");
                    _dirtyCount++;
                }

                if (pObject.isPropertytypeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("propertytype");
                    _dirtyCount++;
                }

                if (pObject.isLogoModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("logo");
                    _dirtyCount++;
                }

                if (pObject.isUrlModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("url");
                    _dirtyCount++;
                }

                if (pObject.isGradeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("grade");
                    _dirtyCount++;
                }

                if (pObject.isIdnModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("idn");
                    _dirtyCount++;
                }

                if (pObject.isRegno1Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regno1");
                    _dirtyCount++;
                }

                if (pObject.isRegno2Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regno2");
                    _dirtyCount++;
                }

                if (pObject.isRegno3Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regno3");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isHotelidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getHotelid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isAddress1Modified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress1());
                }
    
                if (pObject.isAddress2Modified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress2());
                }
    
                if (pObject.isCountryidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
                }
    
                if (pObject.isCityModified()) {
                    ps.setString(++_dirtyCount, pObject.getCity());
                }
    
                if (pObject.isZipModified()) {
                    ps.setString(++_dirtyCount, pObject.getZip());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isRphoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getRphone());
                }
    
                if (pObject.isFaxModified()) {
                    ps.setString(++_dirtyCount, pObject.getFax());
                }
    
                if (pObject.isEmailModified()) {
                    ps.setString(++_dirtyCount, pObject.getEmail());
                }
    
                if (pObject.isPropertytypeModified()) {
                    ps.setString(++_dirtyCount, pObject.getPropertytype());
                }
    
                if (pObject.isLogoModified()) {
                    ps.setString(++_dirtyCount, pObject.getLogo());
                }
    
                if (pObject.isUrlModified()) {
                    ps.setString(++_dirtyCount, pObject.getUrl());
                }
    
                if (pObject.isGradeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getGrade());
                }
    
                if (pObject.isIdnModified()) {
                    ps.setString(++_dirtyCount, pObject.getIdn());
                }
    
                if (pObject.isRegno1Modified()) {
                    ps.setString(++_dirtyCount, pObject.getRegno1());
                }
    
                if (pObject.isRegno2Modified()) {
                    ps.setString(++_dirtyCount, pObject.getRegno2());
                }
    
                if (pObject.isRegno3Modified()) {
                    ps.setString(++_dirtyCount, pObject.getRegno3());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE hotel SET ");
                boolean useComma=false;

                if (pObject.isHotelidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("hotelid").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isAddress1Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("address1").append("=?");
                }

                if (pObject.isAddress2Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("address2").append("=?");
                }

                if (pObject.isCountryidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("countryid").append("=?");
                }

                if (pObject.isCityModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("city").append("=?");
                }

                if (pObject.isZipModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("zip").append("=?");
                }

                if (pObject.isPhoneModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("phone").append("=?");
                }

                if (pObject.isRphoneModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("rphone").append("=?");
                }

                if (pObject.isFaxModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fax").append("=?");
                }

                if (pObject.isEmailModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("email").append("=?");
                }

                if (pObject.isPropertytypeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("propertytype").append("=?");
                }

                if (pObject.isLogoModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("logo").append("=?");
                }

                if (pObject.isUrlModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("url").append("=?");
                }

                if (pObject.isGradeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("grade").append("=?");
                }

                if (pObject.isIdnModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("idn").append("=?");
                }

                if (pObject.isRegno1Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regno1").append("=?");
                }

                if (pObject.isRegno2Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regno2").append("=?");
                }

                if (pObject.isRegno3Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regno3").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("hotel.hotelid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isHotelidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getHotelid());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isAddress1Modified()) {
                      ps.setString(++_dirtyCount, pObject.getAddress1());
                }

                if (pObject.isAddress2Modified()) {
                      ps.setString(++_dirtyCount, pObject.getAddress2());
                }

                if (pObject.isCountryidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
                }

                if (pObject.isCityModified()) {
                      ps.setString(++_dirtyCount, pObject.getCity());
                }

                if (pObject.isZipModified()) {
                      ps.setString(++_dirtyCount, pObject.getZip());
                }

                if (pObject.isPhoneModified()) {
                      ps.setString(++_dirtyCount, pObject.getPhone());
                }

                if (pObject.isRphoneModified()) {
                      ps.setString(++_dirtyCount, pObject.getRphone());
                }

                if (pObject.isFaxModified()) {
                      ps.setString(++_dirtyCount, pObject.getFax());
                }

                if (pObject.isEmailModified()) {
                      ps.setString(++_dirtyCount, pObject.getEmail());
                }

                if (pObject.isPropertytypeModified()) {
                      ps.setString(++_dirtyCount, pObject.getPropertytype());
                }

                if (pObject.isLogoModified()) {
                      ps.setString(++_dirtyCount, pObject.getLogo());
                }

                if (pObject.isUrlModified()) {
                      ps.setString(++_dirtyCount, pObject.getUrl());
                }

                if (pObject.isGradeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getGrade());
                }

                if (pObject.isIdnModified()) {
                      ps.setString(++_dirtyCount, pObject.getIdn());
                }

                if (pObject.isRegno1Modified()) {
                      ps.setString(++_dirtyCount, pObject.getRegno1());
                }

                if (pObject.isRegno2Modified()) {
                      ps.setString(++_dirtyCount, pObject.getRegno2());
                }

                if (pObject.isRegno3Modified()) {
                      ps.setString(++_dirtyCount, pObject.getRegno3());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getHotelid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of HotelBean pObjects into the database.
     *
     * @param pObjects the HotelBean pObject table to be saved
     * @return the saved HotelBean array.
     */
    //65
    public HotelBean[] save(HotelBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique HotelBean pObject from a template one giving a c
     *
     * @param pObject the HotelBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public HotelBean loadUniqueUsingTemplate(HotelBean pObject) throws SQLException
    {
         HotelBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of HotelBean from a template one.
     *
     * @param pObject the HotelBean template to look for
     * @return all the HotelBean matching the template
     */
    //88
    public HotelBean[] loadUsingTemplate(HotelBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from hotel WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isHotelidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("hotelid= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isAddress1Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address1= ?");
             }
    
             if (pObject.isAddress2Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address2= ?");
             }
    
             if (pObject.isCountryidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("countryid= ?");
             }
    
             if (pObject.isCityModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("city= ?");
             }
    
             if (pObject.isZipModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("zip= ?");
             }
    
             if (pObject.isPhoneModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
             }
    
             if (pObject.isRphoneModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("rphone= ?");
             }
    
             if (pObject.isFaxModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fax= ?");
             }
    
             if (pObject.isEmailModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("email= ?");
             }
    
             if (pObject.isPropertytypeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("propertytype= ?");
             }
    
             if (pObject.isLogoModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("logo= ?");
             }
    
             if (pObject.isUrlModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("url= ?");
             }
    
             if (pObject.isGradeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("grade= ?");
             }
    
             if (pObject.isIdnModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("idn= ?");
             }
    
             if (pObject.isRegno1Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regno1= ?");
             }
    
             if (pObject.isRegno2Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regno2= ?");
             }
    
             if (pObject.isRegno3Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regno3= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isHotelidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getHotelid());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isAddress1Modified()) {
                 ps.setString(++_dirtyCount, pObject.getAddress1());
             }
    
             if (pObject.isAddress2Modified()) {
                 ps.setString(++_dirtyCount, pObject.getAddress2());
             }
    
             if (pObject.isCountryidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
             }
    
             if (pObject.isCityModified()) {
                 ps.setString(++_dirtyCount, pObject.getCity());
             }
    
             if (pObject.isZipModified()) {
                 ps.setString(++_dirtyCount, pObject.getZip());
             }
    
             if (pObject.isPhoneModified()) {
                 ps.setString(++_dirtyCount, pObject.getPhone());
             }
    
             if (pObject.isRphoneModified()) {
                 ps.setString(++_dirtyCount, pObject.getRphone());
             }
    
             if (pObject.isFaxModified()) {
                 ps.setString(++_dirtyCount, pObject.getFax());
             }
    
             if (pObject.isEmailModified()) {
                 ps.setString(++_dirtyCount, pObject.getEmail());
             }
    
             if (pObject.isPropertytypeModified()) {
                 ps.setString(++_dirtyCount, pObject.getPropertytype());
             }
    
             if (pObject.isLogoModified()) {
                 ps.setString(++_dirtyCount, pObject.getLogo());
             }
    
             if (pObject.isUrlModified()) {
                 ps.setString(++_dirtyCount, pObject.getUrl());
             }
    
             if (pObject.isGradeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getGrade());
             }
    
             if (pObject.isIdnModified()) {
                 ps.setString(++_dirtyCount, pObject.getIdn());
             }
    
             if (pObject.isRegno1Modified()) {
                 ps.setString(++_dirtyCount, pObject.getRegno1());
             }
    
             if (pObject.isRegno2Modified()) {
                 ps.setString(++_dirtyCount, pObject.getRegno2());
             }
    
             if (pObject.isRegno3Modified()) {
                 ps.setString(++_dirtyCount, pObject.getRegno3());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a HotelBean template.
     *
     * @param pObject the HotelBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(HotelBean pObject) throws SQLException
    {
        if (pObject.isHotelidInitialized())
            return deleteByPrimaryKey(pObject.getHotelid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM hotel WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isHotelidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("hotelid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAddress1Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("address1").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAddress2Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("address2").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCountryidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("countryid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCityInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("city").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isZipInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("zip").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPhoneInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("phone").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRphoneInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("rphone").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFaxInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fax").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isEmailInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("email").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPropertytypeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("propertytype").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLogoInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("logo").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isUrlInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("url").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGradeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("grade").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isIdnInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("idn").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegno1Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regno1").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegno2Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regno2").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegno3Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regno3").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isHotelidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getHotelid());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isAddress1Initialized()) {
                ps.setString(++_dirtyCount, pObject.getAddress1());
            }
    
            if (pObject.isAddress2Initialized()) {
                ps.setString(++_dirtyCount, pObject.getAddress2());
            }
    
            if (pObject.isCountryidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
            }
    
            if (pObject.isCityInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCity());
            }
    
            if (pObject.isZipInitialized()) {
                ps.setString(++_dirtyCount, pObject.getZip());
            }
    
            if (pObject.isPhoneInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPhone());
            }
    
            if (pObject.isRphoneInitialized()) {
                ps.setString(++_dirtyCount, pObject.getRphone());
            }
    
            if (pObject.isFaxInitialized()) {
                ps.setString(++_dirtyCount, pObject.getFax());
            }
    
            if (pObject.isEmailInitialized()) {
                ps.setString(++_dirtyCount, pObject.getEmail());
            }
    
            if (pObject.isPropertytypeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPropertytype());
            }
    
            if (pObject.isLogoInitialized()) {
                ps.setString(++_dirtyCount, pObject.getLogo());
            }
    
            if (pObject.isUrlInitialized()) {
                ps.setString(++_dirtyCount, pObject.getUrl());
            }
    
            if (pObject.isGradeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getGrade());
            }
    
            if (pObject.isIdnInitialized()) {
                ps.setString(++_dirtyCount, pObject.getIdn());
            }
    
            if (pObject.isRegno1Initialized()) {
                ps.setString(++_dirtyCount, pObject.getRegno1());
            }
    
            if (pObject.isRegno2Initialized()) {
                ps.setString(++_dirtyCount, pObject.getRegno2());
            }
    
            if (pObject.isRegno3Initialized()) {
                ps.setString(++_dirtyCount, pObject.getRegno3());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table hotel.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table hotel with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from hotel " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table hotel with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific HotelBean pObject given a c
     *
     * @param pObject the HotelBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(HotelBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from hotel WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isHotelidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("hotelid= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isAddress1Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address1= ?");
                }
    
                if (pObject.isAddress2Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address2= ?");
                }
    
                if (pObject.isCountryidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("countryid= ?");
                }
    
                if (pObject.isCityModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("city= ?");
                }
    
                if (pObject.isZipModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("zip= ?");
                }
    
                if (pObject.isPhoneModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
                }
    
                if (pObject.isRphoneModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("rphone= ?");
                }
    
                if (pObject.isFaxModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fax= ?");
                }
    
                if (pObject.isEmailModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("email= ?");
                }
    
                if (pObject.isPropertytypeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("propertytype= ?");
                }
    
                if (pObject.isLogoModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("logo= ?");
                }
    
                if (pObject.isUrlModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("url= ?");
                }
    
                if (pObject.isGradeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("grade= ?");
                }
    
                if (pObject.isIdnModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("idn= ?");
                }
    
                if (pObject.isRegno1Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regno1= ?");
                }
    
                if (pObject.isRegno2Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regno2= ?");
                }
    
                if (pObject.isRegno3Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regno3= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isHotelidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getHotelid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isAddress1Modified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress1());
                }
    
                if (pObject.isAddress2Modified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress2());
                }
    
                if (pObject.isCountryidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
                }
    
                if (pObject.isCityModified()) {
                    ps.setString(++_dirtyCount, pObject.getCity());
                }
    
                if (pObject.isZipModified()) {
                    ps.setString(++_dirtyCount, pObject.getZip());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isRphoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getRphone());
                }
    
                if (pObject.isFaxModified()) {
                    ps.setString(++_dirtyCount, pObject.getFax());
                }
    
                if (pObject.isEmailModified()) {
                    ps.setString(++_dirtyCount, pObject.getEmail());
                }
    
                if (pObject.isPropertytypeModified()) {
                    ps.setString(++_dirtyCount, pObject.getPropertytype());
                }
    
                if (pObject.isLogoModified()) {
                    ps.setString(++_dirtyCount, pObject.getLogo());
                }
    
                if (pObject.isUrlModified()) {
                    ps.setString(++_dirtyCount, pObject.getUrl());
                }
    
                if (pObject.isGradeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getGrade());
                }
    
                if (pObject.isIdnModified()) {
                    ps.setString(++_dirtyCount, pObject.getIdn());
                }
    
                if (pObject.isRegno1Modified()) {
                    ps.setString(++_dirtyCount, pObject.getRegno1());
                }
    
                if (pObject.isRegno2Modified()) {
                    ps.setString(++_dirtyCount, pObject.getRegno2());
                }
    
                if (pObject.isRegno3Modified()) {
                    ps.setString(++_dirtyCount, pObject.getRegno3());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the hotel on a HotelBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting HotelBean pObject
     */
    //72
    public HotelBean decodeRow(ResultSet rs) throws SQLException
    {
        HotelBean pObject = createHotelBean();
        pObject.setHotelid(Manager.getInteger(rs, 1));
        pObject.setName(rs.getString(2));
        pObject.setAddress1(rs.getString(3));
        pObject.setAddress2(rs.getString(4));
        pObject.setCountryid(Manager.getInteger(rs, 5));
        pObject.setCity(rs.getString(6));
        pObject.setZip(rs.getString(7));
        pObject.setPhone(rs.getString(8));
        pObject.setRphone(rs.getString(9));
        pObject.setFax(rs.getString(10));
        pObject.setEmail(rs.getString(11));
        pObject.setPropertytype(rs.getString(12));
        pObject.setLogo(rs.getString(13));
        pObject.setUrl(rs.getString(14));
        pObject.setGrade(Manager.getInteger(rs, 15));
        pObject.setIdn(rs.getString(16));
        pObject.setRegno1(rs.getString(17));
        pObject.setRegno2(rs.getString(18));
        pObject.setRegno3(rs.getString(19));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the hotel table on a HotelBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting HotelBean pObject
     */
    //73
    public HotelBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        HotelBean pObject = createHotelBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_HOTELID:
                    ++pos;
                    pObject.setHotelid(Manager.getInteger(rs, pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_ADDRESS1:
                    ++pos;
                    pObject.setAddress1(rs.getString(pos));
                    break;
                case ID_ADDRESS2:
                    ++pos;
                    pObject.setAddress2(rs.getString(pos));
                    break;
                case ID_COUNTRYID:
                    ++pos;
                    pObject.setCountryid(Manager.getInteger(rs, pos));
                    break;
                case ID_CITY:
                    ++pos;
                    pObject.setCity(rs.getString(pos));
                    break;
                case ID_ZIP:
                    ++pos;
                    pObject.setZip(rs.getString(pos));
                    break;
                case ID_PHONE:
                    ++pos;
                    pObject.setPhone(rs.getString(pos));
                    break;
                case ID_RPHONE:
                    ++pos;
                    pObject.setRphone(rs.getString(pos));
                    break;
                case ID_FAX:
                    ++pos;
                    pObject.setFax(rs.getString(pos));
                    break;
                case ID_EMAIL:
                    ++pos;
                    pObject.setEmail(rs.getString(pos));
                    break;
                case ID_PROPERTYTYPE:
                    ++pos;
                    pObject.setPropertytype(rs.getString(pos));
                    break;
                case ID_LOGO:
                    ++pos;
                    pObject.setLogo(rs.getString(pos));
                    break;
                case ID_URL:
                    ++pos;
                    pObject.setUrl(rs.getString(pos));
                    break;
                case ID_GRADE:
                    ++pos;
                    pObject.setGrade(Manager.getInteger(rs, pos));
                    break;
                case ID_IDN:
                    ++pos;
                    pObject.setIdn(rs.getString(pos));
                    break;
                case ID_REGNO1:
                    ++pos;
                    pObject.setRegno1(rs.getString(pos));
                    break;
                case ID_REGNO2:
                    ++pos;
                    pObject.setRegno2(rs.getString(pos));
                    break;
                case ID_REGNO3:
                    ++pos;
                    pObject.setRegno3(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of HotelBean 
     */
    //41
    public HotelBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of HotelBean 
     */
    public HotelBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (HotelBean[])v.toArray(new HotelBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private HotelListener listener = null;

    /**
     * Registers a unique HotelListener listener.
     */
    //66.5
    public void registerListener(HotelListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the HotelBean pObject.
     *
     * @param pObject the HotelBean pObject to be saved
     */
    //67
    void beforeInsert(HotelBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the HotelBean pObject.
     *
     * @param pObject the HotelBean pObject to be saved
     */
    //68
    void afterInsert(HotelBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the HotelBean pObject.
     *
     * @param pObject the HotelBean pObject to be updated
     */
    //69
    void beforeUpdate(HotelBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the HotelBean pObject.
     *
     * @param pObject the HotelBean pObject to be updated
     */
    //70
    void afterUpdate(HotelBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
