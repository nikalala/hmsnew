// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class VArrivallistBean
// extends+ 

// extends- 

{
    private Long reservationid;
    private boolean reservationid_is_modified = false;
    private boolean reservationid_is_initialized = false;
    
    private Long reservationroomid;
    private boolean reservationroomid_is_modified = false;
    private boolean reservationroomid_is_initialized = false;
    
    private Integer roomid;
    private boolean roomid_is_modified = false;
    private boolean roomid_is_initialized = false;
    
    private Integer roomtypeid;
    private boolean roomtypeid_is_modified = false;
    private boolean roomtypeid_is_initialized = false;
    
    private java.sql.Timestamp arraivaldate;
    private boolean arraivaldate_is_modified = false;
    private boolean arraivaldate_is_initialized = false;
    
    private java.sql.Timestamp departuredate;
    private boolean departuredate_is_modified = false;
    private boolean departuredate_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private Integer reservationtypeid;
    private boolean reservationtypeid_is_modified = false;
    private boolean reservationtypeid_is_initialized = false;
    
    private Long guestid;
    private boolean guestid_is_modified = false;
    private boolean guestid_is_initialized = false;
    
    private String guest;
    private boolean guest_is_modified = false;
    private boolean guest_is_initialized = false;
    
    private String roomcode;
    private boolean roomcode_is_modified = false;
    private boolean roomcode_is_initialized = false;
    
    private String roomtypecode;
    private boolean roomtypecode_is_modified = false;
    private boolean roomtypecode_is_initialized = false;
    
    private String bsourcename;
    private boolean bsourcename_is_modified = false;
    private boolean bsourcename_is_initialized = false;
    
    private Integer bsourceid;
    private boolean bsourceid_is_modified = false;
    private boolean bsourceid_is_initialized = false;
    
    private String companyname;
    private boolean companyname_is_modified = false;
    private boolean companyname_is_initialized = false;
    
    private Integer adult;
    private boolean adult_is_modified = false;
    private boolean adult_is_initialized = false;
    
    private Integer child;
    private boolean child_is_modified = false;
    private boolean child_is_initialized = false;
    
    private String reservtype;
    private boolean reservtype_is_modified = false;
    private boolean reservtype_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VArrivallistBean()
    {
    }
    
    /**
     * Getter method for reservationid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.reservationid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of reservationid
     */
    public Long getReservationid()
    {
        return reservationid; 
    }

    /**
     * Setter method for reservationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationid
     */
    public void setReservationid(Long newVal) {
        if ((newVal != null && this.reservationid != null && (newVal.compareTo(this.reservationid) == 0)) || 
            (newVal == null && this.reservationid == null && reservationid_is_initialized)) {
            return; 
        } 
        this.reservationid = newVal; 
        reservationid_is_modified = true; 
        reservationid_is_initialized = true; 
    }

    /**
     * Setter method for reservationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationid
     */
    public void setReservationid(long newVal) {
        setReservationid(new Long(newVal));
    }

    /**
     * Determines if the reservationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationidModified() {
        return reservationid_is_modified; 
    }

    /**
     * Determines if the reservationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationidInitialized() {
        return reservationid_is_initialized; 
    }

    /**
     * Getter method for reservationroomid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.reservationroomid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of reservationroomid
     */
    public Long getReservationroomid()
    {
        return reservationroomid; 
    }

    /**
     * Setter method for reservationroomid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationroomid
     */
    public void setReservationroomid(Long newVal) {
        if ((newVal != null && this.reservationroomid != null && (newVal.compareTo(this.reservationroomid) == 0)) || 
            (newVal == null && this.reservationroomid == null && reservationroomid_is_initialized)) {
            return; 
        } 
        this.reservationroomid = newVal; 
        reservationroomid_is_modified = true; 
        reservationroomid_is_initialized = true; 
    }

    /**
     * Setter method for reservationroomid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationroomid
     */
    public void setReservationroomid(long newVal) {
        setReservationroomid(new Long(newVal));
    }

    /**
     * Determines if the reservationroomid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationroomidModified() {
        return reservationroomid_is_modified; 
    }

    /**
     * Determines if the reservationroomid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationroomidInitialized() {
        return reservationroomid_is_initialized; 
    }

    /**
     * Getter method for roomid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.roomid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of roomid
     */
    public Integer getRoomid()
    {
        return roomid; 
    }

    /**
     * Setter method for roomid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomid
     */
    public void setRoomid(Integer newVal) {
        if ((newVal != null && this.roomid != null && (newVal.compareTo(this.roomid) == 0)) || 
            (newVal == null && this.roomid == null && roomid_is_initialized)) {
            return; 
        } 
        this.roomid = newVal; 
        roomid_is_modified = true; 
        roomid_is_initialized = true; 
    }

    /**
     * Setter method for roomid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to roomid
     */
    public void setRoomid(int newVal) {
        setRoomid(new Integer(newVal));
    }

    /**
     * Determines if the roomid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomidModified() {
        return roomid_is_modified; 
    }

    /**
     * Determines if the roomid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomidInitialized() {
        return roomid_is_initialized; 
    }

    /**
     * Getter method for roomtypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.roomtypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of roomtypeid
     */
    public Integer getRoomtypeid()
    {
        return roomtypeid; 
    }

    /**
     * Setter method for roomtypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomtypeid
     */
    public void setRoomtypeid(Integer newVal) {
        if ((newVal != null && this.roomtypeid != null && (newVal.compareTo(this.roomtypeid) == 0)) || 
            (newVal == null && this.roomtypeid == null && roomtypeid_is_initialized)) {
            return; 
        } 
        this.roomtypeid = newVal; 
        roomtypeid_is_modified = true; 
        roomtypeid_is_initialized = true; 
    }

    /**
     * Setter method for roomtypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to roomtypeid
     */
    public void setRoomtypeid(int newVal) {
        setRoomtypeid(new Integer(newVal));
    }

    /**
     * Determines if the roomtypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomtypeidModified() {
        return roomtypeid_is_modified; 
    }

    /**
     * Determines if the roomtypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomtypeidInitialized() {
        return roomtypeid_is_initialized; 
    }

    /**
     * Getter method for arraivaldate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.arraivaldate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of arraivaldate
     */
    public java.sql.Timestamp getArraivaldate()
    {
        return arraivaldate; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.arraivaldate != null && (newVal.compareTo(this.arraivaldate) == 0)) || 
            (newVal == null && this.arraivaldate == null && arraivaldate_is_initialized)) {
            return; 
        } 
        this.arraivaldate = newVal; 
        arraivaldate_is_modified = true; 
        arraivaldate_is_initialized = true; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(long newVal) {
        setArraivaldate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the arraivaldate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isArraivaldateModified() {
        return arraivaldate_is_modified; 
    }

    /**
     * Determines if the arraivaldate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isArraivaldateInitialized() {
        return arraivaldate_is_initialized; 
    }

    /**
     * Getter method for departuredate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.departuredate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of departuredate
     */
    public java.sql.Timestamp getDeparturedate()
    {
        return departuredate; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.departuredate != null && (newVal.compareTo(this.departuredate) == 0)) || 
            (newVal == null && this.departuredate == null && departuredate_is_initialized)) {
            return; 
        } 
        this.departuredate = newVal; 
        departuredate_is_modified = true; 
        departuredate_is_initialized = true; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(long newVal) {
        setDeparturedate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the departuredate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeparturedateModified() {
        return departuredate_is_modified; 
    }

    /**
     * Determines if the departuredate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeparturedateInitialized() {
        return departuredate_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.regbyid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for reservationtypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.reservationtypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of reservationtypeid
     */
    public Integer getReservationtypeid()
    {
        return reservationtypeid; 
    }

    /**
     * Setter method for reservationtypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationtypeid
     */
    public void setReservationtypeid(Integer newVal) {
        if ((newVal != null && this.reservationtypeid != null && (newVal.compareTo(this.reservationtypeid) == 0)) || 
            (newVal == null && this.reservationtypeid == null && reservationtypeid_is_initialized)) {
            return; 
        } 
        this.reservationtypeid = newVal; 
        reservationtypeid_is_modified = true; 
        reservationtypeid_is_initialized = true; 
    }

    /**
     * Setter method for reservationtypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationtypeid
     */
    public void setReservationtypeid(int newVal) {
        setReservationtypeid(new Integer(newVal));
    }

    /**
     * Determines if the reservationtypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationtypeidModified() {
        return reservationtypeid_is_modified; 
    }

    /**
     * Determines if the reservationtypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationtypeidInitialized() {
        return reservationtypeid_is_initialized; 
    }

    /**
     * Getter method for guestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.guestid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of guestid
     */
    public Long getGuestid()
    {
        return guestid; 
    }

    /**
     * Setter method for guestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to guestid
     */
    public void setGuestid(Long newVal) {
        if ((newVal != null && this.guestid != null && (newVal.compareTo(this.guestid) == 0)) || 
            (newVal == null && this.guestid == null && guestid_is_initialized)) {
            return; 
        } 
        this.guestid = newVal; 
        guestid_is_modified = true; 
        guestid_is_initialized = true; 
    }

    /**
     * Setter method for guestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to guestid
     */
    public void setGuestid(long newVal) {
        setGuestid(new Long(newVal));
    }

    /**
     * Determines if the guestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestidModified() {
        return guestid_is_modified; 
    }

    /**
     * Determines if the guestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestidInitialized() {
        return guestid_is_initialized; 
    }

    /**
     * Getter method for guest.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.guest
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of guest
     */
    public String getGuest()
    {
        return guest; 
    }

    /**
     * Setter method for guest.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to guest
     */
    public void setGuest(String newVal) {
        if ((newVal != null && this.guest != null && (newVal.compareTo(this.guest) == 0)) || 
            (newVal == null && this.guest == null && guest_is_initialized)) {
            return; 
        } 
        this.guest = newVal; 
        guest_is_modified = true; 
        guest_is_initialized = true; 
    }

    /**
     * Determines if the guest has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestModified() {
        return guest_is_modified; 
    }

    /**
     * Determines if the guest has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestInitialized() {
        return guest_is_initialized; 
    }

    /**
     * Getter method for roomcode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.roomcode
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of roomcode
     */
    public String getRoomcode()
    {
        return roomcode; 
    }

    /**
     * Setter method for roomcode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomcode
     */
    public void setRoomcode(String newVal) {
        if ((newVal != null && this.roomcode != null && (newVal.compareTo(this.roomcode) == 0)) || 
            (newVal == null && this.roomcode == null && roomcode_is_initialized)) {
            return; 
        } 
        this.roomcode = newVal; 
        roomcode_is_modified = true; 
        roomcode_is_initialized = true; 
    }

    /**
     * Determines if the roomcode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomcodeModified() {
        return roomcode_is_modified; 
    }

    /**
     * Determines if the roomcode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomcodeInitialized() {
        return roomcode_is_initialized; 
    }

    /**
     * Getter method for roomtypecode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.roomtypecode
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of roomtypecode
     */
    public String getRoomtypecode()
    {
        return roomtypecode; 
    }

    /**
     * Setter method for roomtypecode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomtypecode
     */
    public void setRoomtypecode(String newVal) {
        if ((newVal != null && this.roomtypecode != null && (newVal.compareTo(this.roomtypecode) == 0)) || 
            (newVal == null && this.roomtypecode == null && roomtypecode_is_initialized)) {
            return; 
        } 
        this.roomtypecode = newVal; 
        roomtypecode_is_modified = true; 
        roomtypecode_is_initialized = true; 
    }

    /**
     * Determines if the roomtypecode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomtypecodeModified() {
        return roomtypecode_is_modified; 
    }

    /**
     * Determines if the roomtypecode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomtypecodeInitialized() {
        return roomtypecode_is_initialized; 
    }

    /**
     * Getter method for bsourcename.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.bsourcename
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of bsourcename
     */
    public String getBsourcename()
    {
        return bsourcename; 
    }

    /**
     * Setter method for bsourcename.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to bsourcename
     */
    public void setBsourcename(String newVal) {
        if ((newVal != null && this.bsourcename != null && (newVal.compareTo(this.bsourcename) == 0)) || 
            (newVal == null && this.bsourcename == null && bsourcename_is_initialized)) {
            return; 
        } 
        this.bsourcename = newVal; 
        bsourcename_is_modified = true; 
        bsourcename_is_initialized = true; 
    }

    /**
     * Determines if the bsourcename has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBsourcenameModified() {
        return bsourcename_is_modified; 
    }

    /**
     * Determines if the bsourcename has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBsourcenameInitialized() {
        return bsourcename_is_initialized; 
    }

    /**
     * Getter method for bsourceid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.bsourceid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of bsourceid
     */
    public Integer getBsourceid()
    {
        return bsourceid; 
    }

    /**
     * Setter method for bsourceid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to bsourceid
     */
    public void setBsourceid(Integer newVal) {
        if ((newVal != null && this.bsourceid != null && (newVal.compareTo(this.bsourceid) == 0)) || 
            (newVal == null && this.bsourceid == null && bsourceid_is_initialized)) {
            return; 
        } 
        this.bsourceid = newVal; 
        bsourceid_is_modified = true; 
        bsourceid_is_initialized = true; 
    }

    /**
     * Setter method for bsourceid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to bsourceid
     */
    public void setBsourceid(int newVal) {
        setBsourceid(new Integer(newVal));
    }

    /**
     * Determines if the bsourceid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBsourceidModified() {
        return bsourceid_is_modified; 
    }

    /**
     * Determines if the bsourceid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBsourceidInitialized() {
        return bsourceid_is_initialized; 
    }

    /**
     * Getter method for companyname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.companyname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of companyname
     */
    public String getCompanyname()
    {
        return companyname; 
    }

    /**
     * Setter method for companyname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to companyname
     */
    public void setCompanyname(String newVal) {
        if ((newVal != null && this.companyname != null && (newVal.compareTo(this.companyname) == 0)) || 
            (newVal == null && this.companyname == null && companyname_is_initialized)) {
            return; 
        } 
        this.companyname = newVal; 
        companyname_is_modified = true; 
        companyname_is_initialized = true; 
    }

    /**
     * Determines if the companyname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompanynameModified() {
        return companyname_is_modified; 
    }

    /**
     * Determines if the companyname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompanynameInitialized() {
        return companyname_is_initialized; 
    }

    /**
     * Getter method for adult.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.adult
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of adult
     */
    public Integer getAdult()
    {
        return adult; 
    }

    /**
     * Setter method for adult.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to adult
     */
    public void setAdult(Integer newVal) {
        if ((newVal != null && this.adult != null && (newVal.compareTo(this.adult) == 0)) || 
            (newVal == null && this.adult == null && adult_is_initialized)) {
            return; 
        } 
        this.adult = newVal; 
        adult_is_modified = true; 
        adult_is_initialized = true; 
    }

    /**
     * Setter method for adult.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to adult
     */
    public void setAdult(int newVal) {
        setAdult(new Integer(newVal));
    }

    /**
     * Determines if the adult has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAdultModified() {
        return adult_is_modified; 
    }

    /**
     * Determines if the adult has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAdultInitialized() {
        return adult_is_initialized; 
    }

    /**
     * Getter method for child.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.child
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of child
     */
    public Integer getChild()
    {
        return child; 
    }

    /**
     * Setter method for child.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to child
     */
    public void setChild(Integer newVal) {
        if ((newVal != null && this.child != null && (newVal.compareTo(this.child) == 0)) || 
            (newVal == null && this.child == null && child_is_initialized)) {
            return; 
        } 
        this.child = newVal; 
        child_is_modified = true; 
        child_is_initialized = true; 
    }

    /**
     * Setter method for child.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to child
     */
    public void setChild(int newVal) {
        setChild(new Integer(newVal));
    }

    /**
     * Determines if the child has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isChildModified() {
        return child_is_modified; 
    }

    /**
     * Determines if the child has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isChildInitialized() {
        return child_is_initialized; 
    }

    /**
     * Getter method for reservtype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_arrivallist.reservtype
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of reservtype
     */
    public String getReservtype()
    {
        return reservtype; 
    }

    /**
     * Setter method for reservtype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservtype
     */
    public void setReservtype(String newVal) {
        if ((newVal != null && this.reservtype != null && (newVal.compareTo(this.reservtype) == 0)) || 
            (newVal == null && this.reservtype == null && reservtype_is_initialized)) {
            return; 
        } 
        this.reservtype = newVal; 
        reservtype_is_modified = true; 
        reservtype_is_initialized = true; 
    }

    /**
     * Determines if the reservtype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservtypeModified() {
        return reservtype_is_modified; 
    }

    /**
     * Determines if the reservtype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservtypeInitialized() {
        return reservtype_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return reservationid_is_modified || 
		reservationroomid_is_modified || 
		roomid_is_modified || 
		roomtypeid_is_modified || 
		arraivaldate_is_modified || 
		departuredate_is_modified || 
		regbyid_is_modified || 
		reservationtypeid_is_modified || 
		guestid_is_modified || 
		guest_is_modified || 
		roomcode_is_modified || 
		roomtypecode_is_modified || 
		bsourcename_is_modified || 
		bsourceid_is_modified || 
		companyname_is_modified || 
		adult_is_modified || 
		child_is_modified || 
		reservtype_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        reservationid_is_modified = false;
        reservationroomid_is_modified = false;
        roomid_is_modified = false;
        roomtypeid_is_modified = false;
        arraivaldate_is_modified = false;
        departuredate_is_modified = false;
        regbyid_is_modified = false;
        reservationtypeid_is_modified = false;
        guestid_is_modified = false;
        guest_is_modified = false;
        roomcode_is_modified = false;
        roomtypecode_is_modified = false;
        bsourcename_is_modified = false;
        bsourceid_is_modified = false;
        companyname_is_modified = false;
        adult_is_modified = false;
        child_is_modified = false;
        reservtype_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VArrivallistBean bean) {
        setReservationid(bean.getReservationid());
        setReservationroomid(bean.getReservationroomid());
        setRoomid(bean.getRoomid());
        setRoomtypeid(bean.getRoomtypeid());
        setArraivaldate(bean.getArraivaldate());
        setDeparturedate(bean.getDeparturedate());
        setRegbyid(bean.getRegbyid());
        setReservationtypeid(bean.getReservationtypeid());
        setGuestid(bean.getGuestid());
        setGuest(bean.getGuest());
        setRoomcode(bean.getRoomcode());
        setRoomtypecode(bean.getRoomtypecode());
        setBsourcename(bean.getBsourcename());
        setBsourceid(bean.getBsourceid());
        setCompanyname(bean.getCompanyname());
        setAdult(bean.getAdult());
        setChild(bean.getChild());
        setReservtype(bean.getReservtype());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[v_arrivallist] "
                 + "\n - v_arrivallist.reservationid = " + (reservationid_is_initialized ? ("[" + (reservationid == null ? null : reservationid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.reservationroomid = " + (reservationroomid_is_initialized ? ("[" + (reservationroomid == null ? null : reservationroomid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.roomid = " + (roomid_is_initialized ? ("[" + (roomid == null ? null : roomid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.roomtypeid = " + (roomtypeid_is_initialized ? ("[" + (roomtypeid == null ? null : roomtypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.arraivaldate = " + (arraivaldate_is_initialized ? ("[" + (arraivaldate == null ? null : arraivaldate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.departuredate = " + (departuredate_is_initialized ? ("[" + (departuredate == null ? null : departuredate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.reservationtypeid = " + (reservationtypeid_is_initialized ? ("[" + (reservationtypeid == null ? null : reservationtypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.guestid = " + (guestid_is_initialized ? ("[" + (guestid == null ? null : guestid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.guest = " + (guest_is_initialized ? ("[" + (guest == null ? null : guest.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.roomcode = " + (roomcode_is_initialized ? ("[" + (roomcode == null ? null : roomcode.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.roomtypecode = " + (roomtypecode_is_initialized ? ("[" + (roomtypecode == null ? null : roomtypecode.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.bsourcename = " + (bsourcename_is_initialized ? ("[" + (bsourcename == null ? null : bsourcename.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.bsourceid = " + (bsourceid_is_initialized ? ("[" + (bsourceid == null ? null : bsourceid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.companyname = " + (companyname_is_initialized ? ("[" + (companyname == null ? null : companyname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.adult = " + (adult_is_initialized ? ("[" + (adult == null ? null : adult.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.child = " + (child_is_initialized ? ("[" + (child == null ? null : child.toString()) + "]") : "not initialized") + ""
                 + "\n - v_arrivallist.reservtype = " + (reservtype_is_initialized ? ("[" + (reservtype == null ? null : reservtype.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
