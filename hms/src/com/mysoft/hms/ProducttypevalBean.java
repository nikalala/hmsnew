// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class ProducttypevalBean
// extends+ 

// extends- 

{
    private Long productpropertyid;
    private boolean productpropertyid_is_modified = false;
    private boolean productpropertyid_is_initialized = false;
    
    private java.util.Date valuedate;
    private boolean valuedate_is_modified = false;
    private boolean valuedate_is_initialized = false;
    
    private String value;
    private boolean value_is_modified = false;
    private boolean value_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ProducttypevalBean()
    {
    }
    
    /**
     * Getter method for productpropertyid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: producttypeval.productpropertyid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of productpropertyid
     */
    public Long getProductpropertyid()
    {
        return productpropertyid; 
    }

    /**
     * Setter method for productpropertyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to productpropertyid
     */
    public void setProductpropertyid(Long newVal) {
        if ((newVal != null && this.productpropertyid != null && (newVal.compareTo(this.productpropertyid) == 0)) || 
            (newVal == null && this.productpropertyid == null && productpropertyid_is_initialized)) {
            return; 
        } 
        this.productpropertyid = newVal; 
        productpropertyid_is_modified = true; 
        productpropertyid_is_initialized = true; 
    }

    /**
     * Setter method for productpropertyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to productpropertyid
     */
    public void setProductpropertyid(long newVal) {
        setProductpropertyid(new Long(newVal));
    }

    /**
     * Determines if the productpropertyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isProductpropertyidModified() {
        return productpropertyid_is_modified; 
    }

    /**
     * Determines if the productpropertyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isProductpropertyidInitialized() {
        return productpropertyid_is_initialized; 
    }

    /**
     * Getter method for valuedate.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: producttypeval.valuedate
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of valuedate
     */
    public java.util.Date getValuedate()
    {
        return valuedate; 
    }

    /**
     * Setter method for valuedate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to valuedate
     */
    public void setValuedate(java.util.Date newVal) {
        if ((newVal != null && this.valuedate != null && (newVal.compareTo(this.valuedate) == 0)) || 
            (newVal == null && this.valuedate == null && valuedate_is_initialized)) {
            return; 
        } 
        this.valuedate = newVal; 
        valuedate_is_modified = true; 
        valuedate_is_initialized = true; 
    }

    /**
     * Setter method for valuedate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to valuedate
     */
    public void setValuedate(long newVal) {
        setValuedate(new java.util.Date(newVal));
    }

    /**
     * Determines if the valuedate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isValuedateModified() {
        return valuedate_is_modified; 
    }

    /**
     * Determines if the valuedate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isValuedateInitialized() {
        return valuedate_is_initialized; 
    }

    /**
     * Getter method for value.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: producttypeval.value
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of value
     */
    public String getValue()
    {
        return value; 
    }

    /**
     * Setter method for value.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to value
     */
    public void setValue(String newVal) {
        if ((newVal != null && this.value != null && (newVal.compareTo(this.value) == 0)) || 
            (newVal == null && this.value == null && value_is_initialized)) {
            return; 
        } 
        this.value = newVal; 
        value_is_modified = true; 
        value_is_initialized = true; 
    }

    /**
     * Determines if the value has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isValueModified() {
        return value_is_modified; 
    }

    /**
     * Determines if the value has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isValueInitialized() {
        return value_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return productpropertyid_is_modified || 
		valuedate_is_modified || 
		value_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        productpropertyid_is_modified = false;
        valuedate_is_modified = false;
        value_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ProducttypevalBean bean) {
        setProductpropertyid(bean.getProductpropertyid());
        setValuedate(bean.getValuedate());
        setValue(bean.getValue());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[producttypeval] "
                 + "\n - producttypeval.productpropertyid = " + (productpropertyid_is_initialized ? ("[" + (productpropertyid == null ? null : productpropertyid.toString()) + "]") : "not initialized") + ""
                 + "\n - producttypeval.valuedate = " + (valuedate_is_initialized ? ("[" + (valuedate == null ? null : valuedate.toString()) + "]") : "not initialized") + ""
                 + "\n - producttypeval.value = " + (value_is_initialized ? ("[" + (value == null ? null : value.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
