// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class VWorkorderBean
// extends+ 

// extends- 

{
    private Long workorderid;
    private boolean workorderid_is_modified = false;
    private boolean workorderid_is_initialized = false;
    
    private String num;
    private boolean num_is_modified = false;
    private boolean num_is_initialized = false;
    
    private String description;
    private boolean description_is_modified = false;
    private boolean description_is_initialized = false;
    
    private Integer category;
    private boolean category_is_modified = false;
    private boolean category_is_initialized = false;
    
    private Integer roomid;
    private boolean roomid_is_modified = false;
    private boolean roomid_is_initialized = false;
    
    private Integer houseunitid;
    private boolean houseunitid_is_modified = false;
    private boolean houseunitid_is_initialized = false;
    
    private java.sql.Timestamp blockstart;
    private boolean blockstart_is_modified = false;
    private boolean blockstart_is_initialized = false;
    
    private java.sql.Timestamp blockend;
    private boolean blockend_is_modified = false;
    private boolean blockend_is_initialized = false;
    
    private Integer priority;
    private boolean priority_is_modified = false;
    private boolean priority_is_initialized = false;
    
    private Integer assignedtoid;
    private boolean assignedtoid_is_modified = false;
    private boolean assignedtoid_is_initialized = false;
    
    private Integer orderstatus;
    private boolean orderstatus_is_modified = false;
    private boolean orderstatus_is_initialized = false;
    
    private java.sql.Timestamp deadline;
    private boolean deadline_is_modified = false;
    private boolean deadline_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp updatedon;
    private boolean updatedon_is_modified = false;
    private boolean updatedon_is_initialized = false;
    
    private String note;
    private boolean note_is_modified = false;
    private boolean note_is_initialized = false;
    
    private String rname;
    private boolean rname_is_modified = false;
    private boolean rname_is_initialized = false;
    
    private String code;
    private boolean code_is_modified = false;
    private boolean code_is_initialized = false;
    
    private String hname;
    private boolean hname_is_modified = false;
    private boolean hname_is_initialized = false;
    
    private String assignedto;
    private boolean assignedto_is_modified = false;
    private boolean assignedto_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VWorkorderBean()
    {
    }
    
    /**
     * Getter method for workorderid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.workorderid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of workorderid
     */
    public Long getWorkorderid()
    {
        return workorderid; 
    }

    /**
     * Setter method for workorderid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to workorderid
     */
    public void setWorkorderid(Long newVal) {
        if ((newVal != null && this.workorderid != null && (newVal.compareTo(this.workorderid) == 0)) || 
            (newVal == null && this.workorderid == null && workorderid_is_initialized)) {
            return; 
        } 
        this.workorderid = newVal; 
        workorderid_is_modified = true; 
        workorderid_is_initialized = true; 
    }

    /**
     * Setter method for workorderid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to workorderid
     */
    public void setWorkorderid(long newVal) {
        setWorkorderid(new Long(newVal));
    }

    /**
     * Determines if the workorderid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWorkorderidModified() {
        return workorderid_is_modified; 
    }

    /**
     * Determines if the workorderid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWorkorderidInitialized() {
        return workorderid_is_initialized; 
    }

    /**
     * Getter method for num.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.num
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of num
     */
    public String getNum()
    {
        return num; 
    }

    /**
     * Setter method for num.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to num
     */
    public void setNum(String newVal) {
        if ((newVal != null && this.num != null && (newVal.compareTo(this.num) == 0)) || 
            (newVal == null && this.num == null && num_is_initialized)) {
            return; 
        } 
        this.num = newVal; 
        num_is_modified = true; 
        num_is_initialized = true; 
    }

    /**
     * Determines if the num has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNumModified() {
        return num_is_modified; 
    }

    /**
     * Determines if the num has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNumInitialized() {
        return num_is_initialized; 
    }

    /**
     * Getter method for description.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.description
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of description
     */
    public String getDescription()
    {
        return description; 
    }

    /**
     * Setter method for description.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to description
     */
    public void setDescription(String newVal) {
        if ((newVal != null && this.description != null && (newVal.compareTo(this.description) == 0)) || 
            (newVal == null && this.description == null && description_is_initialized)) {
            return; 
        } 
        this.description = newVal; 
        description_is_modified = true; 
        description_is_initialized = true; 
    }

    /**
     * Determines if the description has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDescriptionModified() {
        return description_is_modified; 
    }

    /**
     * Determines if the description has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDescriptionInitialized() {
        return description_is_initialized; 
    }

    /**
     * Getter method for category.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.category
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of category
     */
    public Integer getCategory()
    {
        return category; 
    }

    /**
     * Setter method for category.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to category
     */
    public void setCategory(Integer newVal) {
        if ((newVal != null && this.category != null && (newVal.compareTo(this.category) == 0)) || 
            (newVal == null && this.category == null && category_is_initialized)) {
            return; 
        } 
        this.category = newVal; 
        category_is_modified = true; 
        category_is_initialized = true; 
    }

    /**
     * Setter method for category.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to category
     */
    public void setCategory(int newVal) {
        setCategory(new Integer(newVal));
    }

    /**
     * Determines if the category has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCategoryModified() {
        return category_is_modified; 
    }

    /**
     * Determines if the category has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCategoryInitialized() {
        return category_is_initialized; 
    }

    /**
     * Getter method for roomid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.roomid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of roomid
     */
    public Integer getRoomid()
    {
        return roomid; 
    }

    /**
     * Setter method for roomid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomid
     */
    public void setRoomid(Integer newVal) {
        if ((newVal != null && this.roomid != null && (newVal.compareTo(this.roomid) == 0)) || 
            (newVal == null && this.roomid == null && roomid_is_initialized)) {
            return; 
        } 
        this.roomid = newVal; 
        roomid_is_modified = true; 
        roomid_is_initialized = true; 
    }

    /**
     * Setter method for roomid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to roomid
     */
    public void setRoomid(int newVal) {
        setRoomid(new Integer(newVal));
    }

    /**
     * Determines if the roomid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomidModified() {
        return roomid_is_modified; 
    }

    /**
     * Determines if the roomid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomidInitialized() {
        return roomid_is_initialized; 
    }

    /**
     * Getter method for houseunitid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.houseunitid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of houseunitid
     */
    public Integer getHouseunitid()
    {
        return houseunitid; 
    }

    /**
     * Setter method for houseunitid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to houseunitid
     */
    public void setHouseunitid(Integer newVal) {
        if ((newVal != null && this.houseunitid != null && (newVal.compareTo(this.houseunitid) == 0)) || 
            (newVal == null && this.houseunitid == null && houseunitid_is_initialized)) {
            return; 
        } 
        this.houseunitid = newVal; 
        houseunitid_is_modified = true; 
        houseunitid_is_initialized = true; 
    }

    /**
     * Setter method for houseunitid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to houseunitid
     */
    public void setHouseunitid(int newVal) {
        setHouseunitid(new Integer(newVal));
    }

    /**
     * Determines if the houseunitid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isHouseunitidModified() {
        return houseunitid_is_modified; 
    }

    /**
     * Determines if the houseunitid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isHouseunitidInitialized() {
        return houseunitid_is_initialized; 
    }

    /**
     * Getter method for blockstart.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.blockstart
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of blockstart
     */
    public java.sql.Timestamp getBlockstart()
    {
        return blockstart; 
    }

    /**
     * Setter method for blockstart.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to blockstart
     */
    public void setBlockstart(java.sql.Timestamp newVal) {
        if ((newVal != null && this.blockstart != null && (newVal.compareTo(this.blockstart) == 0)) || 
            (newVal == null && this.blockstart == null && blockstart_is_initialized)) {
            return; 
        } 
        this.blockstart = newVal; 
        blockstart_is_modified = true; 
        blockstart_is_initialized = true; 
    }

    /**
     * Setter method for blockstart.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to blockstart
     */
    public void setBlockstart(long newVal) {
        setBlockstart(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the blockstart has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBlockstartModified() {
        return blockstart_is_modified; 
    }

    /**
     * Determines if the blockstart has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBlockstartInitialized() {
        return blockstart_is_initialized; 
    }

    /**
     * Getter method for blockend.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.blockend
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of blockend
     */
    public java.sql.Timestamp getBlockend()
    {
        return blockend; 
    }

    /**
     * Setter method for blockend.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to blockend
     */
    public void setBlockend(java.sql.Timestamp newVal) {
        if ((newVal != null && this.blockend != null && (newVal.compareTo(this.blockend) == 0)) || 
            (newVal == null && this.blockend == null && blockend_is_initialized)) {
            return; 
        } 
        this.blockend = newVal; 
        blockend_is_modified = true; 
        blockend_is_initialized = true; 
    }

    /**
     * Setter method for blockend.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to blockend
     */
    public void setBlockend(long newVal) {
        setBlockend(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the blockend has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBlockendModified() {
        return blockend_is_modified; 
    }

    /**
     * Determines if the blockend has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBlockendInitialized() {
        return blockend_is_initialized; 
    }

    /**
     * Getter method for priority.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.priority
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of priority
     */
    public Integer getPriority()
    {
        return priority; 
    }

    /**
     * Setter method for priority.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to priority
     */
    public void setPriority(Integer newVal) {
        if ((newVal != null && this.priority != null && (newVal.compareTo(this.priority) == 0)) || 
            (newVal == null && this.priority == null && priority_is_initialized)) {
            return; 
        } 
        this.priority = newVal; 
        priority_is_modified = true; 
        priority_is_initialized = true; 
    }

    /**
     * Setter method for priority.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to priority
     */
    public void setPriority(int newVal) {
        setPriority(new Integer(newVal));
    }

    /**
     * Determines if the priority has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPriorityModified() {
        return priority_is_modified; 
    }

    /**
     * Determines if the priority has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPriorityInitialized() {
        return priority_is_initialized; 
    }

    /**
     * Getter method for assignedtoid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.assignedtoid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of assignedtoid
     */
    public Integer getAssignedtoid()
    {
        return assignedtoid; 
    }

    /**
     * Setter method for assignedtoid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to assignedtoid
     */
    public void setAssignedtoid(Integer newVal) {
        if ((newVal != null && this.assignedtoid != null && (newVal.compareTo(this.assignedtoid) == 0)) || 
            (newVal == null && this.assignedtoid == null && assignedtoid_is_initialized)) {
            return; 
        } 
        this.assignedtoid = newVal; 
        assignedtoid_is_modified = true; 
        assignedtoid_is_initialized = true; 
    }

    /**
     * Setter method for assignedtoid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to assignedtoid
     */
    public void setAssignedtoid(int newVal) {
        setAssignedtoid(new Integer(newVal));
    }

    /**
     * Determines if the assignedtoid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAssignedtoidModified() {
        return assignedtoid_is_modified; 
    }

    /**
     * Determines if the assignedtoid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAssignedtoidInitialized() {
        return assignedtoid_is_initialized; 
    }

    /**
     * Getter method for orderstatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.orderstatus
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of orderstatus
     */
    public Integer getOrderstatus()
    {
        return orderstatus; 
    }

    /**
     * Setter method for orderstatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to orderstatus
     */
    public void setOrderstatus(Integer newVal) {
        if ((newVal != null && this.orderstatus != null && (newVal.compareTo(this.orderstatus) == 0)) || 
            (newVal == null && this.orderstatus == null && orderstatus_is_initialized)) {
            return; 
        } 
        this.orderstatus = newVal; 
        orderstatus_is_modified = true; 
        orderstatus_is_initialized = true; 
    }

    /**
     * Setter method for orderstatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to orderstatus
     */
    public void setOrderstatus(int newVal) {
        setOrderstatus(new Integer(newVal));
    }

    /**
     * Determines if the orderstatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOrderstatusModified() {
        return orderstatus_is_modified; 
    }

    /**
     * Determines if the orderstatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOrderstatusInitialized() {
        return orderstatus_is_initialized; 
    }

    /**
     * Getter method for deadline.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.deadline
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of deadline
     */
    public java.sql.Timestamp getDeadline()
    {
        return deadline; 
    }

    /**
     * Setter method for deadline.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to deadline
     */
    public void setDeadline(java.sql.Timestamp newVal) {
        if ((newVal != null && this.deadline != null && (newVal.compareTo(this.deadline) == 0)) || 
            (newVal == null && this.deadline == null && deadline_is_initialized)) {
            return; 
        } 
        this.deadline = newVal; 
        deadline_is_modified = true; 
        deadline_is_initialized = true; 
    }

    /**
     * Setter method for deadline.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deadline
     */
    public void setDeadline(long newVal) {
        setDeadline(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the deadline has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeadlineModified() {
        return deadline_is_modified; 
    }

    /**
     * Determines if the deadline has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeadlineInitialized() {
        return deadline_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.regdate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.regbyid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for updatedon.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.updatedon
     * <li>column size: 35
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of updatedon
     */
    public java.sql.Timestamp getUpdatedon()
    {
        return updatedon; 
    }

    /**
     * Setter method for updatedon.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to updatedon
     */
    public void setUpdatedon(java.sql.Timestamp newVal) {
        if ((newVal != null && this.updatedon != null && (newVal.compareTo(this.updatedon) == 0)) || 
            (newVal == null && this.updatedon == null && updatedon_is_initialized)) {
            return; 
        } 
        this.updatedon = newVal; 
        updatedon_is_modified = true; 
        updatedon_is_initialized = true; 
    }

    /**
     * Setter method for updatedon.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to updatedon
     */
    public void setUpdatedon(long newVal) {
        setUpdatedon(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the updatedon has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUpdatedonModified() {
        return updatedon_is_modified; 
    }

    /**
     * Determines if the updatedon has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUpdatedonInitialized() {
        return updatedon_is_initialized; 
    }

    /**
     * Getter method for note.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.note
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of note
     */
    public String getNote()
    {
        return note; 
    }

    /**
     * Setter method for note.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to note
     */
    public void setNote(String newVal) {
        if ((newVal != null && this.note != null && (newVal.compareTo(this.note) == 0)) || 
            (newVal == null && this.note == null && note_is_initialized)) {
            return; 
        } 
        this.note = newVal; 
        note_is_modified = true; 
        note_is_initialized = true; 
    }

    /**
     * Determines if the note has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoteModified() {
        return note_is_modified; 
    }

    /**
     * Determines if the note has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoteInitialized() {
        return note_is_initialized; 
    }

    /**
     * Getter method for rname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.rname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of rname
     */
    public String getRname()
    {
        return rname; 
    }

    /**
     * Setter method for rname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rname
     */
    public void setRname(String newVal) {
        if ((newVal != null && this.rname != null && (newVal.compareTo(this.rname) == 0)) || 
            (newVal == null && this.rname == null && rname_is_initialized)) {
            return; 
        } 
        this.rname = newVal; 
        rname_is_modified = true; 
        rname_is_initialized = true; 
    }

    /**
     * Determines if the rname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRnameModified() {
        return rname_is_modified; 
    }

    /**
     * Determines if the rname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRnameInitialized() {
        return rname_is_initialized; 
    }

    /**
     * Getter method for code.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.code
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of code
     */
    public String getCode()
    {
        return code; 
    }

    /**
     * Setter method for code.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to code
     */
    public void setCode(String newVal) {
        if ((newVal != null && this.code != null && (newVal.compareTo(this.code) == 0)) || 
            (newVal == null && this.code == null && code_is_initialized)) {
            return; 
        } 
        this.code = newVal; 
        code_is_modified = true; 
        code_is_initialized = true; 
    }

    /**
     * Determines if the code has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodeModified() {
        return code_is_modified; 
    }

    /**
     * Determines if the code has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodeInitialized() {
        return code_is_initialized; 
    }

    /**
     * Getter method for hname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.hname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of hname
     */
    public String getHname()
    {
        return hname; 
    }

    /**
     * Setter method for hname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to hname
     */
    public void setHname(String newVal) {
        if ((newVal != null && this.hname != null && (newVal.compareTo(this.hname) == 0)) || 
            (newVal == null && this.hname == null && hname_is_initialized)) {
            return; 
        } 
        this.hname = newVal; 
        hname_is_modified = true; 
        hname_is_initialized = true; 
    }

    /**
     * Determines if the hname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isHnameModified() {
        return hname_is_modified; 
    }

    /**
     * Determines if the hname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isHnameInitialized() {
        return hname_is_initialized; 
    }

    /**
     * Getter method for assignedto.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_workorder.assignedto
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of assignedto
     */
    public String getAssignedto()
    {
        return assignedto; 
    }

    /**
     * Setter method for assignedto.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to assignedto
     */
    public void setAssignedto(String newVal) {
        if ((newVal != null && this.assignedto != null && (newVal.compareTo(this.assignedto) == 0)) || 
            (newVal == null && this.assignedto == null && assignedto_is_initialized)) {
            return; 
        } 
        this.assignedto = newVal; 
        assignedto_is_modified = true; 
        assignedto_is_initialized = true; 
    }

    /**
     * Determines if the assignedto has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAssignedtoModified() {
        return assignedto_is_modified; 
    }

    /**
     * Determines if the assignedto has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAssignedtoInitialized() {
        return assignedto_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return workorderid_is_modified || 
		num_is_modified || 
		description_is_modified || 
		category_is_modified || 
		roomid_is_modified || 
		houseunitid_is_modified || 
		blockstart_is_modified || 
		blockend_is_modified || 
		priority_is_modified || 
		assignedtoid_is_modified || 
		orderstatus_is_modified || 
		deadline_is_modified || 
		regdate_is_modified || 
		regbyid_is_modified || 
		updatedon_is_modified || 
		note_is_modified || 
		rname_is_modified || 
		code_is_modified || 
		hname_is_modified || 
		assignedto_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        workorderid_is_modified = false;
        num_is_modified = false;
        description_is_modified = false;
        category_is_modified = false;
        roomid_is_modified = false;
        houseunitid_is_modified = false;
        blockstart_is_modified = false;
        blockend_is_modified = false;
        priority_is_modified = false;
        assignedtoid_is_modified = false;
        orderstatus_is_modified = false;
        deadline_is_modified = false;
        regdate_is_modified = false;
        regbyid_is_modified = false;
        updatedon_is_modified = false;
        note_is_modified = false;
        rname_is_modified = false;
        code_is_modified = false;
        hname_is_modified = false;
        assignedto_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VWorkorderBean bean) {
        setWorkorderid(bean.getWorkorderid());
        setNum(bean.getNum());
        setDescription(bean.getDescription());
        setCategory(bean.getCategory());
        setRoomid(bean.getRoomid());
        setHouseunitid(bean.getHouseunitid());
        setBlockstart(bean.getBlockstart());
        setBlockend(bean.getBlockend());
        setPriority(bean.getPriority());
        setAssignedtoid(bean.getAssignedtoid());
        setOrderstatus(bean.getOrderstatus());
        setDeadline(bean.getDeadline());
        setRegdate(bean.getRegdate());
        setRegbyid(bean.getRegbyid());
        setUpdatedon(bean.getUpdatedon());
        setNote(bean.getNote());
        setRname(bean.getRname());
        setCode(bean.getCode());
        setHname(bean.getHname());
        setAssignedto(bean.getAssignedto());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[v_workorder] "
                 + "\n - v_workorder.workorderid = " + (workorderid_is_initialized ? ("[" + (workorderid == null ? null : workorderid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.num = " + (num_is_initialized ? ("[" + (num == null ? null : num.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.description = " + (description_is_initialized ? ("[" + (description == null ? null : description.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.category = " + (category_is_initialized ? ("[" + (category == null ? null : category.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.roomid = " + (roomid_is_initialized ? ("[" + (roomid == null ? null : roomid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.houseunitid = " + (houseunitid_is_initialized ? ("[" + (houseunitid == null ? null : houseunitid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.blockstart = " + (blockstart_is_initialized ? ("[" + (blockstart == null ? null : blockstart.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.blockend = " + (blockend_is_initialized ? ("[" + (blockend == null ? null : blockend.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.priority = " + (priority_is_initialized ? ("[" + (priority == null ? null : priority.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.assignedtoid = " + (assignedtoid_is_initialized ? ("[" + (assignedtoid == null ? null : assignedtoid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.orderstatus = " + (orderstatus_is_initialized ? ("[" + (orderstatus == null ? null : orderstatus.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.deadline = " + (deadline_is_initialized ? ("[" + (deadline == null ? null : deadline.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.updatedon = " + (updatedon_is_initialized ? ("[" + (updatedon == null ? null : updatedon.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.note = " + (note_is_initialized ? ("[" + (note == null ? null : note.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.rname = " + (rname_is_initialized ? ("[" + (rname == null ? null : rname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.code = " + (code_is_initialized ? ("[" + (code == null ? null : code.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.hname = " + (hname_is_initialized ? ("[" + (hname == null ? null : hname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_workorder.assignedto = " + (assignedto_is_initialized ? ("[" + (assignedto == null ? null : assignedto.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
