// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the tarifftype table.
 */
public class TarifftypeManager
// extends+ 

// extends- 

{

    /**
     * Column tarifftypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TARIFFTYPEID = 0;
    public static final int TYPE_TARIFFTYPEID = Types.INTEGER;
    public static final String NAME_TARIFFTYPEID = "tarifftypeid";

    /**
     * Column nickname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NICKNAME = 1;
    public static final int TYPE_NICKNAME = Types.VARCHAR;
    public static final String NAME_NICKNAME = "nickname";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 2;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column maxadolt of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_MAXADOLT = 3;
    public static final int TYPE_MAXADOLT = Types.INTEGER;
    public static final String NAME_MAXADOLT = "maxadolt";

    /**
     * Column minnight of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_MINNIGHT = 4;
    public static final int TYPE_MINNIGHT = Types.INTEGER;
    public static final String NAME_MINNIGHT = "minnight";

    /**
     * Column ord of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ORD = 5;
    public static final int TYPE_ORD = Types.INTEGER;
    public static final String NAME_ORD = "ord";

    /**
     * Column numnights of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_NUMNIGHTS = 6;
    public static final int TYPE_NUMNIGHTS = Types.INTEGER;
    public static final String NAME_NUMNIGHTS = "numnights";

    /**
     * Column status of type Types.BIT mapped to Boolean.
     */
    public static final int ID_STATUS = 7;
    public static final int TYPE_STATUS = Types.BIT;
    public static final String NAME_STATUS = "status";


    private static final String TABLE_NAME = "tarifftype";

    /**
     * Create an array of type string containing all the fields of the tarifftype table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "tarifftype.tarifftypeid"
        ,"tarifftype.nickname"
        ,"tarifftype.name"
        ,"tarifftype.maxadolt"
        ,"tarifftype.minnight"
        ,"tarifftype.ord"
        ,"tarifftype.numnights"
        ,"tarifftype.status"
    };

    /**
     * Field that contains the comma separated fields of the tarifftype table.
     */
    private static final String ALL_FIELDS = "tarifftype.tarifftypeid"
                            + ",tarifftype.nickname"
                            + ",tarifftype.name"
                            + ",tarifftype.maxadolt"
                            + ",tarifftype.minnight"
                            + ",tarifftype.ord"
                            + ",tarifftype.numnights"
                            + ",tarifftype.status";

    private static TarifftypeManager singleton = new TarifftypeManager();

    /**
     * Get the TarifftypeManager singleton.
     *
     * @return TarifftypeManager 
     */
    synchronized public static TarifftypeManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own TarifftypeManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(TarifftypeManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new TarifftypeBean instance.
     *
     * @return the new TarifftypeBean 
     */
    public TarifftypeBean createTarifftypeBean()
    {
        return new TarifftypeBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a TarifftypeBean from the tarifftype using its key fields.
     *
     * @return a unique TarifftypeBean 
     */
    //12
    public TarifftypeBean loadByPrimaryKey(Integer tarifftypeid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM tarifftype WHERE tarifftype.tarifftypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, tarifftypeid);
            TarifftypeBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer tarifftypeid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from tarifftype WHERE tarifftype.tarifftypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, tarifftypeid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from tarifftype.
     *
     * @return an array of TarifftypeManager pObject
     */
    //38
    public TarifftypeBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM tarifftype",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of TarifftypeBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting TarifftypeBean table 
     */
    //49
    public TarifftypeBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of TarifftypeBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting TarifftypeBean table 
     */
    //51
    public TarifftypeBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from tarifftype " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from tarifftype ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (TarifftypeBean[])v.toArray(new TarifftypeBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from tarifftype table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the tarifftype table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM tarifftype " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the TarifftypeBean pObject into the database.
     *
     * @param pObject the TarifftypeBean pObject to be saved
     */
    //100
    public TarifftypeBean save(TarifftypeBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isTarifftypeidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('tarifftypeid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setTarifftypeid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into tarifftype (");
    
                if (pObject.isTarifftypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("tarifftypeid");
                    _dirtyCount++;
                }

                if (pObject.isNicknameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("nickname");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isMaxadoltModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("maxadolt");
                    _dirtyCount++;
                }

                if (pObject.isMinnightModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("minnight");
                    _dirtyCount++;
                }

                if (pObject.isOrdModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ord");
                    _dirtyCount++;
                }

                if (pObject.isNumnightsModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("numnights");
                    _dirtyCount++;
                }

                if (pObject.isStatusModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("status");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isTarifftypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTarifftypeid());
                }
    
                if (pObject.isNicknameModified()) {
                    ps.setString(++_dirtyCount, pObject.getNickname());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isMaxadoltModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getMaxadolt());
                }
    
                if (pObject.isMinnightModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getMinnight());
                }
    
                if (pObject.isOrdModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
                }
    
                if (pObject.isNumnightsModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getNumnights());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE tarifftype SET ");
                boolean useComma=false;

                if (pObject.isTarifftypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("tarifftypeid").append("=?");
                }

                if (pObject.isNicknameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("nickname").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isMaxadoltModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("maxadolt").append("=?");
                }

                if (pObject.isMinnightModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("minnight").append("=?");
                }

                if (pObject.isOrdModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ord").append("=?");
                }

                if (pObject.isNumnightsModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("numnights").append("=?");
                }

                if (pObject.isStatusModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("status").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("tarifftype.tarifftypeid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isTarifftypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getTarifftypeid());
                }

                if (pObject.isNicknameModified()) {
                      ps.setString(++_dirtyCount, pObject.getNickname());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isMaxadoltModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getMaxadolt());
                }

                if (pObject.isMinnightModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getMinnight());
                }

                if (pObject.isOrdModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
                }

                if (pObject.isNumnightsModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getNumnights());
                }

                if (pObject.isStatusModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTarifftypeid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of TarifftypeBean pObjects into the database.
     *
     * @param pObjects the TarifftypeBean pObject table to be saved
     * @return the saved TarifftypeBean array.
     */
    //65
    public TarifftypeBean[] save(TarifftypeBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique TarifftypeBean pObject from a template one giving a c
     *
     * @param pObject the TarifftypeBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public TarifftypeBean loadUniqueUsingTemplate(TarifftypeBean pObject) throws SQLException
    {
         TarifftypeBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of TarifftypeBean from a template one.
     *
     * @param pObject the TarifftypeBean template to look for
     * @return all the TarifftypeBean matching the template
     */
    //88
    public TarifftypeBean[] loadUsingTemplate(TarifftypeBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from tarifftype WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isTarifftypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tarifftypeid= ?");
             }
    
             if (pObject.isNicknameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nickname= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isMaxadoltModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("maxadolt= ?");
             }
    
             if (pObject.isMinnightModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("minnight= ?");
             }
    
             if (pObject.isOrdModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ord= ?");
             }
    
             if (pObject.isNumnightsModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("numnights= ?");
             }
    
             if (pObject.isStatusModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isTarifftypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getTarifftypeid());
             }
    
             if (pObject.isNicknameModified()) {
                 ps.setString(++_dirtyCount, pObject.getNickname());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isMaxadoltModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getMaxadolt());
             }
    
             if (pObject.isMinnightModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getMinnight());
             }
    
             if (pObject.isOrdModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
             }
    
             if (pObject.isNumnightsModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getNumnights());
             }
    
             if (pObject.isStatusModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getStatus());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a TarifftypeBean template.
     *
     * @param pObject the TarifftypeBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(TarifftypeBean pObject) throws SQLException
    {
        if (pObject.isTarifftypeidInitialized())
            return deleteByPrimaryKey(pObject.getTarifftypeid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM tarifftype WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isTarifftypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("tarifftypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNicknameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("nickname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMaxadoltInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("maxadolt").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMinnightInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("minnight").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isOrdInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ord").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNumnightsInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("numnights").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStatusInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("status").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isTarifftypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTarifftypeid());
            }
    
            if (pObject.isNicknameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNickname());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isMaxadoltInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getMaxadolt());
            }
    
            if (pObject.isMinnightInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getMinnight());
            }
    
            if (pObject.isOrdInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
            }
    
            if (pObject.isNumnightsInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getNumnights());
            }
    
            if (pObject.isStatusInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getStatus());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of AgentBean using the relation table Tariff given a TarifftypeBean object.
     *
     * @param pObject the TarifftypeBean pObject to be used
     * @return an array of AgentBean 
     */
    // MANY TO MANY
    public AgentBean[] loadAgentViaTariff(TarifftypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        agent,tariff"
                         + " WHERE "    
                         + "     tariff.tarifftypeid = ?"
                         + " AND tariff.sourceid = agent.agentid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getTarifftypeid());
             return AgentManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RoomtypeBean using the relation table Tariff given a TarifftypeBean object.
     *
     * @param pObject the TarifftypeBean pObject to be used
     * @return an array of RoomtypeBean 
     */
    // MANY TO MANY
    public RoomtypeBean[] loadRoomtypeViaTariff(TarifftypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        roomtype,tariff"
                         + " WHERE "    
                         + "     tariff.tarifftypeid = ?"
                         + " AND tariff.roomtypeid = roomtype.roomtypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getTarifftypeid());
             return RoomtypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SeasonBean using the relation table Tariff given a TarifftypeBean object.
     *
     * @param pObject the TarifftypeBean pObject to be used
     * @return an array of SeasonBean 
     */
    // MANY TO MANY
    public SeasonBean[] loadSeasonViaTariff(TarifftypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        season,tariff"
                         + " WHERE "    
                         + "     tariff.tarifftypeid = ?"
                         + " AND tariff.seasonid = season.seasonid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getTarifftypeid());
             return SeasonManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RoomtypeBean using the relation table Tariffroomtype given a TarifftypeBean object.
     *
     * @param pObject the TarifftypeBean pObject to be used
     * @return an array of RoomtypeBean 
     */
    // MANY TO MANY
    public RoomtypeBean[] loadRoomtypeViaTariffroomtype(TarifftypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        roomtype,tariffroomtype"
                         + " WHERE "    
                         + "     tariffroomtype.tarifftypeid = ?"
                         + " AND tariffroomtype.roomtypeid = roomtype.roomtypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getTarifftypeid());
             return RoomtypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table tarifftype.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table tarifftype with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from tarifftype " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table tarifftype with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific TarifftypeBean pObject given a c
     *
     * @param pObject the TarifftypeBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(TarifftypeBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from tarifftype WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isTarifftypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tarifftypeid= ?");
                }
    
                if (pObject.isNicknameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nickname= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isMaxadoltModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("maxadolt= ?");
                }
    
                if (pObject.isMinnightModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("minnight= ?");
                }
    
                if (pObject.isOrdModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ord= ?");
                }
    
                if (pObject.isNumnightsModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("numnights= ?");
                }
    
                if (pObject.isStatusModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isTarifftypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTarifftypeid());
                }
    
                if (pObject.isNicknameModified()) {
                    ps.setString(++_dirtyCount, pObject.getNickname());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isMaxadoltModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getMaxadolt());
                }
    
                if (pObject.isMinnightModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getMinnight());
                }
    
                if (pObject.isOrdModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
                }
    
                if (pObject.isNumnightsModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getNumnights());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the tarifftype on a TarifftypeBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting TarifftypeBean pObject
     */
    //72
    public TarifftypeBean decodeRow(ResultSet rs) throws SQLException
    {
        TarifftypeBean pObject = createTarifftypeBean();
        pObject.setTarifftypeid(Manager.getInteger(rs, 1));
        pObject.setNickname(rs.getString(2));
        pObject.setName(rs.getString(3));
        pObject.setMaxadolt(Manager.getInteger(rs, 4));
        pObject.setMinnight(Manager.getInteger(rs, 5));
        pObject.setOrd(Manager.getInteger(rs, 6));
        pObject.setNumnights(Manager.getInteger(rs, 7));
        pObject.setStatus(Manager.getBoolean(rs, 8));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the tarifftype table on a TarifftypeBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting TarifftypeBean pObject
     */
    //73
    public TarifftypeBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        TarifftypeBean pObject = createTarifftypeBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_TARIFFTYPEID:
                    ++pos;
                    pObject.setTarifftypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_NICKNAME:
                    ++pos;
                    pObject.setNickname(rs.getString(pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_MAXADOLT:
                    ++pos;
                    pObject.setMaxadolt(Manager.getInteger(rs, pos));
                    break;
                case ID_MINNIGHT:
                    ++pos;
                    pObject.setMinnight(Manager.getInteger(rs, pos));
                    break;
                case ID_ORD:
                    ++pos;
                    pObject.setOrd(Manager.getInteger(rs, pos));
                    break;
                case ID_NUMNIGHTS:
                    ++pos;
                    pObject.setNumnights(Manager.getInteger(rs, pos));
                    break;
                case ID_STATUS:
                    ++pos;
                    pObject.setStatus(Manager.getBoolean(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of TarifftypeBean 
     */
    //41
    public TarifftypeBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of TarifftypeBean 
     */
    public TarifftypeBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (TarifftypeBean[])v.toArray(new TarifftypeBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private TarifftypeListener listener = null;

    /**
     * Registers a unique TarifftypeListener listener.
     */
    //66.5
    public void registerListener(TarifftypeListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the TarifftypeBean pObject.
     *
     * @param pObject the TarifftypeBean pObject to be saved
     */
    //67
    void beforeInsert(TarifftypeBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the TarifftypeBean pObject.
     *
     * @param pObject the TarifftypeBean pObject to be saved
     */
    //68
    void afterInsert(TarifftypeBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the TarifftypeBean pObject.
     *
     * @param pObject the TarifftypeBean pObject to be updated
     */
    //69
    void beforeUpdate(TarifftypeBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the TarifftypeBean pObject.
     *
     * @param pObject the TarifftypeBean pObject to be updated
     */
    //70
    void afterUpdate(TarifftypeBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
