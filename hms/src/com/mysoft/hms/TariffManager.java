// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the tariff table.
 */
public class TariffManager
// extends+ 

// extends- 

{

    /**
     * Column tariffid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_TARIFFID = 0;
    public static final int TYPE_TARIFFID = Types.BIGINT;
    public static final String NAME_TARIFFID = "tariffid";

    /**
     * Column roomtypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ROOMTYPEID = 1;
    public static final int TYPE_ROOMTYPEID = Types.INTEGER;
    public static final String NAME_ROOMTYPEID = "roomtypeid";

    /**
     * Column tarifftypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TARIFFTYPEID = 2;
    public static final int TYPE_TARIFFTYPEID = Types.INTEGER;
    public static final String NAME_TARIFFTYPEID = "tarifftypeid";

    /**
     * Column seasonid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SEASONID = 3;
    public static final int TYPE_SEASONID = Types.INTEGER;
    public static final String NAME_SEASONID = "seasonid";

    /**
     * Column sourceid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_SOURCEID = 4;
    public static final int TYPE_SOURCEID = Types.BIGINT;
    public static final String NAME_SOURCEID = "sourceid";

    /**
     * Column amount of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_AMOUNT = 5;
    public static final int TYPE_AMOUNT = Types.DOUBLE;
    public static final String NAME_AMOUNT = "amount";

    /**
     * Column amountadult of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_AMOUNTADULT = 6;
    public static final int TYPE_AMOUNTADULT = Types.DOUBLE;
    public static final String NAME_AMOUNTADULT = "amountadult";

    /**
     * Column amountchild of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_AMOUNTCHILD = 7;
    public static final int TYPE_AMOUNTCHILD = Types.DOUBLE;
    public static final String NAME_AMOUNTCHILD = "amountchild";


    private static final String TABLE_NAME = "tariff";

    /**
     * Create an array of type string containing all the fields of the tariff table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "tariff.tariffid"
        ,"tariff.roomtypeid"
        ,"tariff.tarifftypeid"
        ,"tariff.seasonid"
        ,"tariff.sourceid"
        ,"tariff.amount"
        ,"tariff.amountadult"
        ,"tariff.amountchild"
    };

    /**
     * Field that contains the comma separated fields of the tariff table.
     */
    private static final String ALL_FIELDS = "tariff.tariffid"
                            + ",tariff.roomtypeid"
                            + ",tariff.tarifftypeid"
                            + ",tariff.seasonid"
                            + ",tariff.sourceid"
                            + ",tariff.amount"
                            + ",tariff.amountadult"
                            + ",tariff.amountchild";

    private static TariffManager singleton = new TariffManager();

    /**
     * Get the TariffManager singleton.
     *
     * @return TariffManager 
     */
    synchronized public static TariffManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own TariffManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(TariffManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new TariffBean instance.
     *
     * @return the new TariffBean 
     */
    public TariffBean createTariffBean()
    {
        return new TariffBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a TariffBean from the tariff using its key fields.
     *
     * @return a unique TariffBean 
     */
    //12
    public TariffBean loadByPrimaryKey(Long tariffid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM tariff WHERE tariff.tariffid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, tariffid);
            TariffBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long tariffid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from tariff WHERE tariff.tariffid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, tariffid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads TariffBean array from the tariff table using its sourceid field.
     *
     * @return an array of TariffBean 
     */
    // LOAD BY IMPORTED KEY
    public TariffBean[] loadBySourceid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM tariff WHERE sourceid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the tariff table by sourceid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySourceid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM tariff WHERE sourceid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads TariffBean array from the tariff table using its roomtypeid field.
     *
     * @return an array of TariffBean 
     */
    // LOAD BY IMPORTED KEY
    public TariffBean[] loadByRoomtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM tariff WHERE roomtypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the tariff table by roomtypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRoomtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM tariff WHERE roomtypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads TariffBean array from the tariff table using its seasonid field.
     *
     * @return an array of TariffBean 
     */
    // LOAD BY IMPORTED KEY
    public TariffBean[] loadBySeasonid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM tariff WHERE seasonid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the tariff table by seasonid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySeasonid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM tariff WHERE seasonid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads TariffBean array from the tariff table using its tarifftypeid field.
     *
     * @return an array of TariffBean 
     */
    // LOAD BY IMPORTED KEY
    public TariffBean[] loadByTarifftypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM tariff WHERE tarifftypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the tariff table by tarifftypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByTarifftypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM tariff WHERE tarifftypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the AgentBean object from the tariff.agentid field.
     *
     * @param pObject the TariffBean 
     * @return the associated AgentBean pObject
     */
    // GET IMPORTED
    public AgentBean getAgentBean(TariffBean pObject) throws SQLException
    {
        AgentBean other = AgentManager.getInstance().createAgentBean();
        other.setAgentid(pObject.getSourceid());
        return AgentManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TariffBean object to the AgentBean object.
     *
     * @param pObject the TariffBean object to use
     * @param pObjectToBeSet the AgentBean object to associate to the TariffBean 
     * @return the associated AgentBean pObject
     */
    // SET IMPORTED
    public TariffBean setAgentBean(TariffBean pObject,AgentBean pObjectToBeSet)
    {
        pObject.setSourceid(pObjectToBeSet.getAgentid());
        return pObject;
    }

    /**
     * Retrieves the RoomtypeBean object from the tariff.roomtypeid field.
     *
     * @param pObject the TariffBean 
     * @return the associated RoomtypeBean pObject
     */
    // GET IMPORTED
    public RoomtypeBean getRoomtypeBean(TariffBean pObject) throws SQLException
    {
        RoomtypeBean other = RoomtypeManager.getInstance().createRoomtypeBean();
        other.setRoomtypeid(pObject.getRoomtypeid());
        return RoomtypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TariffBean object to the RoomtypeBean object.
     *
     * @param pObject the TariffBean object to use
     * @param pObjectToBeSet the RoomtypeBean object to associate to the TariffBean 
     * @return the associated RoomtypeBean pObject
     */
    // SET IMPORTED
    public TariffBean setRoomtypeBean(TariffBean pObject,RoomtypeBean pObjectToBeSet)
    {
        pObject.setRoomtypeid(pObjectToBeSet.getRoomtypeid());
        return pObject;
    }

    /**
     * Retrieves the SeasonBean object from the tariff.seasonid field.
     *
     * @param pObject the TariffBean 
     * @return the associated SeasonBean pObject
     */
    // GET IMPORTED
    public SeasonBean getSeasonBean(TariffBean pObject) throws SQLException
    {
        SeasonBean other = SeasonManager.getInstance().createSeasonBean();
        other.setSeasonid(pObject.getSeasonid());
        return SeasonManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TariffBean object to the SeasonBean object.
     *
     * @param pObject the TariffBean object to use
     * @param pObjectToBeSet the SeasonBean object to associate to the TariffBean 
     * @return the associated SeasonBean pObject
     */
    // SET IMPORTED
    public TariffBean setSeasonBean(TariffBean pObject,SeasonBean pObjectToBeSet)
    {
        pObject.setSeasonid(pObjectToBeSet.getSeasonid());
        return pObject;
    }

    /**
     * Retrieves the TarifftypeBean object from the tariff.tarifftypeid field.
     *
     * @param pObject the TariffBean 
     * @return the associated TarifftypeBean pObject
     */
    // GET IMPORTED
    public TarifftypeBean getTarifftypeBean(TariffBean pObject) throws SQLException
    {
        TarifftypeBean other = TarifftypeManager.getInstance().createTarifftypeBean();
        other.setTarifftypeid(pObject.getTarifftypeid());
        return TarifftypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TariffBean object to the TarifftypeBean object.
     *
     * @param pObject the TariffBean object to use
     * @param pObjectToBeSet the TarifftypeBean object to associate to the TariffBean 
     * @return the associated TarifftypeBean pObject
     */
    // SET IMPORTED
    public TariffBean setTarifftypeBean(TariffBean pObject,TarifftypeBean pObjectToBeSet)
    {
        pObject.setTarifftypeid(pObjectToBeSet.getTarifftypeid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from tariff.
     *
     * @return an array of TariffManager pObject
     */
    //38
    public TariffBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM tariff",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of TariffBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting TariffBean table 
     */
    //49
    public TariffBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of TariffBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting TariffBean table 
     */
    //51
    public TariffBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from tariff " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from tariff ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (TariffBean[])v.toArray(new TariffBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from tariff table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the tariff table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM tariff " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the TariffBean pObject into the database.
     *
     * @param pObject the TariffBean pObject to be saved
     */
    //100
    public TariffBean save(TariffBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isTariffidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('tariffid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setTariffid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into tariff (");
    
                if (pObject.isTariffidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("tariffid");
                    _dirtyCount++;
                }

                if (pObject.isRoomtypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roomtypeid");
                    _dirtyCount++;
                }

                if (pObject.isTarifftypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("tarifftypeid");
                    _dirtyCount++;
                }

                if (pObject.isSeasonidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("seasonid");
                    _dirtyCount++;
                }

                if (pObject.isSourceidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sourceid");
                    _dirtyCount++;
                }

                if (pObject.isAmountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("amount");
                    _dirtyCount++;
                }

                if (pObject.isAmountadultModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("amountadult");
                    _dirtyCount++;
                }

                if (pObject.isAmountchildModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("amountchild");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isTariffidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getTariffid());
                }
    
                if (pObject.isRoomtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
                }
    
                if (pObject.isTarifftypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTarifftypeid());
                }
    
                if (pObject.isSeasonidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
                }
    
                if (pObject.isSourceidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSourceid());
                }
    
                if (pObject.isAmountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }
    
                if (pObject.isAmountadultModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountadult());
                }
    
                if (pObject.isAmountchildModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountchild());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE tariff SET ");
                boolean useComma=false;

                if (pObject.isTariffidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("tariffid").append("=?");
                }

                if (pObject.isRoomtypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roomtypeid").append("=?");
                }

                if (pObject.isTarifftypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("tarifftypeid").append("=?");
                }

                if (pObject.isSeasonidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("seasonid").append("=?");
                }

                if (pObject.isSourceidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sourceid").append("=?");
                }

                if (pObject.isAmountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("amount").append("=?");
                }

                if (pObject.isAmountadultModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("amountadult").append("=?");
                }

                if (pObject.isAmountchildModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("amountchild").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("tariff.tariffid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isTariffidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getTariffid());
                }

                if (pObject.isRoomtypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
                }

                if (pObject.isTarifftypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getTarifftypeid());
                }

                if (pObject.isSeasonidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
                }

                if (pObject.isSourceidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getSourceid());
                }

                if (pObject.isAmountModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }

                if (pObject.isAmountadultModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountadult());
                }

                if (pObject.isAmountchildModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountchild());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getTariffid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of TariffBean pObjects into the database.
     *
     * @param pObjects the TariffBean pObject table to be saved
     * @return the saved TariffBean array.
     */
    //65
    public TariffBean[] save(TariffBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique TariffBean pObject from a template one giving a c
     *
     * @param pObject the TariffBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public TariffBean loadUniqueUsingTemplate(TariffBean pObject) throws SQLException
    {
         TariffBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of TariffBean from a template one.
     *
     * @param pObject the TariffBean template to look for
     * @return all the TariffBean matching the template
     */
    //88
    public TariffBean[] loadUsingTemplate(TariffBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from tariff WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isTariffidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tariffid= ?");
             }
    
             if (pObject.isRoomtypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomtypeid= ?");
             }
    
             if (pObject.isTarifftypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tarifftypeid= ?");
             }
    
             if (pObject.isSeasonidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("seasonid= ?");
             }
    
             if (pObject.isSourceidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sourceid= ?");
             }
    
             if (pObject.isAmountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amount= ?");
             }
    
             if (pObject.isAmountadultModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amountadult= ?");
             }
    
             if (pObject.isAmountchildModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amountchild= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isTariffidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getTariffid());
             }
    
             if (pObject.isRoomtypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
             }
    
             if (pObject.isTarifftypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getTarifftypeid());
             }
    
             if (pObject.isSeasonidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
             }
    
             if (pObject.isSourceidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getSourceid());
             }
    
             if (pObject.isAmountModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
             }
    
             if (pObject.isAmountadultModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountadult());
             }
    
             if (pObject.isAmountchildModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountchild());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a TariffBean template.
     *
     * @param pObject the TariffBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(TariffBean pObject) throws SQLException
    {
        if (pObject.isTariffidInitialized())
            return deleteByPrimaryKey(pObject.getTariffid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM tariff WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isTariffidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("tariffid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRoomtypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roomtypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTarifftypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("tarifftypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSeasonidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("seasonid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSourceidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sourceid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAmountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("amount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAmountadultInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("amountadult").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAmountchildInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("amountchild").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isTariffidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getTariffid());
            }
    
            if (pObject.isRoomtypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
            }
    
            if (pObject.isTarifftypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTarifftypeid());
            }
    
            if (pObject.isSeasonidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
            }
    
            if (pObject.isSourceidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getSourceid());
            }
    
            if (pObject.isAmountInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
            }
    
            if (pObject.isAmountadultInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountadult());
            }
    
            if (pObject.isAmountchildInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountchild());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table tariff.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table tariff with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from tariff " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table tariff with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific TariffBean pObject given a c
     *
     * @param pObject the TariffBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(TariffBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from tariff WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isTariffidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tariffid= ?");
                }
    
                if (pObject.isRoomtypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomtypeid= ?");
                }
    
                if (pObject.isTarifftypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tarifftypeid= ?");
                }
    
                if (pObject.isSeasonidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("seasonid= ?");
                }
    
                if (pObject.isSourceidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sourceid= ?");
                }
    
                if (pObject.isAmountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amount= ?");
                }
    
                if (pObject.isAmountadultModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amountadult= ?");
                }
    
                if (pObject.isAmountchildModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amountchild= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isTariffidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getTariffid());
                }
    
                if (pObject.isRoomtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
                }
    
                if (pObject.isTarifftypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTarifftypeid());
                }
    
                if (pObject.isSeasonidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSeasonid());
                }
    
                if (pObject.isSourceidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSourceid());
                }
    
                if (pObject.isAmountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }
    
                if (pObject.isAmountadultModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountadult());
                }
    
                if (pObject.isAmountchildModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountchild());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the tariff on a TariffBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting TariffBean pObject
     */
    //72
    public TariffBean decodeRow(ResultSet rs) throws SQLException
    {
        TariffBean pObject = createTariffBean();
        pObject.setTariffid(Manager.getLong(rs, 1));
        pObject.setRoomtypeid(Manager.getInteger(rs, 2));
        pObject.setTarifftypeid(Manager.getInteger(rs, 3));
        pObject.setSeasonid(Manager.getInteger(rs, 4));
        pObject.setSourceid(Manager.getLong(rs, 5));
        pObject.setAmount(Manager.getDouble(rs, 6));
        pObject.setAmountadult(Manager.getDouble(rs, 7));
        pObject.setAmountchild(Manager.getDouble(rs, 8));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the tariff table on a TariffBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting TariffBean pObject
     */
    //73
    public TariffBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        TariffBean pObject = createTariffBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_TARIFFID:
                    ++pos;
                    pObject.setTariffid(Manager.getLong(rs, pos));
                    break;
                case ID_ROOMTYPEID:
                    ++pos;
                    pObject.setRoomtypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_TARIFFTYPEID:
                    ++pos;
                    pObject.setTarifftypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_SEASONID:
                    ++pos;
                    pObject.setSeasonid(Manager.getInteger(rs, pos));
                    break;
                case ID_SOURCEID:
                    ++pos;
                    pObject.setSourceid(Manager.getLong(rs, pos));
                    break;
                case ID_AMOUNT:
                    ++pos;
                    pObject.setAmount(Manager.getDouble(rs, pos));
                    break;
                case ID_AMOUNTADULT:
                    ++pos;
                    pObject.setAmountadult(Manager.getDouble(rs, pos));
                    break;
                case ID_AMOUNTCHILD:
                    ++pos;
                    pObject.setAmountchild(Manager.getDouble(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of TariffBean 
     */
    //41
    public TariffBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of TariffBean 
     */
    public TariffBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (TariffBean[])v.toArray(new TariffBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private TariffListener listener = null;

    /**
     * Registers a unique TariffListener listener.
     */
    //66.5
    public void registerListener(TariffListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the TariffBean pObject.
     *
     * @param pObject the TariffBean pObject to be saved
     */
    //67
    void beforeInsert(TariffBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the TariffBean pObject.
     *
     * @param pObject the TariffBean pObject to be saved
     */
    //68
    void afterInsert(TariffBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the TariffBean pObject.
     *
     * @param pObject the TariffBean pObject to be updated
     */
    //69
    void beforeUpdate(TariffBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the TariffBean pObject.
     *
     * @param pObject the TariffBean pObject to be updated
     */
    //70
    void afterUpdate(TariffBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
