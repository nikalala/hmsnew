// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the guest table.
 */
public class GuestManager
// extends+ 

// extends- 

{

    /**
     * Column guestid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_GUESTID = 0;
    public static final int TYPE_GUESTID = Types.BIGINT;
    public static final String NAME_GUESTID = "guestid";

    /**
     * Column salutationid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SALUTATIONID = 1;
    public static final int TYPE_SALUTATIONID = Types.INTEGER;
    public static final String NAME_SALUTATIONID = "salutationid";

    /**
     * Column fname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_FNAME = 2;
    public static final int TYPE_FNAME = Types.VARCHAR;
    public static final String NAME_FNAME = "fname";

    /**
     * Column lname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_LNAME = 3;
    public static final int TYPE_LNAME = Types.VARCHAR;
    public static final String NAME_LNAME = "lname";

    /**
     * Column type of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TYPE = 4;
    public static final int TYPE_TYPE = Types.INTEGER;
    public static final String NAME_TYPE = "type";

    /**
     * Column gender of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_GENDER = 5;
    public static final int TYPE_GENDER = Types.INTEGER;
    public static final String NAME_GENDER = "gender";

    /**
     * Column address of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ADDRESS = 6;
    public static final int TYPE_ADDRESS = Types.VARCHAR;
    public static final String NAME_ADDRESS = "address";

    /**
     * Column countryid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_COUNTRYID = 7;
    public static final int TYPE_COUNTRYID = Types.INTEGER;
    public static final String NAME_COUNTRYID = "countryid";

    /**
     * Column city of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CITY = 8;
    public static final int TYPE_CITY = Types.VARCHAR;
    public static final String NAME_CITY = "city";

    /**
     * Column zip of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ZIP = 9;
    public static final int TYPE_ZIP = Types.VARCHAR;
    public static final String NAME_ZIP = "zip";

    /**
     * Column idtypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_IDTYPEID = 10;
    public static final int TYPE_IDTYPEID = Types.INTEGER;
    public static final String NAME_IDTYPEID = "idtypeid";

    /**
     * Column idn of type Types.VARCHAR mapped to String.
     */
    public static final int ID_IDN = 11;
    public static final int TYPE_IDN = Types.VARCHAR;
    public static final String NAME_IDN = "idn";

    /**
     * Column vipstatusid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_VIPSTATUSID = 12;
    public static final int TYPE_VIPSTATUSID = Types.INTEGER;
    public static final String NAME_VIPSTATUSID = "vipstatusid";

    /**
     * Column phone of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PHONE = 13;
    public static final int TYPE_PHONE = Types.VARCHAR;
    public static final String NAME_PHONE = "phone";

    /**
     * Column mobile of type Types.VARCHAR mapped to String.
     */
    public static final int ID_MOBILE = 14;
    public static final int TYPE_MOBILE = Types.VARCHAR;
    public static final String NAME_MOBILE = "mobile";

    /**
     * Column fax of type Types.VARCHAR mapped to String.
     */
    public static final int ID_FAX = 15;
    public static final int TYPE_FAX = Types.VARCHAR;
    public static final String NAME_FAX = "fax";

    /**
     * Column email of type Types.VARCHAR mapped to String.
     */
    public static final int ID_EMAIL = 16;
    public static final int TYPE_EMAIL = Types.VARCHAR;
    public static final String NAME_EMAIL = "email";

    /**
     * Column dob of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_DOB = 17;
    public static final int TYPE_DOB = Types.DATE;
    public static final String NAME_DOB = "dob";

    /**
     * Column sdob of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_SDOB = 18;
    public static final int TYPE_SDOB = Types.DATE;
    public static final String NAME_SDOB = "sdob";

    /**
     * Column weddingdate of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_WEDDINGDATE = 19;
    public static final int TYPE_WEDDINGDATE = Types.DATE;
    public static final String NAME_WEDDINGDATE = "weddingdate";

    /**
     * Column nationalityid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_NATIONALITYID = 20;
    public static final int TYPE_NATIONALITYID = Types.INTEGER;
    public static final String NAME_NATIONALITYID = "nationalityid";

    /**
     * Column contragentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRAGENTID = 21;
    public static final int TYPE_CONTRAGENTID = Types.BIGINT;
    public static final String NAME_CONTRAGENTID = "contragentid";

    /**
     * Column paymentmethodid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_PAYMENTMETHODID = 22;
    public static final int TYPE_PAYMENTMETHODID = Types.INTEGER;
    public static final String NAME_PAYMENTMETHODID = "paymentmethodid";

    /**
     * Column cardnum of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CARDNUM = 23;
    public static final int TYPE_CARDNUM = Types.VARCHAR;
    public static final String NAME_CARDNUM = "cardnum";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 24;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 25;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 26;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";

    /**
     * Column company of type Types.VARCHAR mapped to String.
     */
    public static final int ID_COMPANY = 27;
    public static final int TYPE_COMPANY = Types.VARCHAR;
    public static final String NAME_COMPANY = "company";

    /**
     * Column docnum of type Types.VARCHAR mapped to String.
     */
    public static final int ID_DOCNUM = 28;
    public static final int TYPE_DOCNUM = Types.VARCHAR;
    public static final String NAME_DOCNUM = "docnum";


    private static final String TABLE_NAME = "guest";

    /**
     * Create an array of type string containing all the fields of the guest table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "guest.guestid"
        ,"guest.salutationid"
        ,"guest.fname"
        ,"guest.lname"
        ,"guest.type"
        ,"guest.gender"
        ,"guest.address"
        ,"guest.countryid"
        ,"guest.city"
        ,"guest.zip"
        ,"guest.idtypeid"
        ,"guest.idn"
        ,"guest.vipstatusid"
        ,"guest.phone"
        ,"guest.mobile"
        ,"guest.fax"
        ,"guest.email"
        ,"guest.dob"
        ,"guest.sdob"
        ,"guest.weddingdate"
        ,"guest.nationalityid"
        ,"guest.contragentid"
        ,"guest.paymentmethodid"
        ,"guest.cardnum"
        ,"guest.regbyid"
        ,"guest.regdate"
        ,"guest.deleted"
        ,"guest.company"
        ,"guest.docnum"
    };

    /**
     * Field that contains the comma separated fields of the guest table.
     */
    private static final String ALL_FIELDS = "guest.guestid"
                            + ",guest.salutationid"
                            + ",guest.fname"
                            + ",guest.lname"
                            + ",guest.type"
                            + ",guest.gender"
                            + ",guest.address"
                            + ",guest.countryid"
                            + ",guest.city"
                            + ",guest.zip"
                            + ",guest.idtypeid"
                            + ",guest.idn"
                            + ",guest.vipstatusid"
                            + ",guest.phone"
                            + ",guest.mobile"
                            + ",guest.fax"
                            + ",guest.email"
                            + ",guest.dob"
                            + ",guest.sdob"
                            + ",guest.weddingdate"
                            + ",guest.nationalityid"
                            + ",guest.contragentid"
                            + ",guest.paymentmethodid"
                            + ",guest.cardnum"
                            + ",guest.regbyid"
                            + ",guest.regdate"
                            + ",guest.deleted"
                            + ",guest.company"
                            + ",guest.docnum";

    private static GuestManager singleton = new GuestManager();

    /**
     * Get the GuestManager singleton.
     *
     * @return GuestManager 
     */
    synchronized public static GuestManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own GuestManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(GuestManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new GuestBean instance.
     *
     * @return the new GuestBean 
     */
    public GuestBean createGuestBean()
    {
        return new GuestBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a GuestBean from the guest using its key fields.
     *
     * @return a unique GuestBean 
     */
    //12
    public GuestBean loadByPrimaryKey(Long guestid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM guest WHERE guest.guestid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, guestid);
            GuestBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long guestid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from guest WHERE guest.guestid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, guestid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads GuestBean array from the guest table using its countryid field.
     *
     * @return an array of GuestBean 
     */
    // LOAD BY IMPORTED KEY
    public GuestBean[] loadByCountryid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM guest WHERE countryid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the guest table by countryid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByCountryid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM guest WHERE countryid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads GuestBean array from the guest table using its idtypeid field.
     *
     * @return an array of GuestBean 
     */
    // LOAD BY IMPORTED KEY
    public GuestBean[] loadByIdtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM guest WHERE idtypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the guest table by idtypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByIdtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM guest WHERE idtypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads GuestBean array from the guest table using its nationalityid field.
     *
     * @return an array of GuestBean 
     */
    // LOAD BY IMPORTED KEY
    public GuestBean[] loadByNationalityid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM guest WHERE nationalityid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the guest table by nationalityid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByNationalityid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM guest WHERE nationalityid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads GuestBean array from the guest table using its paymentmethodid field.
     *
     * @return an array of GuestBean 
     */
    // LOAD BY IMPORTED KEY
    public GuestBean[] loadByPaymentmethodid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM guest WHERE paymentmethodid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the guest table by paymentmethodid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByPaymentmethodid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM guest WHERE paymentmethodid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads GuestBean array from the guest table using its regbyid field.
     *
     * @return an array of GuestBean 
     */
    // LOAD BY IMPORTED KEY
    public GuestBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM guest WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the guest table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM guest WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads GuestBean array from the guest table using its salutationid field.
     *
     * @return an array of GuestBean 
     */
    // LOAD BY IMPORTED KEY
    public GuestBean[] loadBySalutationid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM guest WHERE salutationid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the guest table by salutationid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySalutationid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM guest WHERE salutationid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads GuestBean array from the guest table using its vipstatusid field.
     *
     * @return an array of GuestBean 
     */
    // LOAD BY IMPORTED KEY
    public GuestBean[] loadByVipstatusid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM guest WHERE vipstatusid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the guest table by vipstatusid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByVipstatusid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM guest WHERE vipstatusid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the CountryBean object from the guest.countryid field.
     *
     * @param pObject the GuestBean 
     * @return the associated CountryBean pObject
     */
    // GET IMPORTED
    public CountryBean getCountryBean(GuestBean pObject) throws SQLException
    {
        CountryBean other = CountryManager.getInstance().createCountryBean();
        other.setCountryid(pObject.getCountryid());
        return CountryManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the GuestBean object to the CountryBean object.
     *
     * @param pObject the GuestBean object to use
     * @param pObjectToBeSet the CountryBean object to associate to the GuestBean 
     * @return the associated CountryBean pObject
     */
    // SET IMPORTED
    public GuestBean setCountryBean(GuestBean pObject,CountryBean pObjectToBeSet)
    {
        pObject.setCountryid(pObjectToBeSet.getCountryid());
        return pObject;
    }

    /**
     * Retrieves the IdtypeBean object from the guest.idtypeid field.
     *
     * @param pObject the GuestBean 
     * @return the associated IdtypeBean pObject
     */
    // GET IMPORTED
    public IdtypeBean getIdtypeBean(GuestBean pObject) throws SQLException
    {
        IdtypeBean other = IdtypeManager.getInstance().createIdtypeBean();
        other.setIdtypeid(pObject.getIdtypeid());
        return IdtypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the GuestBean object to the IdtypeBean object.
     *
     * @param pObject the GuestBean object to use
     * @param pObjectToBeSet the IdtypeBean object to associate to the GuestBean 
     * @return the associated IdtypeBean pObject
     */
    // SET IMPORTED
    public GuestBean setIdtypeBean(GuestBean pObject,IdtypeBean pObjectToBeSet)
    {
        pObject.setIdtypeid(pObjectToBeSet.getIdtypeid());
        return pObject;
    }

    /**
     * Retrieves the NationalityBean object from the guest.nationalityid field.
     *
     * @param pObject the GuestBean 
     * @return the associated NationalityBean pObject
     */
    // GET IMPORTED
    public NationalityBean getNationalityBean(GuestBean pObject) throws SQLException
    {
        NationalityBean other = NationalityManager.getInstance().createNationalityBean();
        other.setNationalityid(pObject.getNationalityid());
        return NationalityManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the GuestBean object to the NationalityBean object.
     *
     * @param pObject the GuestBean object to use
     * @param pObjectToBeSet the NationalityBean object to associate to the GuestBean 
     * @return the associated NationalityBean pObject
     */
    // SET IMPORTED
    public GuestBean setNationalityBean(GuestBean pObject,NationalityBean pObjectToBeSet)
    {
        pObject.setNationalityid(pObjectToBeSet.getNationalityid());
        return pObject;
    }

    /**
     * Retrieves the PaymentmethodBean object from the guest.paymentmethodid field.
     *
     * @param pObject the GuestBean 
     * @return the associated PaymentmethodBean pObject
     */
    // GET IMPORTED
    public PaymentmethodBean getPaymentmethodBean(GuestBean pObject) throws SQLException
    {
        PaymentmethodBean other = PaymentmethodManager.getInstance().createPaymentmethodBean();
        other.setPaymentmethodid(pObject.getPaymentmethodid());
        return PaymentmethodManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the GuestBean object to the PaymentmethodBean object.
     *
     * @param pObject the GuestBean object to use
     * @param pObjectToBeSet the PaymentmethodBean object to associate to the GuestBean 
     * @return the associated PaymentmethodBean pObject
     */
    // SET IMPORTED
    public GuestBean setPaymentmethodBean(GuestBean pObject,PaymentmethodBean pObjectToBeSet)
    {
        pObject.setPaymentmethodid(pObjectToBeSet.getPaymentmethodid());
        return pObject;
    }

    /**
     * Retrieves the PersonnelBean object from the guest.personnelid field.
     *
     * @param pObject the GuestBean 
     * @return the associated PersonnelBean pObject
     */
    // GET IMPORTED
    public PersonnelBean getPersonnelBean(GuestBean pObject) throws SQLException
    {
        PersonnelBean other = PersonnelManager.getInstance().createPersonnelBean();
        other.setPersonnelid(pObject.getRegbyid());
        return PersonnelManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the GuestBean object to the PersonnelBean object.
     *
     * @param pObject the GuestBean object to use
     * @param pObjectToBeSet the PersonnelBean object to associate to the GuestBean 
     * @return the associated PersonnelBean pObject
     */
    // SET IMPORTED
    public GuestBean setPersonnelBean(GuestBean pObject,PersonnelBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonnelid());
        return pObject;
    }

    /**
     * Retrieves the SalutationBean object from the guest.salutationid field.
     *
     * @param pObject the GuestBean 
     * @return the associated SalutationBean pObject
     */
    // GET IMPORTED
    public SalutationBean getSalutationBean(GuestBean pObject) throws SQLException
    {
        SalutationBean other = SalutationManager.getInstance().createSalutationBean();
        other.setSalutationid(pObject.getSalutationid());
        return SalutationManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the GuestBean object to the SalutationBean object.
     *
     * @param pObject the GuestBean object to use
     * @param pObjectToBeSet the SalutationBean object to associate to the GuestBean 
     * @return the associated SalutationBean pObject
     */
    // SET IMPORTED
    public GuestBean setSalutationBean(GuestBean pObject,SalutationBean pObjectToBeSet)
    {
        pObject.setSalutationid(pObjectToBeSet.getSalutationid());
        return pObject;
    }

    /**
     * Retrieves the VipstatusBean object from the guest.vipstatusid field.
     *
     * @param pObject the GuestBean 
     * @return the associated VipstatusBean pObject
     */
    // GET IMPORTED
    public VipstatusBean getVipstatusBean(GuestBean pObject) throws SQLException
    {
        VipstatusBean other = VipstatusManager.getInstance().createVipstatusBean();
        other.setVipstatusid(pObject.getVipstatusid());
        return VipstatusManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the GuestBean object to the VipstatusBean object.
     *
     * @param pObject the GuestBean object to use
     * @param pObjectToBeSet the VipstatusBean object to associate to the GuestBean 
     * @return the associated VipstatusBean pObject
     */
    // SET IMPORTED
    public GuestBean setVipstatusBean(GuestBean pObject,VipstatusBean pObjectToBeSet)
    {
        pObject.setVipstatusid(pObjectToBeSet.getVipstatusid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from guest.
     *
     * @return an array of GuestManager pObject
     */
    //38
    public GuestBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM guest",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of GuestBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting GuestBean table 
     */
    //49
    public GuestBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of GuestBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting GuestBean table 
     */
    //51
    public GuestBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from guest " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from guest ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (GuestBean[])v.toArray(new GuestBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from guest table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the guest table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM guest " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the GuestBean pObject into the database.
     *
     * @param pObject the GuestBean pObject to be saved
     */
    //100
    public GuestBean save(GuestBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isGuestidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('guestid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setGuestid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into guest (");
    
                if (pObject.isGuestidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("guestid");
                    _dirtyCount++;
                }

                if (pObject.isSalutationidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("salutationid");
                    _dirtyCount++;
                }

                if (pObject.isFnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fname");
                    _dirtyCount++;
                }

                if (pObject.isLnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("lname");
                    _dirtyCount++;
                }

                if (pObject.isTypeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("type");
                    _dirtyCount++;
                }

                if (pObject.isGenderModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("gender");
                    _dirtyCount++;
                }

                if (pObject.isAddressModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("address");
                    _dirtyCount++;
                }

                if (pObject.isCountryidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("countryid");
                    _dirtyCount++;
                }

                if (pObject.isCityModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("city");
                    _dirtyCount++;
                }

                if (pObject.isZipModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("zip");
                    _dirtyCount++;
                }

                if (pObject.isIdtypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("idtypeid");
                    _dirtyCount++;
                }

                if (pObject.isIdnModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("idn");
                    _dirtyCount++;
                }

                if (pObject.isVipstatusidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("vipstatusid");
                    _dirtyCount++;
                }

                if (pObject.isPhoneModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("phone");
                    _dirtyCount++;
                }

                if (pObject.isMobileModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("mobile");
                    _dirtyCount++;
                }

                if (pObject.isFaxModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fax");
                    _dirtyCount++;
                }

                if (pObject.isEmailModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("email");
                    _dirtyCount++;
                }

                if (pObject.isDobModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("dob");
                    _dirtyCount++;
                }

                if (pObject.isSdobModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sdob");
                    _dirtyCount++;
                }

                if (pObject.isWeddingdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("weddingdate");
                    _dirtyCount++;
                }

                if (pObject.isNationalityidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("nationalityid");
                    _dirtyCount++;
                }

                if (pObject.isContragentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contragentid");
                    _dirtyCount++;
                }

                if (pObject.isPaymentmethodidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("paymentmethodid");
                    _dirtyCount++;
                }

                if (pObject.isCardnumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("cardnum");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                if (pObject.isCompanyModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("company");
                    _dirtyCount++;
                }

                if (pObject.isDocnumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("docnum");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isGuestidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
                }
    
                if (pObject.isSalutationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
                }
    
                if (pObject.isFnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getFname());
                }
    
                if (pObject.isLnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLname());
                }
    
                if (pObject.isTypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
                }
    
                if (pObject.isGenderModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getGender());
                }
    
                if (pObject.isAddressModified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress());
                }
    
                if (pObject.isCountryidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
                }
    
                if (pObject.isCityModified()) {
                    ps.setString(++_dirtyCount, pObject.getCity());
                }
    
                if (pObject.isZipModified()) {
                    ps.setString(++_dirtyCount, pObject.getZip());
                }
    
                if (pObject.isIdtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getIdtypeid());
                }
    
                if (pObject.isIdnModified()) {
                    ps.setString(++_dirtyCount, pObject.getIdn());
                }
    
                if (pObject.isVipstatusidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getVipstatusid());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isMobileModified()) {
                    ps.setString(++_dirtyCount, pObject.getMobile());
                }
    
                if (pObject.isFaxModified()) {
                    ps.setString(++_dirtyCount, pObject.getFax());
                }
    
                if (pObject.isEmailModified()) {
                    ps.setString(++_dirtyCount, pObject.getEmail());
                }
    
                if (pObject.isDobModified()) {
                    if (pObject.getDob() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getDob().getTime()));
                }
    
                if (pObject.isSdobModified()) {
                    if (pObject.getSdob() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getSdob().getTime()));
                }
    
                if (pObject.isWeddingdateModified()) {
                    if (pObject.getWeddingdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getWeddingdate().getTime()));
                }
    
                if (pObject.isNationalityidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getNationalityid());
                }
    
                if (pObject.isContragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }
    
                if (pObject.isPaymentmethodidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
                }
    
                if (pObject.isCardnumModified()) {
                    ps.setString(++_dirtyCount, pObject.getCardnum());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isCompanyModified()) {
                    ps.setString(++_dirtyCount, pObject.getCompany());
                }
    
                if (pObject.isDocnumModified()) {
                    ps.setString(++_dirtyCount, pObject.getDocnum());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE guest SET ");
                boolean useComma=false;

                if (pObject.isGuestidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("guestid").append("=?");
                }

                if (pObject.isSalutationidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("salutationid").append("=?");
                }

                if (pObject.isFnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fname").append("=?");
                }

                if (pObject.isLnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("lname").append("=?");
                }

                if (pObject.isTypeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("type").append("=?");
                }

                if (pObject.isGenderModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("gender").append("=?");
                }

                if (pObject.isAddressModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("address").append("=?");
                }

                if (pObject.isCountryidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("countryid").append("=?");
                }

                if (pObject.isCityModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("city").append("=?");
                }

                if (pObject.isZipModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("zip").append("=?");
                }

                if (pObject.isIdtypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("idtypeid").append("=?");
                }

                if (pObject.isIdnModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("idn").append("=?");
                }

                if (pObject.isVipstatusidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("vipstatusid").append("=?");
                }

                if (pObject.isPhoneModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("phone").append("=?");
                }

                if (pObject.isMobileModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("mobile").append("=?");
                }

                if (pObject.isFaxModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fax").append("=?");
                }

                if (pObject.isEmailModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("email").append("=?");
                }

                if (pObject.isDobModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("dob").append("=?");
                }

                if (pObject.isSdobModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sdob").append("=?");
                }

                if (pObject.isWeddingdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("weddingdate").append("=?");
                }

                if (pObject.isNationalityidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("nationalityid").append("=?");
                }

                if (pObject.isContragentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contragentid").append("=?");
                }

                if (pObject.isPaymentmethodidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("paymentmethodid").append("=?");
                }

                if (pObject.isCardnumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("cardnum").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }

                if (pObject.isCompanyModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("company").append("=?");
                }

                if (pObject.isDocnumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("docnum").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("guest.guestid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isGuestidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
                }

                if (pObject.isSalutationidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
                }

                if (pObject.isFnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getFname());
                }

                if (pObject.isLnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getLname());
                }

                if (pObject.isTypeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
                }

                if (pObject.isGenderModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getGender());
                }

                if (pObject.isAddressModified()) {
                      ps.setString(++_dirtyCount, pObject.getAddress());
                }

                if (pObject.isCountryidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
                }

                if (pObject.isCityModified()) {
                      ps.setString(++_dirtyCount, pObject.getCity());
                }

                if (pObject.isZipModified()) {
                      ps.setString(++_dirtyCount, pObject.getZip());
                }

                if (pObject.isIdtypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getIdtypeid());
                }

                if (pObject.isIdnModified()) {
                      ps.setString(++_dirtyCount, pObject.getIdn());
                }

                if (pObject.isVipstatusidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getVipstatusid());
                }

                if (pObject.isPhoneModified()) {
                      ps.setString(++_dirtyCount, pObject.getPhone());
                }

                if (pObject.isMobileModified()) {
                      ps.setString(++_dirtyCount, pObject.getMobile());
                }

                if (pObject.isFaxModified()) {
                      ps.setString(++_dirtyCount, pObject.getFax());
                }

                if (pObject.isEmailModified()) {
                      ps.setString(++_dirtyCount, pObject.getEmail());
                }

                if (pObject.isDobModified()) {
                      if (pObject.getDob() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getDob().getTime()));
                }

                if (pObject.isSdobModified()) {
                      if (pObject.getSdob() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getSdob().getTime()));
                }

                if (pObject.isWeddingdateModified()) {
                      if (pObject.getWeddingdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getWeddingdate().getTime()));
                }

                if (pObject.isNationalityidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getNationalityid());
                }

                if (pObject.isContragentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }

                if (pObject.isPaymentmethodidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
                }

                if (pObject.isCardnumModified()) {
                      ps.setString(++_dirtyCount, pObject.getCardnum());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }

                if (pObject.isCompanyModified()) {
                      ps.setString(++_dirtyCount, pObject.getCompany());
                }

                if (pObject.isDocnumModified()) {
                      ps.setString(++_dirtyCount, pObject.getDocnum());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of GuestBean pObjects into the database.
     *
     * @param pObjects the GuestBean pObject table to be saved
     * @return the saved GuestBean array.
     */
    //65
    public GuestBean[] save(GuestBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique GuestBean pObject from a template one giving a c
     *
     * @param pObject the GuestBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public GuestBean loadUniqueUsingTemplate(GuestBean pObject) throws SQLException
    {
         GuestBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of GuestBean from a template one.
     *
     * @param pObject the GuestBean template to look for
     * @return all the GuestBean matching the template
     */
    //88
    public GuestBean[] loadUsingTemplate(GuestBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from guest WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isGuestidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestid= ?");
             }
    
             if (pObject.isSalutationidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("salutationid= ?");
             }
    
             if (pObject.isFnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fname= ?");
             }
    
             if (pObject.isLnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("lname= ?");
             }
    
             if (pObject.isTypeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("type= ?");
             }
    
             if (pObject.isGenderModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("gender= ?");
             }
    
             if (pObject.isAddressModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address= ?");
             }
    
             if (pObject.isCountryidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("countryid= ?");
             }
    
             if (pObject.isCityModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("city= ?");
             }
    
             if (pObject.isZipModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("zip= ?");
             }
    
             if (pObject.isIdtypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("idtypeid= ?");
             }
    
             if (pObject.isIdnModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("idn= ?");
             }
    
             if (pObject.isVipstatusidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("vipstatusid= ?");
             }
    
             if (pObject.isPhoneModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
             }
    
             if (pObject.isMobileModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mobile= ?");
             }
    
             if (pObject.isFaxModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fax= ?");
             }
    
             if (pObject.isEmailModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("email= ?");
             }
    
             if (pObject.isDobModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("dob= ?");
             }
    
             if (pObject.isSdobModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sdob= ?");
             }
    
             if (pObject.isWeddingdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("weddingdate= ?");
             }
    
             if (pObject.isNationalityidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nationalityid= ?");
             }
    
             if (pObject.isContragentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contragentid= ?");
             }
    
             if (pObject.isPaymentmethodidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentmethodid= ?");
             }
    
             if (pObject.isCardnumModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("cardnum= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (pObject.isCompanyModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("company= ?");
             }
    
             if (pObject.isDocnumModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("docnum= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isGuestidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
             }
    
             if (pObject.isSalutationidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
             }
    
             if (pObject.isFnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getFname());
             }
    
             if (pObject.isLnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getLname());
             }
    
             if (pObject.isTypeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
             }
    
             if (pObject.isGenderModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getGender());
             }
    
             if (pObject.isAddressModified()) {
                 ps.setString(++_dirtyCount, pObject.getAddress());
             }
    
             if (pObject.isCountryidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
             }
    
             if (pObject.isCityModified()) {
                 ps.setString(++_dirtyCount, pObject.getCity());
             }
    
             if (pObject.isZipModified()) {
                 ps.setString(++_dirtyCount, pObject.getZip());
             }
    
             if (pObject.isIdtypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getIdtypeid());
             }
    
             if (pObject.isIdnModified()) {
                 ps.setString(++_dirtyCount, pObject.getIdn());
             }
    
             if (pObject.isVipstatusidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getVipstatusid());
             }
    
             if (pObject.isPhoneModified()) {
                 ps.setString(++_dirtyCount, pObject.getPhone());
             }
    
             if (pObject.isMobileModified()) {
                 ps.setString(++_dirtyCount, pObject.getMobile());
             }
    
             if (pObject.isFaxModified()) {
                 ps.setString(++_dirtyCount, pObject.getFax());
             }
    
             if (pObject.isEmailModified()) {
                 ps.setString(++_dirtyCount, pObject.getEmail());
             }
    
             if (pObject.isDobModified()) {
                 if (pObject.getDob() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getDob().getTime()));
             }
    
             if (pObject.isSdobModified()) {
                 if (pObject.getSdob() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getSdob().getTime()));
             }
    
             if (pObject.isWeddingdateModified()) {
                 if (pObject.getWeddingdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getWeddingdate().getTime()));
             }
    
             if (pObject.isNationalityidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getNationalityid());
             }
    
             if (pObject.isContragentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
             }
    
             if (pObject.isPaymentmethodidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
             }
    
             if (pObject.isCardnumModified()) {
                 ps.setString(++_dirtyCount, pObject.getCardnum());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             if (pObject.isCompanyModified()) {
                 ps.setString(++_dirtyCount, pObject.getCompany());
             }
    
             if (pObject.isDocnumModified()) {
                 ps.setString(++_dirtyCount, pObject.getDocnum());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a GuestBean template.
     *
     * @param pObject the GuestBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(GuestBean pObject) throws SQLException
    {
        if (pObject.isGuestidInitialized())
            return deleteByPrimaryKey(pObject.getGuestid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM guest WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isGuestidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("guestid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSalutationidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("salutationid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("lname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTypeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("type").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGenderInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("gender").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAddressInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("address").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCountryidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("countryid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCityInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("city").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isZipInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("zip").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isIdtypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("idtypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isIdnInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("idn").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isVipstatusidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("vipstatusid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPhoneInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("phone").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMobileInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("mobile").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFaxInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fax").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isEmailInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("email").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDobInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("dob").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSdobInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sdob").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isWeddingdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("weddingdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNationalityidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("nationalityid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContragentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contragentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPaymentmethodidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("paymentmethodid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCardnumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("cardnum").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCompanyInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("company").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDocnumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("docnum").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isGuestidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
            }
    
            if (pObject.isSalutationidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
            }
    
            if (pObject.isFnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getFname());
            }
    
            if (pObject.isLnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getLname());
            }
    
            if (pObject.isTypeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
            }
    
            if (pObject.isGenderInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getGender());
            }
    
            if (pObject.isAddressInitialized()) {
                ps.setString(++_dirtyCount, pObject.getAddress());
            }
    
            if (pObject.isCountryidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
            }
    
            if (pObject.isCityInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCity());
            }
    
            if (pObject.isZipInitialized()) {
                ps.setString(++_dirtyCount, pObject.getZip());
            }
    
            if (pObject.isIdtypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getIdtypeid());
            }
    
            if (pObject.isIdnInitialized()) {
                ps.setString(++_dirtyCount, pObject.getIdn());
            }
    
            if (pObject.isVipstatusidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getVipstatusid());
            }
    
            if (pObject.isPhoneInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPhone());
            }
    
            if (pObject.isMobileInitialized()) {
                ps.setString(++_dirtyCount, pObject.getMobile());
            }
    
            if (pObject.isFaxInitialized()) {
                ps.setString(++_dirtyCount, pObject.getFax());
            }
    
            if (pObject.isEmailInitialized()) {
                ps.setString(++_dirtyCount, pObject.getEmail());
            }
    
            if (pObject.isDobInitialized()) {
                if (pObject.getDob() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getDob().getTime()));
            }
    
            if (pObject.isSdobInitialized()) {
                if (pObject.getSdob() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getSdob().getTime()));
            }
    
            if (pObject.isWeddingdateInitialized()) {
                if (pObject.getWeddingdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getWeddingdate().getTime()));
            }
    
            if (pObject.isNationalityidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getNationalityid());
            }
    
            if (pObject.isContragentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
            }
    
            if (pObject.isPaymentmethodidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
            }
    
            if (pObject.isCardnumInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCardnum());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            if (pObject.isCompanyInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCompany());
            }
    
            if (pObject.isDocnumInitialized()) {
                ps.setString(++_dirtyCount, pObject.getDocnum());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of ContragentBean using the relation table Folio given a GuestBean object.
     *
     * @param pObject the GuestBean pObject to be used
     * @return an array of ContragentBean 
     */
    // MANY TO MANY
    public ContragentBean[] loadContragentViaFolio(GuestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contragent,folio"
                         + " WHERE "    
                         + "     folio.guestid = ?"
                         + " AND folio.contragentid = contragent.contragentid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getGuestid());
             return ContragentManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonnelBean using the relation table Folio given a GuestBean object.
     *
     * @param pObject the GuestBean pObject to be used
     * @return an array of PersonnelBean 
     */
    // MANY TO MANY
    public PersonnelBean[] loadPersonnelViaFolio(GuestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personnel,folio"
                         + " WHERE "    
                         + "     folio.guestid = ?"
                         + " AND folio.regbyid = personnel.personnelid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getGuestid());
             return PersonnelManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ReservationroomBean using the relation table Folio given a GuestBean object.
     *
     * @param pObject the GuestBean pObject to be used
     * @return an array of ReservationroomBean 
     */
    // MANY TO MANY
    public ReservationroomBean[] loadReservationroomViaFolio(GuestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        reservationroom,folio"
                         + " WHERE "    
                         + "     folio.guestid = ?"
                         + " AND folio.reservationroomid = reservationroom.reservationroomid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getGuestid());
             return ReservationroomManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonnelBean using the relation table Reservationroom given a GuestBean object.
     *
     * @param pObject the GuestBean pObject to be used
     * @return an array of PersonnelBean 
     */
    // MANY TO MANY
    public PersonnelBean[] loadPersonnelViaReservationroom(GuestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personnel,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.guestid = ?"
                         + " AND reservationroom.regbyid = personnel.personnelid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getGuestid());
             return PersonnelManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RatetypeBean using the relation table Reservationroom given a GuestBean object.
     *
     * @param pObject the GuestBean pObject to be used
     * @return an array of RatetypeBean 
     */
    // MANY TO MANY
    public RatetypeBean[] loadRatetypeViaReservationroom(GuestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        ratetype,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.guestid = ?"
                         + " AND reservationroom.ratetypeid = ratetype.ratetypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getGuestid());
             return RatetypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ReservationBean using the relation table Reservationroom given a GuestBean object.
     *
     * @param pObject the GuestBean pObject to be used
     * @return an array of ReservationBean 
     */
    // MANY TO MANY
    public ReservationBean[] loadReservationViaReservationroom(GuestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        reservation,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.guestid = ?"
                         + " AND reservationroom.reservationid = reservation.reservationid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getGuestid());
             return ReservationManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RoomBean using the relation table Reservationroom given a GuestBean object.
     *
     * @param pObject the GuestBean pObject to be used
     * @return an array of RoomBean 
     */
    // MANY TO MANY
    public RoomBean[] loadRoomViaReservationroom(GuestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        room,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.guestid = ?"
                         + " AND reservationroom.roomid = room.roomid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getGuestid());
             return RoomManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RoomtypeBean using the relation table Reservationroom given a GuestBean object.
     *
     * @param pObject the GuestBean pObject to be used
     * @return an array of RoomtypeBean 
     */
    // MANY TO MANY
    public RoomtypeBean[] loadRoomtypeViaReservationroom(GuestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        roomtype,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.guestid = ?"
                         + " AND reservationroom.roomtypeid = roomtype.roomtypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getGuestid());
             return RoomtypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PickdropBean using the relation table Reservationroompickdrop given a GuestBean object.
     *
     * @param pObject the GuestBean pObject to be used
     * @return an array of PickdropBean 
     */
    // MANY TO MANY
    public PickdropBean[] loadPickdropViaReservationroompickdrop(GuestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        pickdrop,reservationroompickdrop"
                         + " WHERE "    
                         + "     reservationroompickdrop.guestid = ?"
                         + " AND reservationroompickdrop.pickdropid = pickdrop.pickdropid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getGuestid());
             return PickdropManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ReservationroomBean using the relation table Reservationroompickdrop given a GuestBean object.
     *
     * @param pObject the GuestBean pObject to be used
     * @return an array of ReservationroomBean 
     */
    // MANY TO MANY
    public ReservationroomBean[] loadReservationroomViaReservationroompickdrop(GuestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        reservationroom,reservationroompickdrop"
                         + " WHERE "    
                         + "     reservationroompickdrop.guestid = ?"
                         + " AND reservationroompickdrop.reservationroomid = reservationroom.reservationroomid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getGuestid());
             return ReservationroomManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ReservationroomBean using the relation table Sharer given a GuestBean object.
     *
     * @param pObject the GuestBean pObject to be used
     * @return an array of ReservationroomBean 
     */
    // MANY TO MANY
    public ReservationroomBean[] loadReservationroomViaSharer(GuestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        reservationroom,sharer"
                         + " WHERE "    
                         + "     sharer.guestid = ?"
                         + " AND sharer.reservationroomid = reservationroom.reservationroomid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getGuestid());
             return ReservationroomManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table guest.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table guest with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from guest " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table guest with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific GuestBean pObject given a c
     *
     * @param pObject the GuestBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(GuestBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from guest WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isGuestidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestid= ?");
                }
    
                if (pObject.isSalutationidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("salutationid= ?");
                }
    
                if (pObject.isFnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fname= ?");
                }
    
                if (pObject.isLnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("lname= ?");
                }
    
                if (pObject.isTypeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("type= ?");
                }
    
                if (pObject.isGenderModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("gender= ?");
                }
    
                if (pObject.isAddressModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address= ?");
                }
    
                if (pObject.isCountryidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("countryid= ?");
                }
    
                if (pObject.isCityModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("city= ?");
                }
    
                if (pObject.isZipModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("zip= ?");
                }
    
                if (pObject.isIdtypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("idtypeid= ?");
                }
    
                if (pObject.isIdnModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("idn= ?");
                }
    
                if (pObject.isVipstatusidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("vipstatusid= ?");
                }
    
                if (pObject.isPhoneModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
                }
    
                if (pObject.isMobileModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mobile= ?");
                }
    
                if (pObject.isFaxModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fax= ?");
                }
    
                if (pObject.isEmailModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("email= ?");
                }
    
                if (pObject.isDobModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("dob= ?");
                }
    
                if (pObject.isSdobModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sdob= ?");
                }
    
                if (pObject.isWeddingdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("weddingdate= ?");
                }
    
                if (pObject.isNationalityidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nationalityid= ?");
                }
    
                if (pObject.isContragentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contragentid= ?");
                }
    
                if (pObject.isPaymentmethodidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentmethodid= ?");
                }
    
                if (pObject.isCardnumModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("cardnum= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (pObject.isCompanyModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("company= ?");
                }
    
                if (pObject.isDocnumModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("docnum= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isGuestidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getGuestid());
                }
    
                if (pObject.isSalutationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
                }
    
                if (pObject.isFnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getFname());
                }
    
                if (pObject.isLnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLname());
                }
    
                if (pObject.isTypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
                }
    
                if (pObject.isGenderModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getGender());
                }
    
                if (pObject.isAddressModified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress());
                }
    
                if (pObject.isCountryidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
                }
    
                if (pObject.isCityModified()) {
                    ps.setString(++_dirtyCount, pObject.getCity());
                }
    
                if (pObject.isZipModified()) {
                    ps.setString(++_dirtyCount, pObject.getZip());
                }
    
                if (pObject.isIdtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getIdtypeid());
                }
    
                if (pObject.isIdnModified()) {
                    ps.setString(++_dirtyCount, pObject.getIdn());
                }
    
                if (pObject.isVipstatusidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getVipstatusid());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isMobileModified()) {
                    ps.setString(++_dirtyCount, pObject.getMobile());
                }
    
                if (pObject.isFaxModified()) {
                    ps.setString(++_dirtyCount, pObject.getFax());
                }
    
                if (pObject.isEmailModified()) {
                    ps.setString(++_dirtyCount, pObject.getEmail());
                }
    
                if (pObject.isDobModified()) {
                    if (pObject.getDob() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getDob().getTime()));
                }
    
                if (pObject.isSdobModified()) {
                    if (pObject.getSdob() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getSdob().getTime()));
                }
    
                if (pObject.isWeddingdateModified()) {
                    if (pObject.getWeddingdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getWeddingdate().getTime()));
                }
    
                if (pObject.isNationalityidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getNationalityid());
                }
    
                if (pObject.isContragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }
    
                if (pObject.isPaymentmethodidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
                }
    
                if (pObject.isCardnumModified()) {
                    ps.setString(++_dirtyCount, pObject.getCardnum());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isCompanyModified()) {
                    ps.setString(++_dirtyCount, pObject.getCompany());
                }
    
                if (pObject.isDocnumModified()) {
                    ps.setString(++_dirtyCount, pObject.getDocnum());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the guest on a GuestBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting GuestBean pObject
     */
    //72
    public GuestBean decodeRow(ResultSet rs) throws SQLException
    {
        GuestBean pObject = createGuestBean();
        pObject.setGuestid(Manager.getLong(rs, 1));
        pObject.setSalutationid(Manager.getInteger(rs, 2));
        pObject.setFname(rs.getString(3));
        pObject.setLname(rs.getString(4));
        pObject.setType(Manager.getInteger(rs, 5));
        pObject.setGender(Manager.getInteger(rs, 6));
        pObject.setAddress(rs.getString(7));
        pObject.setCountryid(Manager.getInteger(rs, 8));
        pObject.setCity(rs.getString(9));
        pObject.setZip(rs.getString(10));
        pObject.setIdtypeid(Manager.getInteger(rs, 11));
        pObject.setIdn(rs.getString(12));
        pObject.setVipstatusid(Manager.getInteger(rs, 13));
        pObject.setPhone(rs.getString(14));
        pObject.setMobile(rs.getString(15));
        pObject.setFax(rs.getString(16));
        pObject.setEmail(rs.getString(17));
        pObject.setDob(rs.getDate(18));
        pObject.setSdob(rs.getDate(19));
        pObject.setWeddingdate(rs.getDate(20));
        pObject.setNationalityid(Manager.getInteger(rs, 21));
        pObject.setContragentid(Manager.getLong(rs, 22));
        pObject.setPaymentmethodid(Manager.getInteger(rs, 23));
        pObject.setCardnum(rs.getString(24));
        pObject.setRegbyid(Manager.getInteger(rs, 25));
        pObject.setRegdate(rs.getTimestamp(26));
        pObject.setDeleted(Manager.getBoolean(rs, 27));
        pObject.setCompany(rs.getString(28));
        pObject.setDocnum(rs.getString(29));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the guest table on a GuestBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting GuestBean pObject
     */
    //73
    public GuestBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        GuestBean pObject = createGuestBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_GUESTID:
                    ++pos;
                    pObject.setGuestid(Manager.getLong(rs, pos));
                    break;
                case ID_SALUTATIONID:
                    ++pos;
                    pObject.setSalutationid(Manager.getInteger(rs, pos));
                    break;
                case ID_FNAME:
                    ++pos;
                    pObject.setFname(rs.getString(pos));
                    break;
                case ID_LNAME:
                    ++pos;
                    pObject.setLname(rs.getString(pos));
                    break;
                case ID_TYPE:
                    ++pos;
                    pObject.setType(Manager.getInteger(rs, pos));
                    break;
                case ID_GENDER:
                    ++pos;
                    pObject.setGender(Manager.getInteger(rs, pos));
                    break;
                case ID_ADDRESS:
                    ++pos;
                    pObject.setAddress(rs.getString(pos));
                    break;
                case ID_COUNTRYID:
                    ++pos;
                    pObject.setCountryid(Manager.getInteger(rs, pos));
                    break;
                case ID_CITY:
                    ++pos;
                    pObject.setCity(rs.getString(pos));
                    break;
                case ID_ZIP:
                    ++pos;
                    pObject.setZip(rs.getString(pos));
                    break;
                case ID_IDTYPEID:
                    ++pos;
                    pObject.setIdtypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_IDN:
                    ++pos;
                    pObject.setIdn(rs.getString(pos));
                    break;
                case ID_VIPSTATUSID:
                    ++pos;
                    pObject.setVipstatusid(Manager.getInteger(rs, pos));
                    break;
                case ID_PHONE:
                    ++pos;
                    pObject.setPhone(rs.getString(pos));
                    break;
                case ID_MOBILE:
                    ++pos;
                    pObject.setMobile(rs.getString(pos));
                    break;
                case ID_FAX:
                    ++pos;
                    pObject.setFax(rs.getString(pos));
                    break;
                case ID_EMAIL:
                    ++pos;
                    pObject.setEmail(rs.getString(pos));
                    break;
                case ID_DOB:
                    ++pos;
                    pObject.setDob(rs.getDate(pos));
                    break;
                case ID_SDOB:
                    ++pos;
                    pObject.setSdob(rs.getDate(pos));
                    break;
                case ID_WEDDINGDATE:
                    ++pos;
                    pObject.setWeddingdate(rs.getDate(pos));
                    break;
                case ID_NATIONALITYID:
                    ++pos;
                    pObject.setNationalityid(Manager.getInteger(rs, pos));
                    break;
                case ID_CONTRAGENTID:
                    ++pos;
                    pObject.setContragentid(Manager.getLong(rs, pos));
                    break;
                case ID_PAYMENTMETHODID:
                    ++pos;
                    pObject.setPaymentmethodid(Manager.getInteger(rs, pos));
                    break;
                case ID_CARDNUM:
                    ++pos;
                    pObject.setCardnum(rs.getString(pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
                case ID_COMPANY:
                    ++pos;
                    pObject.setCompany(rs.getString(pos));
                    break;
                case ID_DOCNUM:
                    ++pos;
                    pObject.setDocnum(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of GuestBean 
     */
    //41
    public GuestBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of GuestBean 
     */
    public GuestBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (GuestBean[])v.toArray(new GuestBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private GuestListener listener = null;

    /**
     * Registers a unique GuestListener listener.
     */
    //66.5
    public void registerListener(GuestListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the GuestBean pObject.
     *
     * @param pObject the GuestBean pObject to be saved
     */
    //67
    void beforeInsert(GuestBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the GuestBean pObject.
     *
     * @param pObject the GuestBean pObject to be saved
     */
    //68
    void afterInsert(GuestBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the GuestBean pObject.
     *
     * @param pObject the GuestBean pObject to be updated
     */
    //69
    void beforeUpdate(GuestBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the GuestBean pObject.
     *
     * @param pObject the GuestBean pObject to be updated
     */
    //70
    void afterUpdate(GuestBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
