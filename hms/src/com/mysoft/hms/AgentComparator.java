// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.util.Comparator;
// imports+ 

// imports- 


/**
 * Comparator class is used to sort the AgentBean objects.
 */
public class AgentComparator implements Comparator
// extends+ 

// extends- 

{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for AgentComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new AgentComparator(AgentManager.AGENTID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>AgentManager.ID_AGENTID
     *   <li>AgentManager.ID_LNAME
     *   <li>AgentManager.ID_FNAME
     *   <li>AgentManager.ID_NAME
     *   <li>AgentManager.ID_IDNUM
     * </ul>
     */
    public AgentComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for AgentComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new AgentComparator(AgentManager.AGENTID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>AgentManager.ID_AGENTID
     *   <li>AgentManager.ID_TYPE
     *   <li>AgentManager.ID_LNAME
     *   <li>AgentManager.ID_FNAME
     *   <li>AgentManager.ID_NAME
     *   <li>AgentManager.ID_IDNUM
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public AgentComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        AgentBean b1 = (AgentBean)pObj1;
        AgentBean b2 = (AgentBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case AgentManager.ID_AGENTID:
                if (b1.getAgentid() == null && b2.getAgentid() != null) {
                    iReturn = -1;
                } else if (b1.getAgentid() == null && b2.getAgentid() == null) {
                    iReturn = 0;
                } else if (b1.getAgentid() != null && b2.getAgentid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAgentid().compareTo(b2.getAgentid());
                }
                break;
            case AgentManager.ID_LNAME:
                if (b1.getLname() == null && b2.getLname() != null) {
                    iReturn = -1;
                } else if (b1.getLname() == null && b2.getLname() == null) {
                    iReturn = 0;
                } else if (b1.getLname() != null && b2.getLname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getLname().compareTo(b2.getLname());
                }
                break;
            case AgentManager.ID_FNAME:
                if (b1.getFname() == null && b2.getFname() != null) {
                    iReturn = -1;
                } else if (b1.getFname() == null && b2.getFname() == null) {
                    iReturn = 0;
                } else if (b1.getFname() != null && b2.getFname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getFname().compareTo(b2.getFname());
                }
                break;
            case AgentManager.ID_NAME:
                if (b1.getName() == null && b2.getName() != null) {
                    iReturn = -1;
                } else if (b1.getName() == null && b2.getName() == null) {
                    iReturn = 0;
                } else if (b1.getName() != null && b2.getName() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getName().compareTo(b2.getName());
                }
                break;
            case AgentManager.ID_IDNUM:
                if (b1.getIdnum() == null && b2.getIdnum() != null) {
                    iReturn = -1;
                } else if (b1.getIdnum() == null && b2.getIdnum() == null) {
                    iReturn = 0;
                } else if (b1.getIdnum() != null && b2.getIdnum() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getIdnum().compareTo(b2.getIdnum());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 

}
