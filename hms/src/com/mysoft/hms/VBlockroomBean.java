// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class VBlockroomBean
// extends+ 

// extends- 

{
    private Long blockroomid;
    private boolean blockroomid_is_modified = false;
    private boolean blockroomid_is_initialized = false;
    
    private Integer roomid;
    private boolean roomid_is_modified = false;
    private boolean roomid_is_initialized = false;
    
    private java.sql.Timestamp blockstart;
    private boolean blockstart_is_modified = false;
    private boolean blockstart_is_initialized = false;
    
    private java.sql.Timestamp blockend;
    private boolean blockend_is_modified = false;
    private boolean blockend_is_initialized = false;
    
    private Integer reasonid;
    private boolean reasonid_is_modified = false;
    private boolean reasonid_is_initialized = false;
    
    private String note;
    private boolean note_is_modified = false;
    private boolean note_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private String room;
    private boolean room_is_modified = false;
    private boolean room_is_initialized = false;
    
    private String roomtype;
    private boolean roomtype_is_modified = false;
    private boolean roomtype_is_initialized = false;
    
    private String reason;
    private boolean reason_is_modified = false;
    private boolean reason_is_initialized = false;
    
    private String createdby;
    private boolean createdby_is_modified = false;
    private boolean createdby_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VBlockroomBean()
    {
    }
    
    /**
     * Getter method for blockroomid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_blockroom.blockroomid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of blockroomid
     */
    public Long getBlockroomid()
    {
        return blockroomid; 
    }

    /**
     * Setter method for blockroomid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to blockroomid
     */
    public void setBlockroomid(Long newVal) {
        if ((newVal != null && this.blockroomid != null && (newVal.compareTo(this.blockroomid) == 0)) || 
            (newVal == null && this.blockroomid == null && blockroomid_is_initialized)) {
            return; 
        } 
        this.blockroomid = newVal; 
        blockroomid_is_modified = true; 
        blockroomid_is_initialized = true; 
    }

    /**
     * Setter method for blockroomid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to blockroomid
     */
    public void setBlockroomid(long newVal) {
        setBlockroomid(new Long(newVal));
    }

    /**
     * Determines if the blockroomid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBlockroomidModified() {
        return blockroomid_is_modified; 
    }

    /**
     * Determines if the blockroomid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBlockroomidInitialized() {
        return blockroomid_is_initialized; 
    }

    /**
     * Getter method for roomid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_blockroom.roomid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of roomid
     */
    public Integer getRoomid()
    {
        return roomid; 
    }

    /**
     * Setter method for roomid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomid
     */
    public void setRoomid(Integer newVal) {
        if ((newVal != null && this.roomid != null && (newVal.compareTo(this.roomid) == 0)) || 
            (newVal == null && this.roomid == null && roomid_is_initialized)) {
            return; 
        } 
        this.roomid = newVal; 
        roomid_is_modified = true; 
        roomid_is_initialized = true; 
    }

    /**
     * Setter method for roomid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to roomid
     */
    public void setRoomid(int newVal) {
        setRoomid(new Integer(newVal));
    }

    /**
     * Determines if the roomid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomidModified() {
        return roomid_is_modified; 
    }

    /**
     * Determines if the roomid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomidInitialized() {
        return roomid_is_initialized; 
    }

    /**
     * Getter method for blockstart.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_blockroom.blockstart
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of blockstart
     */
    public java.sql.Timestamp getBlockstart()
    {
        return blockstart; 
    }

    /**
     * Setter method for blockstart.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to blockstart
     */
    public void setBlockstart(java.sql.Timestamp newVal) {
        if ((newVal != null && this.blockstart != null && (newVal.compareTo(this.blockstart) == 0)) || 
            (newVal == null && this.blockstart == null && blockstart_is_initialized)) {
            return; 
        } 
        this.blockstart = newVal; 
        blockstart_is_modified = true; 
        blockstart_is_initialized = true; 
    }

    /**
     * Setter method for blockstart.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to blockstart
     */
    public void setBlockstart(long newVal) {
        setBlockstart(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the blockstart has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBlockstartModified() {
        return blockstart_is_modified; 
    }

    /**
     * Determines if the blockstart has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBlockstartInitialized() {
        return blockstart_is_initialized; 
    }

    /**
     * Getter method for blockend.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_blockroom.blockend
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of blockend
     */
    public java.sql.Timestamp getBlockend()
    {
        return blockend; 
    }

    /**
     * Setter method for blockend.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to blockend
     */
    public void setBlockend(java.sql.Timestamp newVal) {
        if ((newVal != null && this.blockend != null && (newVal.compareTo(this.blockend) == 0)) || 
            (newVal == null && this.blockend == null && blockend_is_initialized)) {
            return; 
        } 
        this.blockend = newVal; 
        blockend_is_modified = true; 
        blockend_is_initialized = true; 
    }

    /**
     * Setter method for blockend.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to blockend
     */
    public void setBlockend(long newVal) {
        setBlockend(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the blockend has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBlockendModified() {
        return blockend_is_modified; 
    }

    /**
     * Determines if the blockend has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBlockendInitialized() {
        return blockend_is_initialized; 
    }

    /**
     * Getter method for reasonid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_blockroom.reasonid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of reasonid
     */
    public Integer getReasonid()
    {
        return reasonid; 
    }

    /**
     * Setter method for reasonid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reasonid
     */
    public void setReasonid(Integer newVal) {
        if ((newVal != null && this.reasonid != null && (newVal.compareTo(this.reasonid) == 0)) || 
            (newVal == null && this.reasonid == null && reasonid_is_initialized)) {
            return; 
        } 
        this.reasonid = newVal; 
        reasonid_is_modified = true; 
        reasonid_is_initialized = true; 
    }

    /**
     * Setter method for reasonid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reasonid
     */
    public void setReasonid(int newVal) {
        setReasonid(new Integer(newVal));
    }

    /**
     * Determines if the reasonid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReasonidModified() {
        return reasonid_is_modified; 
    }

    /**
     * Determines if the reasonid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReasonidInitialized() {
        return reasonid_is_initialized; 
    }

    /**
     * Getter method for note.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_blockroom.note
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of note
     */
    public String getNote()
    {
        return note; 
    }

    /**
     * Setter method for note.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to note
     */
    public void setNote(String newVal) {
        if ((newVal != null && this.note != null && (newVal.compareTo(this.note) == 0)) || 
            (newVal == null && this.note == null && note_is_initialized)) {
            return; 
        } 
        this.note = newVal; 
        note_is_modified = true; 
        note_is_initialized = true; 
    }

    /**
     * Determines if the note has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoteModified() {
        return note_is_modified; 
    }

    /**
     * Determines if the note has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoteInitialized() {
        return note_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_blockroom.regdate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_blockroom.regbyid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for room.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_blockroom.room
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of room
     */
    public String getRoom()
    {
        return room; 
    }

    /**
     * Setter method for room.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to room
     */
    public void setRoom(String newVal) {
        if ((newVal != null && this.room != null && (newVal.compareTo(this.room) == 0)) || 
            (newVal == null && this.room == null && room_is_initialized)) {
            return; 
        } 
        this.room = newVal; 
        room_is_modified = true; 
        room_is_initialized = true; 
    }

    /**
     * Determines if the room has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomModified() {
        return room_is_modified; 
    }

    /**
     * Determines if the room has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomInitialized() {
        return room_is_initialized; 
    }

    /**
     * Getter method for roomtype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_blockroom.roomtype
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of roomtype
     */
    public String getRoomtype()
    {
        return roomtype; 
    }

    /**
     * Setter method for roomtype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomtype
     */
    public void setRoomtype(String newVal) {
        if ((newVal != null && this.roomtype != null && (newVal.compareTo(this.roomtype) == 0)) || 
            (newVal == null && this.roomtype == null && roomtype_is_initialized)) {
            return; 
        } 
        this.roomtype = newVal; 
        roomtype_is_modified = true; 
        roomtype_is_initialized = true; 
    }

    /**
     * Determines if the roomtype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomtypeModified() {
        return roomtype_is_modified; 
    }

    /**
     * Determines if the roomtype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomtypeInitialized() {
        return roomtype_is_initialized; 
    }

    /**
     * Getter method for reason.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_blockroom.reason
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of reason
     */
    public String getReason()
    {
        return reason; 
    }

    /**
     * Setter method for reason.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reason
     */
    public void setReason(String newVal) {
        if ((newVal != null && this.reason != null && (newVal.compareTo(this.reason) == 0)) || 
            (newVal == null && this.reason == null && reason_is_initialized)) {
            return; 
        } 
        this.reason = newVal; 
        reason_is_modified = true; 
        reason_is_initialized = true; 
    }

    /**
     * Determines if the reason has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReasonModified() {
        return reason_is_modified; 
    }

    /**
     * Determines if the reason has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReasonInitialized() {
        return reason_is_initialized; 
    }

    /**
     * Getter method for createdby.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_blockroom.createdby
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of createdby
     */
    public String getCreatedby()
    {
        return createdby; 
    }

    /**
     * Setter method for createdby.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to createdby
     */
    public void setCreatedby(String newVal) {
        if ((newVal != null && this.createdby != null && (newVal.compareTo(this.createdby) == 0)) || 
            (newVal == null && this.createdby == null && createdby_is_initialized)) {
            return; 
        } 
        this.createdby = newVal; 
        createdby_is_modified = true; 
        createdby_is_initialized = true; 
    }

    /**
     * Determines if the createdby has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreatedbyModified() {
        return createdby_is_modified; 
    }

    /**
     * Determines if the createdby has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreatedbyInitialized() {
        return createdby_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return blockroomid_is_modified || 
		roomid_is_modified || 
		blockstart_is_modified || 
		blockend_is_modified || 
		reasonid_is_modified || 
		note_is_modified || 
		regdate_is_modified || 
		regbyid_is_modified || 
		room_is_modified || 
		roomtype_is_modified || 
		reason_is_modified || 
		createdby_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        blockroomid_is_modified = false;
        roomid_is_modified = false;
        blockstart_is_modified = false;
        blockend_is_modified = false;
        reasonid_is_modified = false;
        note_is_modified = false;
        regdate_is_modified = false;
        regbyid_is_modified = false;
        room_is_modified = false;
        roomtype_is_modified = false;
        reason_is_modified = false;
        createdby_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VBlockroomBean bean) {
        setBlockroomid(bean.getBlockroomid());
        setRoomid(bean.getRoomid());
        setBlockstart(bean.getBlockstart());
        setBlockend(bean.getBlockend());
        setReasonid(bean.getReasonid());
        setNote(bean.getNote());
        setRegdate(bean.getRegdate());
        setRegbyid(bean.getRegbyid());
        setRoom(bean.getRoom());
        setRoomtype(bean.getRoomtype());
        setReason(bean.getReason());
        setCreatedby(bean.getCreatedby());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[v_blockroom] "
                 + "\n - v_blockroom.blockroomid = " + (blockroomid_is_initialized ? ("[" + (blockroomid == null ? null : blockroomid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_blockroom.roomid = " + (roomid_is_initialized ? ("[" + (roomid == null ? null : roomid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_blockroom.blockstart = " + (blockstart_is_initialized ? ("[" + (blockstart == null ? null : blockstart.toString()) + "]") : "not initialized") + ""
                 + "\n - v_blockroom.blockend = " + (blockend_is_initialized ? ("[" + (blockend == null ? null : blockend.toString()) + "]") : "not initialized") + ""
                 + "\n - v_blockroom.reasonid = " + (reasonid_is_initialized ? ("[" + (reasonid == null ? null : reasonid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_blockroom.note = " + (note_is_initialized ? ("[" + (note == null ? null : note.toString()) + "]") : "not initialized") + ""
                 + "\n - v_blockroom.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_blockroom.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_blockroom.room = " + (room_is_initialized ? ("[" + (room == null ? null : room.toString()) + "]") : "not initialized") + ""
                 + "\n - v_blockroom.roomtype = " + (roomtype_is_initialized ? ("[" + (roomtype == null ? null : roomtype.toString()) + "]") : "not initialized") + ""
                 + "\n - v_blockroom.reason = " + (reason_is_initialized ? ("[" + (reason == null ? null : reason.toString()) + "]") : "not initialized") + ""
                 + "\n - v_blockroom.createdby = " + (createdby_is_initialized ? ("[" + (createdby == null ? null : createdby.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
