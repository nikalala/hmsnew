// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class DisplaysettingsBean
// extends+ 

// extends- 

{
    private Integer displaysettingsid;
    private boolean displaysettingsid_is_modified = false;
    private boolean displaysettingsid_is_initialized = false;
    
    private Integer timeformat;
    private boolean timeformat_is_modified = false;
    private boolean timeformat_is_initialized = false;
    
    private Integer dateformat;
    private boolean dateformat_is_modified = false;
    private boolean dateformat_is_initialized = false;
    
    private Integer arrdepformat;
    private boolean arrdepformat_is_modified = false;
    private boolean arrdepformat_is_initialized = false;
    
    private Integer timezome;
    private boolean timezome_is_modified = false;
    private boolean timezome_is_initialized = false;
    
    private Integer idtypeid;
    private boolean idtypeid_is_modified = false;
    private boolean idtypeid_is_initialized = false;
    
    private Integer reservationtypeid;
    private boolean reservationtypeid_is_modified = false;
    private boolean reservationtypeid_is_initialized = false;
    
    private Integer roundtype;
    private boolean roundtype_is_modified = false;
    private boolean roundtype_is_initialized = false;
    
    private Integer salutationid;
    private boolean salutationid_is_modified = false;
    private boolean salutationid_is_initialized = false;
    
    private Integer billto;
    private boolean billto_is_modified = false;
    private boolean billto_is_initialized = false;
    
    private Integer paymentmode;
    private boolean paymentmode_is_modified = false;
    private boolean paymentmode_is_initialized = false;
    
    private Integer paymentmethodid;
    private boolean paymentmethodid_is_modified = false;
    private boolean paymentmethodid_is_initialized = false;
    
    private Integer webrate;
    private boolean webrate_is_modified = false;
    private boolean webrate_is_initialized = false;
    
    private Integer webroominvmode;
    private boolean webroominvmode_is_modified = false;
    private boolean webroominvmode_is_initialized = false;
    
    private String paymentgateway;
    private boolean paymentgateway_is_modified = false;
    private boolean paymentgateway_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private String zip;
    private boolean zip_is_modified = false;
    private boolean zip_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    DisplaysettingsBean()
    {
    }
    
    /**
     * Getter method for displaysettingsid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.displaysettingsid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of displaysettingsid
     */
    public Integer getDisplaysettingsid()
    {
        return displaysettingsid; 
    }

    /**
     * Setter method for displaysettingsid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to displaysettingsid
     */
    public void setDisplaysettingsid(Integer newVal) {
        if ((newVal != null && this.displaysettingsid != null && (newVal.compareTo(this.displaysettingsid) == 0)) || 
            (newVal == null && this.displaysettingsid == null && displaysettingsid_is_initialized)) {
            return; 
        } 
        this.displaysettingsid = newVal; 
        displaysettingsid_is_modified = true; 
        displaysettingsid_is_initialized = true; 
    }

    /**
     * Setter method for displaysettingsid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to displaysettingsid
     */
    public void setDisplaysettingsid(int newVal) {
        setDisplaysettingsid(new Integer(newVal));
    }

    /**
     * Determines if the displaysettingsid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDisplaysettingsidModified() {
        return displaysettingsid_is_modified; 
    }

    /**
     * Determines if the displaysettingsid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDisplaysettingsidInitialized() {
        return displaysettingsid_is_initialized; 
    }

    /**
     * Getter method for timeformat.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.timeformat
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of timeformat
     */
    public Integer getTimeformat()
    {
        return timeformat; 
    }

    /**
     * Setter method for timeformat.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to timeformat
     */
    public void setTimeformat(Integer newVal) {
        if ((newVal != null && this.timeformat != null && (newVal.compareTo(this.timeformat) == 0)) || 
            (newVal == null && this.timeformat == null && timeformat_is_initialized)) {
            return; 
        } 
        this.timeformat = newVal; 
        timeformat_is_modified = true; 
        timeformat_is_initialized = true; 
    }

    /**
     * Setter method for timeformat.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to timeformat
     */
    public void setTimeformat(int newVal) {
        setTimeformat(new Integer(newVal));
    }

    /**
     * Determines if the timeformat has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTimeformatModified() {
        return timeformat_is_modified; 
    }

    /**
     * Determines if the timeformat has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTimeformatInitialized() {
        return timeformat_is_initialized; 
    }

    /**
     * Getter method for dateformat.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.dateformat
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of dateformat
     */
    public Integer getDateformat()
    {
        return dateformat; 
    }

    /**
     * Setter method for dateformat.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to dateformat
     */
    public void setDateformat(Integer newVal) {
        if ((newVal != null && this.dateformat != null && (newVal.compareTo(this.dateformat) == 0)) || 
            (newVal == null && this.dateformat == null && dateformat_is_initialized)) {
            return; 
        } 
        this.dateformat = newVal; 
        dateformat_is_modified = true; 
        dateformat_is_initialized = true; 
    }

    /**
     * Setter method for dateformat.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to dateformat
     */
    public void setDateformat(int newVal) {
        setDateformat(new Integer(newVal));
    }

    /**
     * Determines if the dateformat has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDateformatModified() {
        return dateformat_is_modified; 
    }

    /**
     * Determines if the dateformat has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDateformatInitialized() {
        return dateformat_is_initialized; 
    }

    /**
     * Getter method for arrdepformat.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.arrdepformat
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of arrdepformat
     */
    public Integer getArrdepformat()
    {
        return arrdepformat; 
    }

    /**
     * Setter method for arrdepformat.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to arrdepformat
     */
    public void setArrdepformat(Integer newVal) {
        if ((newVal != null && this.arrdepformat != null && (newVal.compareTo(this.arrdepformat) == 0)) || 
            (newVal == null && this.arrdepformat == null && arrdepformat_is_initialized)) {
            return; 
        } 
        this.arrdepformat = newVal; 
        arrdepformat_is_modified = true; 
        arrdepformat_is_initialized = true; 
    }

    /**
     * Setter method for arrdepformat.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to arrdepformat
     */
    public void setArrdepformat(int newVal) {
        setArrdepformat(new Integer(newVal));
    }

    /**
     * Determines if the arrdepformat has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isArrdepformatModified() {
        return arrdepformat_is_modified; 
    }

    /**
     * Determines if the arrdepformat has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isArrdepformatInitialized() {
        return arrdepformat_is_initialized; 
    }

    /**
     * Getter method for timezome.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.timezome
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of timezome
     */
    public Integer getTimezome()
    {
        return timezome; 
    }

    /**
     * Setter method for timezome.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to timezome
     */
    public void setTimezome(Integer newVal) {
        if ((newVal != null && this.timezome != null && (newVal.compareTo(this.timezome) == 0)) || 
            (newVal == null && this.timezome == null && timezome_is_initialized)) {
            return; 
        } 
        this.timezome = newVal; 
        timezome_is_modified = true; 
        timezome_is_initialized = true; 
    }

    /**
     * Setter method for timezome.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to timezome
     */
    public void setTimezome(int newVal) {
        setTimezome(new Integer(newVal));
    }

    /**
     * Determines if the timezome has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTimezomeModified() {
        return timezome_is_modified; 
    }

    /**
     * Determines if the timezome has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTimezomeInitialized() {
        return timezome_is_initialized; 
    }

    /**
     * Getter method for idtypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.idtypeid
     * <li> foreign key: idtype.idtypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of idtypeid
     */
    public Integer getIdtypeid()
    {
        return idtypeid; 
    }

    /**
     * Setter method for idtypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to idtypeid
     */
    public void setIdtypeid(Integer newVal) {
        if ((newVal != null && this.idtypeid != null && (newVal.compareTo(this.idtypeid) == 0)) || 
            (newVal == null && this.idtypeid == null && idtypeid_is_initialized)) {
            return; 
        } 
        this.idtypeid = newVal; 
        idtypeid_is_modified = true; 
        idtypeid_is_initialized = true; 
    }

    /**
     * Setter method for idtypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to idtypeid
     */
    public void setIdtypeid(int newVal) {
        setIdtypeid(new Integer(newVal));
    }

    /**
     * Determines if the idtypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIdtypeidModified() {
        return idtypeid_is_modified; 
    }

    /**
     * Determines if the idtypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIdtypeidInitialized() {
        return idtypeid_is_initialized; 
    }

    /**
     * Getter method for reservationtypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.reservationtypeid
     * <li> foreign key: reservationtype.reservationtypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of reservationtypeid
     */
    public Integer getReservationtypeid()
    {
        return reservationtypeid; 
    }

    /**
     * Setter method for reservationtypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationtypeid
     */
    public void setReservationtypeid(Integer newVal) {
        if ((newVal != null && this.reservationtypeid != null && (newVal.compareTo(this.reservationtypeid) == 0)) || 
            (newVal == null && this.reservationtypeid == null && reservationtypeid_is_initialized)) {
            return; 
        } 
        this.reservationtypeid = newVal; 
        reservationtypeid_is_modified = true; 
        reservationtypeid_is_initialized = true; 
    }

    /**
     * Setter method for reservationtypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationtypeid
     */
    public void setReservationtypeid(int newVal) {
        setReservationtypeid(new Integer(newVal));
    }

    /**
     * Determines if the reservationtypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationtypeidModified() {
        return reservationtypeid_is_modified; 
    }

    /**
     * Determines if the reservationtypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationtypeidInitialized() {
        return reservationtypeid_is_initialized; 
    }

    /**
     * Getter method for roundtype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.roundtype
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of roundtype
     */
    public Integer getRoundtype()
    {
        return roundtype; 
    }

    /**
     * Setter method for roundtype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roundtype
     */
    public void setRoundtype(Integer newVal) {
        if ((newVal != null && this.roundtype != null && (newVal.compareTo(this.roundtype) == 0)) || 
            (newVal == null && this.roundtype == null && roundtype_is_initialized)) {
            return; 
        } 
        this.roundtype = newVal; 
        roundtype_is_modified = true; 
        roundtype_is_initialized = true; 
    }

    /**
     * Setter method for roundtype.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to roundtype
     */
    public void setRoundtype(int newVal) {
        setRoundtype(new Integer(newVal));
    }

    /**
     * Determines if the roundtype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoundtypeModified() {
        return roundtype_is_modified; 
    }

    /**
     * Determines if the roundtype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoundtypeInitialized() {
        return roundtype_is_initialized; 
    }

    /**
     * Getter method for salutationid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.salutationid
     * <li> foreign key: salutation.salutationid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of salutationid
     */
    public Integer getSalutationid()
    {
        return salutationid; 
    }

    /**
     * Setter method for salutationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to salutationid
     */
    public void setSalutationid(Integer newVal) {
        if ((newVal != null && this.salutationid != null && (newVal.compareTo(this.salutationid) == 0)) || 
            (newVal == null && this.salutationid == null && salutationid_is_initialized)) {
            return; 
        } 
        this.salutationid = newVal; 
        salutationid_is_modified = true; 
        salutationid_is_initialized = true; 
    }

    /**
     * Setter method for salutationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to salutationid
     */
    public void setSalutationid(int newVal) {
        setSalutationid(new Integer(newVal));
    }

    /**
     * Determines if the salutationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSalutationidModified() {
        return salutationid_is_modified; 
    }

    /**
     * Determines if the salutationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSalutationidInitialized() {
        return salutationid_is_initialized; 
    }

    /**
     * Getter method for billto.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.billto
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of billto
     */
    public Integer getBillto()
    {
        return billto; 
    }

    /**
     * Setter method for billto.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to billto
     */
    public void setBillto(Integer newVal) {
        if ((newVal != null && this.billto != null && (newVal.compareTo(this.billto) == 0)) || 
            (newVal == null && this.billto == null && billto_is_initialized)) {
            return; 
        } 
        this.billto = newVal; 
        billto_is_modified = true; 
        billto_is_initialized = true; 
    }

    /**
     * Setter method for billto.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to billto
     */
    public void setBillto(int newVal) {
        setBillto(new Integer(newVal));
    }

    /**
     * Determines if the billto has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBilltoModified() {
        return billto_is_modified; 
    }

    /**
     * Determines if the billto has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBilltoInitialized() {
        return billto_is_initialized; 
    }

    /**
     * Getter method for paymentmode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.paymentmode
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of paymentmode
     */
    public Integer getPaymentmode()
    {
        return paymentmode; 
    }

    /**
     * Setter method for paymentmode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to paymentmode
     */
    public void setPaymentmode(Integer newVal) {
        if ((newVal != null && this.paymentmode != null && (newVal.compareTo(this.paymentmode) == 0)) || 
            (newVal == null && this.paymentmode == null && paymentmode_is_initialized)) {
            return; 
        } 
        this.paymentmode = newVal; 
        paymentmode_is_modified = true; 
        paymentmode_is_initialized = true; 
    }

    /**
     * Setter method for paymentmode.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to paymentmode
     */
    public void setPaymentmode(int newVal) {
        setPaymentmode(new Integer(newVal));
    }

    /**
     * Determines if the paymentmode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaymentmodeModified() {
        return paymentmode_is_modified; 
    }

    /**
     * Determines if the paymentmode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaymentmodeInitialized() {
        return paymentmode_is_initialized; 
    }

    /**
     * Getter method for paymentmethodid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.paymentmethodid
     * <li> foreign key: paymentmethod.paymentmethodid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of paymentmethodid
     */
    public Integer getPaymentmethodid()
    {
        return paymentmethodid; 
    }

    /**
     * Setter method for paymentmethodid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to paymentmethodid
     */
    public void setPaymentmethodid(Integer newVal) {
        if ((newVal != null && this.paymentmethodid != null && (newVal.compareTo(this.paymentmethodid) == 0)) || 
            (newVal == null && this.paymentmethodid == null && paymentmethodid_is_initialized)) {
            return; 
        } 
        this.paymentmethodid = newVal; 
        paymentmethodid_is_modified = true; 
        paymentmethodid_is_initialized = true; 
    }

    /**
     * Setter method for paymentmethodid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to paymentmethodid
     */
    public void setPaymentmethodid(int newVal) {
        setPaymentmethodid(new Integer(newVal));
    }

    /**
     * Determines if the paymentmethodid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaymentmethodidModified() {
        return paymentmethodid_is_modified; 
    }

    /**
     * Determines if the paymentmethodid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaymentmethodidInitialized() {
        return paymentmethodid_is_initialized; 
    }

    /**
     * Getter method for webrate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.webrate
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of webrate
     */
    public Integer getWebrate()
    {
        return webrate; 
    }

    /**
     * Setter method for webrate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to webrate
     */
    public void setWebrate(Integer newVal) {
        if ((newVal != null && this.webrate != null && (newVal.compareTo(this.webrate) == 0)) || 
            (newVal == null && this.webrate == null && webrate_is_initialized)) {
            return; 
        } 
        this.webrate = newVal; 
        webrate_is_modified = true; 
        webrate_is_initialized = true; 
    }

    /**
     * Setter method for webrate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to webrate
     */
    public void setWebrate(int newVal) {
        setWebrate(new Integer(newVal));
    }

    /**
     * Determines if the webrate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWebrateModified() {
        return webrate_is_modified; 
    }

    /**
     * Determines if the webrate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWebrateInitialized() {
        return webrate_is_initialized; 
    }

    /**
     * Getter method for webroominvmode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.webroominvmode
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of webroominvmode
     */
    public Integer getWebroominvmode()
    {
        return webroominvmode; 
    }

    /**
     * Setter method for webroominvmode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to webroominvmode
     */
    public void setWebroominvmode(Integer newVal) {
        if ((newVal != null && this.webroominvmode != null && (newVal.compareTo(this.webroominvmode) == 0)) || 
            (newVal == null && this.webroominvmode == null && webroominvmode_is_initialized)) {
            return; 
        } 
        this.webroominvmode = newVal; 
        webroominvmode_is_modified = true; 
        webroominvmode_is_initialized = true; 
    }

    /**
     * Setter method for webroominvmode.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to webroominvmode
     */
    public void setWebroominvmode(int newVal) {
        setWebroominvmode(new Integer(newVal));
    }

    /**
     * Determines if the webroominvmode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWebroominvmodeModified() {
        return webroominvmode_is_modified; 
    }

    /**
     * Determines if the webroominvmode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWebroominvmodeInitialized() {
        return webroominvmode_is_initialized; 
    }

    /**
     * Getter method for paymentgateway.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.paymentgateway
     * <li>default value: ''::text
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of paymentgateway
     */
    public String getPaymentgateway()
    {
        return paymentgateway; 
    }

    /**
     * Setter method for paymentgateway.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to paymentgateway
     */
    public void setPaymentgateway(String newVal) {
        if ((newVal != null && this.paymentgateway != null && (newVal.compareTo(this.paymentgateway) == 0)) || 
            (newVal == null && this.paymentgateway == null && paymentgateway_is_initialized)) {
            return; 
        } 
        this.paymentgateway = newVal; 
        paymentgateway_is_modified = true; 
        paymentgateway_is_initialized = true; 
    }

    /**
     * Determines if the paymentgateway has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaymentgatewayModified() {
        return paymentgateway_is_modified; 
    }

    /**
     * Determines if the paymentgateway has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaymentgatewayInitialized() {
        return paymentgateway_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.regbyid
     * <li> foreign key: personnel.personnelid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.regdate
     * <li>default value: now()
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for zip.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: displaysettings.zip
     * <li>default value: 'ინდექსი'::text
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of zip
     */
    public String getZip()
    {
        return zip; 
    }

    /**
     * Setter method for zip.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to zip
     */
    public void setZip(String newVal) {
        if ((newVal != null && this.zip != null && (newVal.compareTo(this.zip) == 0)) || 
            (newVal == null && this.zip == null && zip_is_initialized)) {
            return; 
        } 
        this.zip = newVal; 
        zip_is_modified = true; 
        zip_is_initialized = true; 
    }

    /**
     * Determines if the zip has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isZipModified() {
        return zip_is_modified; 
    }

    /**
     * Determines if the zip has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isZipInitialized() {
        return zip_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return displaysettingsid_is_modified || 
		timeformat_is_modified || 
		dateformat_is_modified || 
		arrdepformat_is_modified || 
		timezome_is_modified || 
		idtypeid_is_modified || 
		reservationtypeid_is_modified || 
		roundtype_is_modified || 
		salutationid_is_modified || 
		billto_is_modified || 
		paymentmode_is_modified || 
		paymentmethodid_is_modified || 
		webrate_is_modified || 
		webroominvmode_is_modified || 
		paymentgateway_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		zip_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        displaysettingsid_is_modified = false;
        timeformat_is_modified = false;
        dateformat_is_modified = false;
        arrdepformat_is_modified = false;
        timezome_is_modified = false;
        idtypeid_is_modified = false;
        reservationtypeid_is_modified = false;
        roundtype_is_modified = false;
        salutationid_is_modified = false;
        billto_is_modified = false;
        paymentmode_is_modified = false;
        paymentmethodid_is_modified = false;
        webrate_is_modified = false;
        webroominvmode_is_modified = false;
        paymentgateway_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        zip_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(DisplaysettingsBean bean) {
        setDisplaysettingsid(bean.getDisplaysettingsid());
        setTimeformat(bean.getTimeformat());
        setDateformat(bean.getDateformat());
        setArrdepformat(bean.getArrdepformat());
        setTimezome(bean.getTimezome());
        setIdtypeid(bean.getIdtypeid());
        setReservationtypeid(bean.getReservationtypeid());
        setRoundtype(bean.getRoundtype());
        setSalutationid(bean.getSalutationid());
        setBillto(bean.getBillto());
        setPaymentmode(bean.getPaymentmode());
        setPaymentmethodid(bean.getPaymentmethodid());
        setWebrate(bean.getWebrate());
        setWebroominvmode(bean.getWebroominvmode());
        setPaymentgateway(bean.getPaymentgateway());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setZip(bean.getZip());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[displaysettings] "
                 + "\n - displaysettings.displaysettingsid = " + (displaysettingsid_is_initialized ? ("[" + (displaysettingsid == null ? null : displaysettingsid.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.timeformat = " + (timeformat_is_initialized ? ("[" + (timeformat == null ? null : timeformat.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.dateformat = " + (dateformat_is_initialized ? ("[" + (dateformat == null ? null : dateformat.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.arrdepformat = " + (arrdepformat_is_initialized ? ("[" + (arrdepformat == null ? null : arrdepformat.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.timezome = " + (timezome_is_initialized ? ("[" + (timezome == null ? null : timezome.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.idtypeid = " + (idtypeid_is_initialized ? ("[" + (idtypeid == null ? null : idtypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.reservationtypeid = " + (reservationtypeid_is_initialized ? ("[" + (reservationtypeid == null ? null : reservationtypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.roundtype = " + (roundtype_is_initialized ? ("[" + (roundtype == null ? null : roundtype.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.salutationid = " + (salutationid_is_initialized ? ("[" + (salutationid == null ? null : salutationid.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.billto = " + (billto_is_initialized ? ("[" + (billto == null ? null : billto.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.paymentmode = " + (paymentmode_is_initialized ? ("[" + (paymentmode == null ? null : paymentmode.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.paymentmethodid = " + (paymentmethodid_is_initialized ? ("[" + (paymentmethodid == null ? null : paymentmethodid.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.webrate = " + (webrate_is_initialized ? ("[" + (webrate == null ? null : webrate.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.webroominvmode = " + (webroominvmode_is_initialized ? ("[" + (webroominvmode == null ? null : webroominvmode.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.paymentgateway = " + (paymentgateway_is_initialized ? ("[" + (paymentgateway == null ? null : paymentgateway.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - displaysettings.zip = " + (zip_is_initialized ? ("[" + (zip == null ? null : zip.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
