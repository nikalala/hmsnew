// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.util.Comparator;
// imports+ 

// imports- 


/**
 * Comparator class is used to sort the OrdermainBean objects.
 */
public class OrdermainComparator implements Comparator
// extends+ 

// extends- 

{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for OrdermainComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new OrdermainComparator(OrdermainManager.ORDERMAINID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>OrdermainManager.ID_ORDERMAINID
     *   <li>OrdermainManager.ID_HALLNAME
     *   <li>OrdermainManager.ID_TABLENAME
     *   <li>OrdermainManager.ID_OPENDATE
     *   <li>OrdermainManager.ID_CLOSEDATE
     *   <li>OrdermainManager.ID_WAITERNAME
     *   <li>OrdermainManager.ID_AMOUNT
     *   <li>OrdermainManager.ID_DISCOUNT
     *   <li>OrdermainManager.ID_PRICE
     *   <li>OrdermainManager.ID_CASH
     *   <li>OrdermainManager.ID_PAID
     *   <li>OrdermainManager.ID_REGNAME
     *   <li>OrdermainManager.ID_REGDATE
     * </ul>
     */
    public OrdermainComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for OrdermainComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new OrdermainComparator(OrdermainManager.ORDERMAINID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>OrdermainManager.ID_ORDERMAINID
     *   <li>OrdermainManager.ID_HALLNAME
     *   <li>OrdermainManager.ID_TABLENAME
     *   <li>OrdermainManager.ID_OPENDATE
     *   <li>OrdermainManager.ID_CLOSEDATE
     *   <li>OrdermainManager.ID_WAITERNAME
     *   <li>OrdermainManager.ID_AMOUNT
     *   <li>OrdermainManager.ID_DISCOUNT
     *   <li>OrdermainManager.ID_PRICE
     *   <li>OrdermainManager.ID_CASH
     *   <li>OrdermainManager.ID_PAID
     *   <li>OrdermainManager.ID_REGNAME
     *   <li>OrdermainManager.ID_REGDATE
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public OrdermainComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        OrdermainBean b1 = (OrdermainBean)pObj1;
        OrdermainBean b2 = (OrdermainBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case OrdermainManager.ID_ORDERMAINID:
                if (b1.getOrdermainid() == null && b2.getOrdermainid() != null) {
                    iReturn = -1;
                } else if (b1.getOrdermainid() == null && b2.getOrdermainid() == null) {
                    iReturn = 0;
                } else if (b1.getOrdermainid() != null && b2.getOrdermainid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getOrdermainid().compareTo(b2.getOrdermainid());
                }
                break;
            case OrdermainManager.ID_HALLNAME:
                if (b1.getHallname() == null && b2.getHallname() != null) {
                    iReturn = -1;
                } else if (b1.getHallname() == null && b2.getHallname() == null) {
                    iReturn = 0;
                } else if (b1.getHallname() != null && b2.getHallname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getHallname().compareTo(b2.getHallname());
                }
                break;
            case OrdermainManager.ID_TABLENAME:
                if (b1.getTablename() == null && b2.getTablename() != null) {
                    iReturn = -1;
                } else if (b1.getTablename() == null && b2.getTablename() == null) {
                    iReturn = 0;
                } else if (b1.getTablename() != null && b2.getTablename() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getTablename().compareTo(b2.getTablename());
                }
                break;
            case OrdermainManager.ID_OPENDATE:
                if (b1.getOpendate() == null && b2.getOpendate() != null) {
                    iReturn = -1;
                } else if (b1.getOpendate() == null && b2.getOpendate() == null) {
                    iReturn = 0;
                } else if (b1.getOpendate() != null && b2.getOpendate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getOpendate().compareTo(b2.getOpendate());
                }
                break;
            case OrdermainManager.ID_CLOSEDATE:
                if (b1.getClosedate() == null && b2.getClosedate() != null) {
                    iReturn = -1;
                } else if (b1.getClosedate() == null && b2.getClosedate() == null) {
                    iReturn = 0;
                } else if (b1.getClosedate() != null && b2.getClosedate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getClosedate().compareTo(b2.getClosedate());
                }
                break;
            case OrdermainManager.ID_WAITERNAME:
                if (b1.getWaitername() == null && b2.getWaitername() != null) {
                    iReturn = -1;
                } else if (b1.getWaitername() == null && b2.getWaitername() == null) {
                    iReturn = 0;
                } else if (b1.getWaitername() != null && b2.getWaitername() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getWaitername().compareTo(b2.getWaitername());
                }
                break;
            case OrdermainManager.ID_AMOUNT:
                if (b1.getAmount() == null && b2.getAmount() != null) {
                    iReturn = -1;
                } else if (b1.getAmount() == null && b2.getAmount() == null) {
                    iReturn = 0;
                } else if (b1.getAmount() != null && b2.getAmount() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAmount().compareTo(b2.getAmount());
                }
                break;
            case OrdermainManager.ID_DISCOUNT:
                if (b1.getDiscount() == null && b2.getDiscount() != null) {
                    iReturn = -1;
                } else if (b1.getDiscount() == null && b2.getDiscount() == null) {
                    iReturn = 0;
                } else if (b1.getDiscount() != null && b2.getDiscount() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getDiscount().compareTo(b2.getDiscount());
                }
                break;
            case OrdermainManager.ID_PRICE:
                if (b1.getPrice() == null && b2.getPrice() != null) {
                    iReturn = -1;
                } else if (b1.getPrice() == null && b2.getPrice() == null) {
                    iReturn = 0;
                } else if (b1.getPrice() != null && b2.getPrice() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPrice().compareTo(b2.getPrice());
                }
                break;
            case OrdermainManager.ID_CASH:
                if (b1.getCash() == null && b2.getCash() != null) {
                    iReturn = -1;
                } else if (b1.getCash() == null && b2.getCash() == null) {
                    iReturn = 0;
                } else if (b1.getCash() != null && b2.getCash() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCash().compareTo(b2.getCash());
                }
                break;
            case OrdermainManager.ID_PAID:
                if (b1.getPaid() == null && b2.getPaid() != null) {
                    iReturn = -1;
                } else if (b1.getPaid() == null && b2.getPaid() == null) {
                    iReturn = 0;
                } else if (b1.getPaid() != null && b2.getPaid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPaid().compareTo(b2.getPaid());
                }
                break;
            case OrdermainManager.ID_REGNAME:
                if (b1.getRegname() == null && b2.getRegname() != null) {
                    iReturn = -1;
                } else if (b1.getRegname() == null && b2.getRegname() == null) {
                    iReturn = 0;
                } else if (b1.getRegname() != null && b2.getRegname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegname().compareTo(b2.getRegname());
                }
                break;
            case OrdermainManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 

}
