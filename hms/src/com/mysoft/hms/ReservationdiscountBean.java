// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class ReservationdiscountBean
// extends+ 

// extends- 

{
    private Long reservationdiscountid;
    private boolean reservationdiscountid_is_modified = false;
    private boolean reservationdiscountid_is_initialized = false;
    
    private Long reservationid;
    private boolean reservationid_is_modified = false;
    private boolean reservationid_is_initialized = false;
    
    private Integer discountid;
    private boolean discountid_is_modified = false;
    private boolean discountid_is_initialized = false;
    
    private Double postingvalueevery;
    private boolean postingvalueevery_is_modified = false;
    private boolean postingvalueevery_is_initialized = false;
    
    private Integer discountnights;
    private boolean discountnights_is_modified = false;
    private boolean discountnights_is_initialized = false;
    
    private Integer postingtype;
    private boolean postingtype_is_modified = false;
    private boolean postingtype_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Boolean opendates;
    private boolean opendates_is_modified = false;
    private boolean opendates_is_initialized = false;
    
    private Boolean auditeddays;
    private boolean auditeddays_is_modified = false;
    private boolean auditeddays_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ReservationdiscountBean()
    {
    }
    
    /**
     * Getter method for reservationdiscountid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationdiscount.reservationdiscountid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of reservationdiscountid
     */
    public Long getReservationdiscountid()
    {
        return reservationdiscountid; 
    }

    /**
     * Setter method for reservationdiscountid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationdiscountid
     */
    public void setReservationdiscountid(Long newVal) {
        if ((newVal != null && this.reservationdiscountid != null && (newVal.compareTo(this.reservationdiscountid) == 0)) || 
            (newVal == null && this.reservationdiscountid == null && reservationdiscountid_is_initialized)) {
            return; 
        } 
        this.reservationdiscountid = newVal; 
        reservationdiscountid_is_modified = true; 
        reservationdiscountid_is_initialized = true; 
    }

    /**
     * Setter method for reservationdiscountid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationdiscountid
     */
    public void setReservationdiscountid(long newVal) {
        setReservationdiscountid(new Long(newVal));
    }

    /**
     * Determines if the reservationdiscountid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationdiscountidModified() {
        return reservationdiscountid_is_modified; 
    }

    /**
     * Determines if the reservationdiscountid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationdiscountidInitialized() {
        return reservationdiscountid_is_initialized; 
    }

    /**
     * Getter method for reservationid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationdiscount.reservationid
     * <li> foreign key: reservation.reservationid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of reservationid
     */
    public Long getReservationid()
    {
        return reservationid; 
    }

    /**
     * Setter method for reservationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationid
     */
    public void setReservationid(Long newVal) {
        if ((newVal != null && this.reservationid != null && (newVal.compareTo(this.reservationid) == 0)) || 
            (newVal == null && this.reservationid == null && reservationid_is_initialized)) {
            return; 
        } 
        this.reservationid = newVal; 
        reservationid_is_modified = true; 
        reservationid_is_initialized = true; 
    }

    /**
     * Setter method for reservationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationid
     */
    public void setReservationid(long newVal) {
        setReservationid(new Long(newVal));
    }

    /**
     * Determines if the reservationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationidModified() {
        return reservationid_is_modified; 
    }

    /**
     * Determines if the reservationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationidInitialized() {
        return reservationid_is_initialized; 
    }

    /**
     * Getter method for discountid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationdiscount.discountid
     * <li> foreign key: discount.discountid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of discountid
     */
    public Integer getDiscountid()
    {
        return discountid; 
    }

    /**
     * Setter method for discountid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to discountid
     */
    public void setDiscountid(Integer newVal) {
        if ((newVal != null && this.discountid != null && (newVal.compareTo(this.discountid) == 0)) || 
            (newVal == null && this.discountid == null && discountid_is_initialized)) {
            return; 
        } 
        this.discountid = newVal; 
        discountid_is_modified = true; 
        discountid_is_initialized = true; 
    }

    /**
     * Setter method for discountid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to discountid
     */
    public void setDiscountid(int newVal) {
        setDiscountid(new Integer(newVal));
    }

    /**
     * Determines if the discountid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDiscountidModified() {
        return discountid_is_modified; 
    }

    /**
     * Determines if the discountid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDiscountidInitialized() {
        return discountid_is_initialized; 
    }

    /**
     * Getter method for postingvalueevery.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationdiscount.postingvalueevery
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of postingvalueevery
     */
    public Double getPostingvalueevery()
    {
        return postingvalueevery; 
    }

    /**
     * Setter method for postingvalueevery.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to postingvalueevery
     */
    public void setPostingvalueevery(Double newVal) {
        if ((newVal != null && this.postingvalueevery != null && (newVal.compareTo(this.postingvalueevery) == 0)) || 
            (newVal == null && this.postingvalueevery == null && postingvalueevery_is_initialized)) {
            return; 
        } 
        this.postingvalueevery = newVal; 
        postingvalueevery_is_modified = true; 
        postingvalueevery_is_initialized = true; 
    }

    /**
     * Setter method for postingvalueevery.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to postingvalueevery
     */
    public void setPostingvalueevery(double newVal) {
        setPostingvalueevery(new Double(newVal));
    }

    /**
     * Determines if the postingvalueevery has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPostingvalueeveryModified() {
        return postingvalueevery_is_modified; 
    }

    /**
     * Determines if the postingvalueevery has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPostingvalueeveryInitialized() {
        return postingvalueevery_is_initialized; 
    }

    /**
     * Getter method for discountnights.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationdiscount.discountnights
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of discountnights
     */
    public Integer getDiscountnights()
    {
        return discountnights; 
    }

    /**
     * Setter method for discountnights.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to discountnights
     */
    public void setDiscountnights(Integer newVal) {
        if ((newVal != null && this.discountnights != null && (newVal.compareTo(this.discountnights) == 0)) || 
            (newVal == null && this.discountnights == null && discountnights_is_initialized)) {
            return; 
        } 
        this.discountnights = newVal; 
        discountnights_is_modified = true; 
        discountnights_is_initialized = true; 
    }

    /**
     * Setter method for discountnights.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to discountnights
     */
    public void setDiscountnights(int newVal) {
        setDiscountnights(new Integer(newVal));
    }

    /**
     * Determines if the discountnights has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDiscountnightsModified() {
        return discountnights_is_modified; 
    }

    /**
     * Determines if the discountnights has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDiscountnightsInitialized() {
        return discountnights_is_initialized; 
    }

    /**
     * Getter method for postingtype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationdiscount.postingtype
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of postingtype
     */
    public Integer getPostingtype()
    {
        return postingtype; 
    }

    /**
     * Setter method for postingtype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to postingtype
     */
    public void setPostingtype(Integer newVal) {
        if ((newVal != null && this.postingtype != null && (newVal.compareTo(this.postingtype) == 0)) || 
            (newVal == null && this.postingtype == null && postingtype_is_initialized)) {
            return; 
        } 
        this.postingtype = newVal; 
        postingtype_is_modified = true; 
        postingtype_is_initialized = true; 
    }

    /**
     * Setter method for postingtype.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to postingtype
     */
    public void setPostingtype(int newVal) {
        setPostingtype(new Integer(newVal));
    }

    /**
     * Determines if the postingtype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPostingtypeModified() {
        return postingtype_is_modified; 
    }

    /**
     * Determines if the postingtype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPostingtypeInitialized() {
        return postingtype_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationdiscount.regbyid
     * <li> foreign key: personnel.personnelid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationdiscount.regdate
     * <li>default value: now()
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for opendates.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationdiscount.opendates
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of opendates
     */
    public Boolean getOpendates()
    {
        return opendates; 
    }

    /**
     * Setter method for opendates.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to opendates
     */
    public void setOpendates(Boolean newVal) {
        if ((newVal != null && this.opendates != null && newVal.equals(this.opendates)) || 
            (newVal == null && this.opendates == null && opendates_is_initialized)) {
            return; 
        } 
        this.opendates = newVal; 
        opendates_is_modified = true; 
        opendates_is_initialized = true; 
    }

    /**
     * Setter method for opendates.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to opendates
     */
    public void setOpendates(boolean newVal) {
        setOpendates(new Boolean(newVal));
    }

    /**
     * Determines if the opendates has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOpendatesModified() {
        return opendates_is_modified; 
    }

    /**
     * Determines if the opendates has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOpendatesInitialized() {
        return opendates_is_initialized; 
    }

    /**
     * Getter method for auditeddays.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationdiscount.auditeddays
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of auditeddays
     */
    public Boolean getAuditeddays()
    {
        return auditeddays; 
    }

    /**
     * Setter method for auditeddays.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to auditeddays
     */
    public void setAuditeddays(Boolean newVal) {
        if ((newVal != null && this.auditeddays != null && newVal.equals(this.auditeddays)) || 
            (newVal == null && this.auditeddays == null && auditeddays_is_initialized)) {
            return; 
        } 
        this.auditeddays = newVal; 
        auditeddays_is_modified = true; 
        auditeddays_is_initialized = true; 
    }

    /**
     * Setter method for auditeddays.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to auditeddays
     */
    public void setAuditeddays(boolean newVal) {
        setAuditeddays(new Boolean(newVal));
    }

    /**
     * Determines if the auditeddays has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAuditeddaysModified() {
        return auditeddays_is_modified; 
    }

    /**
     * Determines if the auditeddays has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAuditeddaysInitialized() {
        return auditeddays_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return reservationdiscountid_is_modified || 
		reservationid_is_modified || 
		discountid_is_modified || 
		postingvalueevery_is_modified || 
		discountnights_is_modified || 
		postingtype_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		opendates_is_modified || 
		auditeddays_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        reservationdiscountid_is_modified = false;
        reservationid_is_modified = false;
        discountid_is_modified = false;
        postingvalueevery_is_modified = false;
        discountnights_is_modified = false;
        postingtype_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        opendates_is_modified = false;
        auditeddays_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ReservationdiscountBean bean) {
        setReservationdiscountid(bean.getReservationdiscountid());
        setReservationid(bean.getReservationid());
        setDiscountid(bean.getDiscountid());
        setPostingvalueevery(bean.getPostingvalueevery());
        setDiscountnights(bean.getDiscountnights());
        setPostingtype(bean.getPostingtype());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setOpendates(bean.getOpendates());
        setAuditeddays(bean.getAuditeddays());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[reservationdiscount] "
                 + "\n - reservationdiscount.reservationdiscountid = " + (reservationdiscountid_is_initialized ? ("[" + (reservationdiscountid == null ? null : reservationdiscountid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationdiscount.reservationid = " + (reservationid_is_initialized ? ("[" + (reservationid == null ? null : reservationid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationdiscount.discountid = " + (discountid_is_initialized ? ("[" + (discountid == null ? null : discountid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationdiscount.postingvalueevery = " + (postingvalueevery_is_initialized ? ("[" + (postingvalueevery == null ? null : postingvalueevery.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationdiscount.discountnights = " + (discountnights_is_initialized ? ("[" + (discountnights == null ? null : discountnights.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationdiscount.postingtype = " + (postingtype_is_initialized ? ("[" + (postingtype == null ? null : postingtype.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationdiscount.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationdiscount.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationdiscount.opendates = " + (opendates_is_initialized ? ("[" + (opendates == null ? null : opendates.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationdiscount.auditeddays = " + (auditeddays_is_initialized ? ("[" + (auditeddays == null ? null : auditeddays.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
