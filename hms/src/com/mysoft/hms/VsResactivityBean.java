// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class VsResactivityBean
// extends+ 

// extends- 

{
    private Long reservationid;
    private boolean reservationid_is_modified = false;
    private boolean reservationid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private String guest;
    private boolean guest_is_modified = false;
    private boolean guest_is_initialized = false;
    
    private java.sql.Timestamp arraivaldate;
    private boolean arraivaldate_is_modified = false;
    private boolean arraivaldate_is_initialized = false;
    
    private java.sql.Timestamp departuredate;
    private boolean departuredate_is_modified = false;
    private boolean departuredate_is_initialized = false;
    
    private Double nights;
    private boolean nights_is_modified = false;
    private boolean nights_is_initialized = false;
    
    private String room;
    private boolean room_is_modified = false;
    private boolean room_is_initialized = false;
    
    private String source;
    private boolean source_is_modified = false;
    private boolean source_is_initialized = false;
    
    private String travelagent;
    private boolean travelagent_is_modified = false;
    private boolean travelagent_is_initialized = false;
    
    private Object voucher;
    private boolean voucher_is_modified = false;
    private boolean voucher_is_initialized = false;
    
    private Object rate;
    private boolean rate_is_modified = false;
    private boolean rate_is_initialized = false;
    
    private Object ratetype;
    private boolean ratetype_is_modified = false;
    private boolean ratetype_is_initialized = false;
    
    private Object nrml;
    private boolean nrml_is_modified = false;
    private boolean nrml_is_initialized = false;
    
    private Object ofrd;
    private boolean ofrd_is_modified = false;
    private boolean ofrd_is_initialized = false;
    
    private Object gtd;
    private boolean gtd_is_modified = false;
    private boolean gtd_is_initialized = false;
    
    private String user;
    private boolean user_is_modified = false;
    private boolean user_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VsResactivityBean()
    {
    }
    
    /**
     * Getter method for reservationid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.reservationid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of reservationid
     */
    public Long getReservationid()
    {
        return reservationid; 
    }

    /**
     * Setter method for reservationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationid
     */
    public void setReservationid(Long newVal) {
        if ((newVal != null && this.reservationid != null && (newVal.compareTo(this.reservationid) == 0)) || 
            (newVal == null && this.reservationid == null && reservationid_is_initialized)) {
            return; 
        } 
        this.reservationid = newVal; 
        reservationid_is_modified = true; 
        reservationid_is_initialized = true; 
    }

    /**
     * Setter method for reservationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationid
     */
    public void setReservationid(long newVal) {
        setReservationid(new Long(newVal));
    }

    /**
     * Determines if the reservationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationidModified() {
        return reservationid_is_modified; 
    }

    /**
     * Determines if the reservationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationidInitialized() {
        return reservationid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.regdate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for guest.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.guest
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of guest
     */
    public String getGuest()
    {
        return guest; 
    }

    /**
     * Setter method for guest.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to guest
     */
    public void setGuest(String newVal) {
        if ((newVal != null && this.guest != null && (newVal.compareTo(this.guest) == 0)) || 
            (newVal == null && this.guest == null && guest_is_initialized)) {
            return; 
        } 
        this.guest = newVal; 
        guest_is_modified = true; 
        guest_is_initialized = true; 
    }

    /**
     * Determines if the guest has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestModified() {
        return guest_is_modified; 
    }

    /**
     * Determines if the guest has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestInitialized() {
        return guest_is_initialized; 
    }

    /**
     * Getter method for arraivaldate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.arraivaldate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of arraivaldate
     */
    public java.sql.Timestamp getArraivaldate()
    {
        return arraivaldate; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.arraivaldate != null && (newVal.compareTo(this.arraivaldate) == 0)) || 
            (newVal == null && this.arraivaldate == null && arraivaldate_is_initialized)) {
            return; 
        } 
        this.arraivaldate = newVal; 
        arraivaldate_is_modified = true; 
        arraivaldate_is_initialized = true; 
    }

    /**
     * Setter method for arraivaldate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to arraivaldate
     */
    public void setArraivaldate(long newVal) {
        setArraivaldate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the arraivaldate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isArraivaldateModified() {
        return arraivaldate_is_modified; 
    }

    /**
     * Determines if the arraivaldate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isArraivaldateInitialized() {
        return arraivaldate_is_initialized; 
    }

    /**
     * Getter method for departuredate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.departuredate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of departuredate
     */
    public java.sql.Timestamp getDeparturedate()
    {
        return departuredate; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.departuredate != null && (newVal.compareTo(this.departuredate) == 0)) || 
            (newVal == null && this.departuredate == null && departuredate_is_initialized)) {
            return; 
        } 
        this.departuredate = newVal; 
        departuredate_is_modified = true; 
        departuredate_is_initialized = true; 
    }

    /**
     * Setter method for departuredate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to departuredate
     */
    public void setDeparturedate(long newVal) {
        setDeparturedate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the departuredate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeparturedateModified() {
        return departuredate_is_modified; 
    }

    /**
     * Determines if the departuredate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeparturedateInitialized() {
        return departuredate_is_initialized; 
    }

    /**
     * Getter method for nights.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.Nights
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of nights
     */
    public Double getNights()
    {
        return nights; 
    }

    /**
     * Setter method for nights.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to nights
     */
    public void setNights(Double newVal) {
        if ((newVal != null && this.nights != null && (newVal.compareTo(this.nights) == 0)) || 
            (newVal == null && this.nights == null && nights_is_initialized)) {
            return; 
        } 
        this.nights = newVal; 
        nights_is_modified = true; 
        nights_is_initialized = true; 
    }

    /**
     * Setter method for nights.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to nights
     */
    public void setNights(double newVal) {
        setNights(new Double(newVal));
    }

    /**
     * Determines if the nights has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNightsModified() {
        return nights_is_modified; 
    }

    /**
     * Determines if the nights has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNightsInitialized() {
        return nights_is_initialized; 
    }

    /**
     * Getter method for room.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.Room
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of room
     */
    public String getRoom()
    {
        return room; 
    }

    /**
     * Setter method for room.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to room
     */
    public void setRoom(String newVal) {
        if ((newVal != null && this.room != null && (newVal.compareTo(this.room) == 0)) || 
            (newVal == null && this.room == null && room_is_initialized)) {
            return; 
        } 
        this.room = newVal; 
        room_is_modified = true; 
        room_is_initialized = true; 
    }

    /**
     * Determines if the room has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomModified() {
        return room_is_modified; 
    }

    /**
     * Determines if the room has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomInitialized() {
        return room_is_initialized; 
    }

    /**
     * Getter method for source.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.Source
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of source
     */
    public String getSource()
    {
        return source; 
    }

    /**
     * Setter method for source.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to source
     */
    public void setSource(String newVal) {
        if ((newVal != null && this.source != null && (newVal.compareTo(this.source) == 0)) || 
            (newVal == null && this.source == null && source_is_initialized)) {
            return; 
        } 
        this.source = newVal; 
        source_is_modified = true; 
        source_is_initialized = true; 
    }

    /**
     * Determines if the source has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSourceModified() {
        return source_is_modified; 
    }

    /**
     * Determines if the source has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSourceInitialized() {
        return source_is_initialized; 
    }

    /**
     * Getter method for travelagent.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.TravelAgent
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of travelagent
     */
    public String getTravelagent()
    {
        return travelagent; 
    }

    /**
     * Setter method for travelagent.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to travelagent
     */
    public void setTravelagent(String newVal) {
        if ((newVal != null && this.travelagent != null && (newVal.compareTo(this.travelagent) == 0)) || 
            (newVal == null && this.travelagent == null && travelagent_is_initialized)) {
            return; 
        } 
        this.travelagent = newVal; 
        travelagent_is_modified = true; 
        travelagent_is_initialized = true; 
    }

    /**
     * Determines if the travelagent has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTravelagentModified() {
        return travelagent_is_modified; 
    }

    /**
     * Determines if the travelagent has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTravelagentInitialized() {
        return travelagent_is_initialized; 
    }

    /**
     * Getter method for voucher.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.Voucher
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.OTHER
     * </ul>
     *
     * @return the value of voucher
     */
    public Object getVoucher()
    {
        return voucher; 
    }

    /**
     * Setter method for voucher.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to voucher
     */
    public void setVoucher(Object newVal) {
        this.voucher = newVal; 
        voucher_is_modified = true; 
        voucher_is_initialized = true; 
    }

    /**
     * Determines if the voucher has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVoucherModified() {
        return voucher_is_modified; 
    }

    /**
     * Determines if the voucher has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVoucherInitialized() {
        return voucher_is_initialized; 
    }

    /**
     * Getter method for rate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.rate
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.OTHER
     * </ul>
     *
     * @return the value of rate
     */
    public Object getRate()
    {
        return rate; 
    }

    /**
     * Setter method for rate.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to rate
     */
    public void setRate(Object newVal) {
        this.rate = newVal; 
        rate_is_modified = true; 
        rate_is_initialized = true; 
    }

    /**
     * Determines if the rate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRateModified() {
        return rate_is_modified; 
    }

    /**
     * Determines if the rate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRateInitialized() {
        return rate_is_initialized; 
    }

    /**
     * Getter method for ratetype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.RateType
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.OTHER
     * </ul>
     *
     * @return the value of ratetype
     */
    public Object getRatetype()
    {
        return ratetype; 
    }

    /**
     * Setter method for ratetype.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to ratetype
     */
    public void setRatetype(Object newVal) {
        this.ratetype = newVal; 
        ratetype_is_modified = true; 
        ratetype_is_initialized = true; 
    }

    /**
     * Determines if the ratetype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRatetypeModified() {
        return ratetype_is_modified; 
    }

    /**
     * Determines if the ratetype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRatetypeInitialized() {
        return ratetype_is_initialized; 
    }

    /**
     * Getter method for nrml.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.Nrml
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.OTHER
     * </ul>
     *
     * @return the value of nrml
     */
    public Object getNrml()
    {
        return nrml; 
    }

    /**
     * Setter method for nrml.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to nrml
     */
    public void setNrml(Object newVal) {
        this.nrml = newVal; 
        nrml_is_modified = true; 
        nrml_is_initialized = true; 
    }

    /**
     * Determines if the nrml has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNrmlModified() {
        return nrml_is_modified; 
    }

    /**
     * Determines if the nrml has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNrmlInitialized() {
        return nrml_is_initialized; 
    }

    /**
     * Getter method for ofrd.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.Ofrd
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.OTHER
     * </ul>
     *
     * @return the value of ofrd
     */
    public Object getOfrd()
    {
        return ofrd; 
    }

    /**
     * Setter method for ofrd.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to ofrd
     */
    public void setOfrd(Object newVal) {
        this.ofrd = newVal; 
        ofrd_is_modified = true; 
        ofrd_is_initialized = true; 
    }

    /**
     * Determines if the ofrd has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOfrdModified() {
        return ofrd_is_modified; 
    }

    /**
     * Determines if the ofrd has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOfrdInitialized() {
        return ofrd_is_initialized; 
    }

    /**
     * Getter method for gtd.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.GTD
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.OTHER
     * </ul>
     *
     * @return the value of gtd
     */
    public Object getGtd()
    {
        return gtd; 
    }

    /**
     * Setter method for gtd.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to gtd
     */
    public void setGtd(Object newVal) {
        this.gtd = newVal; 
        gtd_is_modified = true; 
        gtd_is_initialized = true; 
    }

    /**
     * Determines if the gtd has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGtdModified() {
        return gtd_is_modified; 
    }

    /**
     * Determines if the gtd has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGtdInitialized() {
        return gtd_is_initialized; 
    }

    /**
     * Getter method for user.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: vs_resactivity.User
     * <li>column size: 15
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of user
     */
    public String getUser()
    {
        return user; 
    }

    /**
     * Setter method for user.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to user
     */
    public void setUser(String newVal) {
        if ((newVal != null && this.user != null && (newVal.compareTo(this.user) == 0)) || 
            (newVal == null && this.user == null && user_is_initialized)) {
            return; 
        } 
        this.user = newVal; 
        user_is_modified = true; 
        user_is_initialized = true; 
    }

    /**
     * Determines if the user has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUserModified() {
        return user_is_modified; 
    }

    /**
     * Determines if the user has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUserInitialized() {
        return user_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return reservationid_is_modified || 
		regdate_is_modified || 
		guest_is_modified || 
		arraivaldate_is_modified || 
		departuredate_is_modified || 
		nights_is_modified || 
		room_is_modified || 
		source_is_modified || 
		travelagent_is_modified || 
		voucher_is_modified || 
		rate_is_modified || 
		ratetype_is_modified || 
		nrml_is_modified || 
		ofrd_is_modified || 
		gtd_is_modified || 
		user_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        reservationid_is_modified = false;
        regdate_is_modified = false;
        guest_is_modified = false;
        arraivaldate_is_modified = false;
        departuredate_is_modified = false;
        nights_is_modified = false;
        room_is_modified = false;
        source_is_modified = false;
        travelagent_is_modified = false;
        voucher_is_modified = false;
        rate_is_modified = false;
        ratetype_is_modified = false;
        nrml_is_modified = false;
        ofrd_is_modified = false;
        gtd_is_modified = false;
        user_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VsResactivityBean bean) {
        setReservationid(bean.getReservationid());
        setRegdate(bean.getRegdate());
        setGuest(bean.getGuest());
        setArraivaldate(bean.getArraivaldate());
        setDeparturedate(bean.getDeparturedate());
        setNights(bean.getNights());
        setRoom(bean.getRoom());
        setSource(bean.getSource());
        setTravelagent(bean.getTravelagent());
        setVoucher(bean.getVoucher());
        setRate(bean.getRate());
        setRatetype(bean.getRatetype());
        setNrml(bean.getNrml());
        setOfrd(bean.getOfrd());
        setGtd(bean.getGtd());
        setUser(bean.getUser());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[vs_resactivity] "
                 + "\n - vs_resactivity.reservationid = " + (reservationid_is_initialized ? ("[" + (reservationid == null ? null : reservationid.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.guest = " + (guest_is_initialized ? ("[" + (guest == null ? null : guest.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.arraivaldate = " + (arraivaldate_is_initialized ? ("[" + (arraivaldate == null ? null : arraivaldate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.departuredate = " + (departuredate_is_initialized ? ("[" + (departuredate == null ? null : departuredate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.Nights = " + (nights_is_initialized ? ("[" + (nights == null ? null : nights.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.Room = " + (room_is_initialized ? ("[" + (room == null ? null : room.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.Source = " + (source_is_initialized ? ("[" + (source == null ? null : source.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.TravelAgent = " + (travelagent_is_initialized ? ("[" + (travelagent == null ? null : travelagent.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.Voucher = " + (voucher_is_initialized ? ("[" + (voucher == null ? null : voucher.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.rate = " + (rate_is_initialized ? ("[" + (rate == null ? null : rate.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.RateType = " + (ratetype_is_initialized ? ("[" + (ratetype == null ? null : ratetype.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.Nrml = " + (nrml_is_initialized ? ("[" + (nrml == null ? null : nrml.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.Ofrd = " + (ofrd_is_initialized ? ("[" + (ofrd == null ? null : ofrd.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.GTD = " + (gtd_is_initialized ? ("[" + (gtd == null ? null : gtd.toString()) + "]") : "not initialized") + ""
                 + "\n - vs_resactivity.User = " + (user_is_initialized ? ("[" + (user == null ? null : user.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
