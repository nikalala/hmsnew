// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class SeasonBean
// extends+ 

// extends- 

{
    private Integer seasonid;
    private boolean seasonid_is_modified = false;
    private boolean seasonid_is_initialized = false;
    
    private String code;
    private boolean code_is_modified = false;
    private boolean code_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private Integer fday;
    private boolean fday_is_modified = false;
    private boolean fday_is_initialized = false;
    
    private Integer tday;
    private boolean tday_is_modified = false;
    private boolean tday_is_initialized = false;
    
    private Integer fmonth;
    private boolean fmonth_is_modified = false;
    private boolean fmonth_is_initialized = false;
    
    private Integer tmonth;
    private boolean tmonth_is_modified = false;
    private boolean tmonth_is_initialized = false;
    
    private java.util.Date startdate;
    private boolean startdate_is_modified = false;
    private boolean startdate_is_initialized = false;
    
    private java.util.Date enddate;
    private boolean enddate_is_modified = false;
    private boolean enddate_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Boolean active;
    private boolean active_is_modified = false;
    private boolean active_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    SeasonBean()
    {
    }
    
    /**
     * Getter method for seasonid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.seasonid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of seasonid
     */
    public Integer getSeasonid()
    {
        return seasonid; 
    }

    /**
     * Setter method for seasonid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to seasonid
     */
    public void setSeasonid(Integer newVal) {
        if ((newVal != null && this.seasonid != null && (newVal.compareTo(this.seasonid) == 0)) || 
            (newVal == null && this.seasonid == null && seasonid_is_initialized)) {
            return; 
        } 
        this.seasonid = newVal; 
        seasonid_is_modified = true; 
        seasonid_is_initialized = true; 
    }

    /**
     * Setter method for seasonid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to seasonid
     */
    public void setSeasonid(int newVal) {
        setSeasonid(new Integer(newVal));
    }

    /**
     * Determines if the seasonid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSeasonidModified() {
        return seasonid_is_modified; 
    }

    /**
     * Determines if the seasonid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSeasonidInitialized() {
        return seasonid_is_initialized; 
    }

    /**
     * Getter method for code.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.code
     * <li>comments: ????? ??????????
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of code
     */
    public String getCode()
    {
        return code; 
    }

    /**
     * Setter method for code.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to code
     */
    public void setCode(String newVal) {
        if ((newVal != null && this.code != null && (newVal.compareTo(this.code) == 0)) || 
            (newVal == null && this.code == null && code_is_initialized)) {
            return; 
        } 
        this.code = newVal; 
        code_is_modified = true; 
        code_is_initialized = true; 
    }

    /**
     * Determines if the code has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodeModified() {
        return code_is_modified; 
    }

    /**
     * Determines if the code has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodeInitialized() {
        return code_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.name
     * <li>comments: ??????????
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for fday.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.fday
     * <li>comments: ??????
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of fday
     */
    public Integer getFday()
    {
        return fday; 
    }

    /**
     * Setter method for fday.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fday
     */
    public void setFday(Integer newVal) {
        if ((newVal != null && this.fday != null && (newVal.compareTo(this.fday) == 0)) || 
            (newVal == null && this.fday == null && fday_is_initialized)) {
            return; 
        } 
        this.fday = newVal; 
        fday_is_modified = true; 
        fday_is_initialized = true; 
    }

    /**
     * Setter method for fday.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to fday
     */
    public void setFday(int newVal) {
        setFday(new Integer(newVal));
    }

    /**
     * Determines if the fday has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFdayModified() {
        return fday_is_modified; 
    }

    /**
     * Determines if the fday has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFdayInitialized() {
        return fday_is_initialized; 
    }

    /**
     * Getter method for tday.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.tday
     * <li>comments: ??????
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of tday
     */
    public Integer getTday()
    {
        return tday; 
    }

    /**
     * Setter method for tday.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tday
     */
    public void setTday(Integer newVal) {
        if ((newVal != null && this.tday != null && (newVal.compareTo(this.tday) == 0)) || 
            (newVal == null && this.tday == null && tday_is_initialized)) {
            return; 
        } 
        this.tday = newVal; 
        tday_is_modified = true; 
        tday_is_initialized = true; 
    }

    /**
     * Setter method for tday.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tday
     */
    public void setTday(int newVal) {
        setTday(new Integer(newVal));
    }

    /**
     * Determines if the tday has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTdayModified() {
        return tday_is_modified; 
    }

    /**
     * Determines if the tday has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTdayInitialized() {
        return tday_is_initialized; 
    }

    /**
     * Getter method for fmonth.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.fmonth
     * <li>comments: ??????
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of fmonth
     */
    public Integer getFmonth()
    {
        return fmonth; 
    }

    /**
     * Setter method for fmonth.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fmonth
     */
    public void setFmonth(Integer newVal) {
        if ((newVal != null && this.fmonth != null && (newVal.compareTo(this.fmonth) == 0)) || 
            (newVal == null && this.fmonth == null && fmonth_is_initialized)) {
            return; 
        } 
        this.fmonth = newVal; 
        fmonth_is_modified = true; 
        fmonth_is_initialized = true; 
    }

    /**
     * Setter method for fmonth.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to fmonth
     */
    public void setFmonth(int newVal) {
        setFmonth(new Integer(newVal));
    }

    /**
     * Determines if the fmonth has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFmonthModified() {
        return fmonth_is_modified; 
    }

    /**
     * Determines if the fmonth has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFmonthInitialized() {
        return fmonth_is_initialized; 
    }

    /**
     * Getter method for tmonth.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.tmonth
     * <li>comments: ??????
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of tmonth
     */
    public Integer getTmonth()
    {
        return tmonth; 
    }

    /**
     * Setter method for tmonth.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tmonth
     */
    public void setTmonth(Integer newVal) {
        if ((newVal != null && this.tmonth != null && (newVal.compareTo(this.tmonth) == 0)) || 
            (newVal == null && this.tmonth == null && tmonth_is_initialized)) {
            return; 
        } 
        this.tmonth = newVal; 
        tmonth_is_modified = true; 
        tmonth_is_initialized = true; 
    }

    /**
     * Setter method for tmonth.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tmonth
     */
    public void setTmonth(int newVal) {
        setTmonth(new Integer(newVal));
    }

    /**
     * Determines if the tmonth has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTmonthModified() {
        return tmonth_is_modified; 
    }

    /**
     * Determines if the tmonth has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTmonthInitialized() {
        return tmonth_is_initialized; 
    }

    /**
     * Getter method for startdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.startdate
     * <li>comments: ?????????
     * <li>column size: 13
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of startdate
     */
    public java.util.Date getStartdate()
    {
        return startdate; 
    }

    /**
     * Setter method for startdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to startdate
     */
    public void setStartdate(java.util.Date newVal) {
        if ((newVal != null && this.startdate != null && (newVal.compareTo(this.startdate) == 0)) || 
            (newVal == null && this.startdate == null && startdate_is_initialized)) {
            return; 
        } 
        this.startdate = newVal; 
        startdate_is_modified = true; 
        startdate_is_initialized = true; 
    }

    /**
     * Setter method for startdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to startdate
     */
    public void setStartdate(long newVal) {
        setStartdate(new java.util.Date(newVal));
    }

    /**
     * Determines if the startdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStartdateModified() {
        return startdate_is_modified; 
    }

    /**
     * Determines if the startdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStartdateInitialized() {
        return startdate_is_initialized; 
    }

    /**
     * Getter method for enddate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.enddate
     * <li>comments: ?????????
     * <li>column size: 13
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of enddate
     */
    public java.util.Date getEnddate()
    {
        return enddate; 
    }

    /**
     * Setter method for enddate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to enddate
     */
    public void setEnddate(java.util.Date newVal) {
        if ((newVal != null && this.enddate != null && (newVal.compareTo(this.enddate) == 0)) || 
            (newVal == null && this.enddate == null && enddate_is_initialized)) {
            return; 
        } 
        this.enddate = newVal; 
        enddate_is_modified = true; 
        enddate_is_initialized = true; 
    }

    /**
     * Setter method for enddate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to enddate
     */
    public void setEnddate(long newVal) {
        setEnddate(new java.util.Date(newVal));
    }

    /**
     * Determines if the enddate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEnddateModified() {
        return enddate_is_modified; 
    }

    /**
     * Determines if the enddate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEnddateInitialized() {
        return enddate_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.regbyid
     * <li> foreign key: personnel.personnelid
     * <li>comments: ??????
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.regdate
     * <li>comments: ???????????? ??????
     * <li>default value: now()
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for active.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.active
     * <li>comments: ???????
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of active
     */
    public Boolean getActive()
    {
        return active; 
    }

    /**
     * Setter method for active.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to active
     */
    public void setActive(Boolean newVal) {
        if ((newVal != null && this.active != null && newVal.equals(this.active)) || 
            (newVal == null && this.active == null && active_is_initialized)) {
            return; 
        } 
        this.active = newVal; 
        active_is_modified = true; 
        active_is_initialized = true; 
    }

    /**
     * Setter method for active.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to active
     */
    public void setActive(boolean newVal) {
        setActive(new Boolean(newVal));
    }

    /**
     * Determines if the active has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isActiveModified() {
        return active_is_modified; 
    }

    /**
     * Determines if the active has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isActiveInitialized() {
        return active_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: season.deleted
     * <li>comments: ???????
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return seasonid_is_modified || 
		code_is_modified || 
		name_is_modified || 
		fday_is_modified || 
		tday_is_modified || 
		fmonth_is_modified || 
		tmonth_is_modified || 
		startdate_is_modified || 
		enddate_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		active_is_modified || 
		deleted_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        seasonid_is_modified = false;
        code_is_modified = false;
        name_is_modified = false;
        fday_is_modified = false;
        tday_is_modified = false;
        fmonth_is_modified = false;
        tmonth_is_modified = false;
        startdate_is_modified = false;
        enddate_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        active_is_modified = false;
        deleted_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SeasonBean bean) {
        setSeasonid(bean.getSeasonid());
        setCode(bean.getCode());
        setName(bean.getName());
        setFday(bean.getFday());
        setTday(bean.getTday());
        setFmonth(bean.getFmonth());
        setTmonth(bean.getTmonth());
        setStartdate(bean.getStartdate());
        setEnddate(bean.getEnddate());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setActive(bean.getActive());
        setDeleted(bean.getDeleted());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[season] "
                 + "\n - season.seasonid = " + (seasonid_is_initialized ? ("[" + (seasonid == null ? null : seasonid.toString()) + "]") : "not initialized") + ""
                 + "\n - season.code = " + (code_is_initialized ? ("[" + (code == null ? null : code.toString()) + "]") : "not initialized") + ""
                 + "\n - season.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - season.fday = " + (fday_is_initialized ? ("[" + (fday == null ? null : fday.toString()) + "]") : "not initialized") + ""
                 + "\n - season.tday = " + (tday_is_initialized ? ("[" + (tday == null ? null : tday.toString()) + "]") : "not initialized") + ""
                 + "\n - season.fmonth = " + (fmonth_is_initialized ? ("[" + (fmonth == null ? null : fmonth.toString()) + "]") : "not initialized") + ""
                 + "\n - season.tmonth = " + (tmonth_is_initialized ? ("[" + (tmonth == null ? null : tmonth.toString()) + "]") : "not initialized") + ""
                 + "\n - season.startdate = " + (startdate_is_initialized ? ("[" + (startdate == null ? null : startdate.toString()) + "]") : "not initialized") + ""
                 + "\n - season.enddate = " + (enddate_is_initialized ? ("[" + (enddate == null ? null : enddate.toString()) + "]") : "not initialized") + ""
                 + "\n - season.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - season.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - season.active = " + (active_is_initialized ? ("[" + (active == null ? null : active.toString()) + "]") : "not initialized") + ""
                 + "\n - season.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
