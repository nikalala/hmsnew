// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.util.Comparator;
// imports+ 

// imports- 


/**
 * Comparator class is used to sort the VArrivallistBean objects.
 */
public class VArrivallistComparator implements Comparator
// extends+ 

// extends- 

{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for VArrivallistComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new VArrivallistComparator(VArrivallistManager.RESERVATIONID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>VArrivallistManager.ID_RESERVATIONID
     *   <li>VArrivallistManager.ID_RESERVATIONROOMID
     *   <li>VArrivallistManager.ID_ROOMID
     *   <li>VArrivallistManager.ID_ROOMTYPEID
     *   <li>VArrivallistManager.ID_ARRAIVALDATE
     *   <li>VArrivallistManager.ID_DEPARTUREDATE
     *   <li>VArrivallistManager.ID_REGBYID
     *   <li>VArrivallistManager.ID_RESERVATIONTYPEID
     *   <li>VArrivallistManager.ID_GUESTID
     *   <li>VArrivallistManager.ID_GUEST
     *   <li>VArrivallistManager.ID_ROOMCODE
     *   <li>VArrivallistManager.ID_ROOMTYPECODE
     *   <li>VArrivallistManager.ID_BSOURCENAME
     *   <li>VArrivallistManager.ID_BSOURCEID
     *   <li>VArrivallistManager.ID_COMPANYNAME
     *   <li>VArrivallistManager.ID_ADULT
     *   <li>VArrivallistManager.ID_CHILD
     *   <li>VArrivallistManager.ID_RESERVTYPE
     * </ul>
     */
    public VArrivallistComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for VArrivallistComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new VArrivallistComparator(VArrivallistManager.RESERVATIONID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>VArrivallistManager.ID_RESERVATIONID
     *   <li>VArrivallistManager.ID_RESERVATIONROOMID
     *   <li>VArrivallistManager.ID_ROOMID
     *   <li>VArrivallistManager.ID_ROOMTYPEID
     *   <li>VArrivallistManager.ID_ARRAIVALDATE
     *   <li>VArrivallistManager.ID_DEPARTUREDATE
     *   <li>VArrivallistManager.ID_REGBYID
     *   <li>VArrivallistManager.ID_RESERVATIONTYPEID
     *   <li>VArrivallistManager.ID_GUESTID
     *   <li>VArrivallistManager.ID_GUEST
     *   <li>VArrivallistManager.ID_ROOMCODE
     *   <li>VArrivallistManager.ID_ROOMTYPECODE
     *   <li>VArrivallistManager.ID_BSOURCENAME
     *   <li>VArrivallistManager.ID_BSOURCEID
     *   <li>VArrivallistManager.ID_COMPANYNAME
     *   <li>VArrivallistManager.ID_ADULT
     *   <li>VArrivallistManager.ID_CHILD
     *   <li>VArrivallistManager.ID_RESERVTYPE
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public VArrivallistComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        VArrivallistBean b1 = (VArrivallistBean)pObj1;
        VArrivallistBean b2 = (VArrivallistBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case VArrivallistManager.ID_RESERVATIONID:
                if (b1.getReservationid() == null && b2.getReservationid() != null) {
                    iReturn = -1;
                } else if (b1.getReservationid() == null && b2.getReservationid() == null) {
                    iReturn = 0;
                } else if (b1.getReservationid() != null && b2.getReservationid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getReservationid().compareTo(b2.getReservationid());
                }
                break;
            case VArrivallistManager.ID_RESERVATIONROOMID:
                if (b1.getReservationroomid() == null && b2.getReservationroomid() != null) {
                    iReturn = -1;
                } else if (b1.getReservationroomid() == null && b2.getReservationroomid() == null) {
                    iReturn = 0;
                } else if (b1.getReservationroomid() != null && b2.getReservationroomid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getReservationroomid().compareTo(b2.getReservationroomid());
                }
                break;
            case VArrivallistManager.ID_ROOMID:
                if (b1.getRoomid() == null && b2.getRoomid() != null) {
                    iReturn = -1;
                } else if (b1.getRoomid() == null && b2.getRoomid() == null) {
                    iReturn = 0;
                } else if (b1.getRoomid() != null && b2.getRoomid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRoomid().compareTo(b2.getRoomid());
                }
                break;
            case VArrivallistManager.ID_ROOMTYPEID:
                if (b1.getRoomtypeid() == null && b2.getRoomtypeid() != null) {
                    iReturn = -1;
                } else if (b1.getRoomtypeid() == null && b2.getRoomtypeid() == null) {
                    iReturn = 0;
                } else if (b1.getRoomtypeid() != null && b2.getRoomtypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRoomtypeid().compareTo(b2.getRoomtypeid());
                }
                break;
            case VArrivallistManager.ID_ARRAIVALDATE:
                if (b1.getArraivaldate() == null && b2.getArraivaldate() != null) {
                    iReturn = -1;
                } else if (b1.getArraivaldate() == null && b2.getArraivaldate() == null) {
                    iReturn = 0;
                } else if (b1.getArraivaldate() != null && b2.getArraivaldate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getArraivaldate().compareTo(b2.getArraivaldate());
                }
                break;
            case VArrivallistManager.ID_DEPARTUREDATE:
                if (b1.getDeparturedate() == null && b2.getDeparturedate() != null) {
                    iReturn = -1;
                } else if (b1.getDeparturedate() == null && b2.getDeparturedate() == null) {
                    iReturn = 0;
                } else if (b1.getDeparturedate() != null && b2.getDeparturedate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getDeparturedate().compareTo(b2.getDeparturedate());
                }
                break;
            case VArrivallistManager.ID_REGBYID:
                if (b1.getRegbyid() == null && b2.getRegbyid() != null) {
                    iReturn = -1;
                } else if (b1.getRegbyid() == null && b2.getRegbyid() == null) {
                    iReturn = 0;
                } else if (b1.getRegbyid() != null && b2.getRegbyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegbyid().compareTo(b2.getRegbyid());
                }
                break;
            case VArrivallistManager.ID_RESERVATIONTYPEID:
                if (b1.getReservationtypeid() == null && b2.getReservationtypeid() != null) {
                    iReturn = -1;
                } else if (b1.getReservationtypeid() == null && b2.getReservationtypeid() == null) {
                    iReturn = 0;
                } else if (b1.getReservationtypeid() != null && b2.getReservationtypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getReservationtypeid().compareTo(b2.getReservationtypeid());
                }
                break;
            case VArrivallistManager.ID_GUESTID:
                if (b1.getGuestid() == null && b2.getGuestid() != null) {
                    iReturn = -1;
                } else if (b1.getGuestid() == null && b2.getGuestid() == null) {
                    iReturn = 0;
                } else if (b1.getGuestid() != null && b2.getGuestid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getGuestid().compareTo(b2.getGuestid());
                }
                break;
            case VArrivallistManager.ID_GUEST:
                if (b1.getGuest() == null && b2.getGuest() != null) {
                    iReturn = -1;
                } else if (b1.getGuest() == null && b2.getGuest() == null) {
                    iReturn = 0;
                } else if (b1.getGuest() != null && b2.getGuest() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getGuest().compareTo(b2.getGuest());
                }
                break;
            case VArrivallistManager.ID_ROOMCODE:
                if (b1.getRoomcode() == null && b2.getRoomcode() != null) {
                    iReturn = -1;
                } else if (b1.getRoomcode() == null && b2.getRoomcode() == null) {
                    iReturn = 0;
                } else if (b1.getRoomcode() != null && b2.getRoomcode() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRoomcode().compareTo(b2.getRoomcode());
                }
                break;
            case VArrivallistManager.ID_ROOMTYPECODE:
                if (b1.getRoomtypecode() == null && b2.getRoomtypecode() != null) {
                    iReturn = -1;
                } else if (b1.getRoomtypecode() == null && b2.getRoomtypecode() == null) {
                    iReturn = 0;
                } else if (b1.getRoomtypecode() != null && b2.getRoomtypecode() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRoomtypecode().compareTo(b2.getRoomtypecode());
                }
                break;
            case VArrivallistManager.ID_BSOURCENAME:
                if (b1.getBsourcename() == null && b2.getBsourcename() != null) {
                    iReturn = -1;
                } else if (b1.getBsourcename() == null && b2.getBsourcename() == null) {
                    iReturn = 0;
                } else if (b1.getBsourcename() != null && b2.getBsourcename() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getBsourcename().compareTo(b2.getBsourcename());
                }
                break;
            case VArrivallistManager.ID_BSOURCEID:
                if (b1.getBsourceid() == null && b2.getBsourceid() != null) {
                    iReturn = -1;
                } else if (b1.getBsourceid() == null && b2.getBsourceid() == null) {
                    iReturn = 0;
                } else if (b1.getBsourceid() != null && b2.getBsourceid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getBsourceid().compareTo(b2.getBsourceid());
                }
                break;
            case VArrivallistManager.ID_COMPANYNAME:
                if (b1.getCompanyname() == null && b2.getCompanyname() != null) {
                    iReturn = -1;
                } else if (b1.getCompanyname() == null && b2.getCompanyname() == null) {
                    iReturn = 0;
                } else if (b1.getCompanyname() != null && b2.getCompanyname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCompanyname().compareTo(b2.getCompanyname());
                }
                break;
            case VArrivallistManager.ID_ADULT:
                if (b1.getAdult() == null && b2.getAdult() != null) {
                    iReturn = -1;
                } else if (b1.getAdult() == null && b2.getAdult() == null) {
                    iReturn = 0;
                } else if (b1.getAdult() != null && b2.getAdult() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAdult().compareTo(b2.getAdult());
                }
                break;
            case VArrivallistManager.ID_CHILD:
                if (b1.getChild() == null && b2.getChild() != null) {
                    iReturn = -1;
                } else if (b1.getChild() == null && b2.getChild() == null) {
                    iReturn = 0;
                } else if (b1.getChild() != null && b2.getChild() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getChild().compareTo(b2.getChild());
                }
                break;
            case VArrivallistManager.ID_RESERVTYPE:
                if (b1.getReservtype() == null && b2.getReservtype() != null) {
                    iReturn = -1;
                } else if (b1.getReservtype() == null && b2.getReservtype() == null) {
                    iReturn = 0;
                } else if (b1.getReservtype() != null && b2.getReservtype() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getReservtype().compareTo(b2.getReservtype());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 

}
