// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class OrdermainBean
// extends+ 

// extends- 

{
    private Long ordermainid;
    private boolean ordermainid_is_modified = false;
    private boolean ordermainid_is_initialized = false;
    
    private String hallname;
    private boolean hallname_is_modified = false;
    private boolean hallname_is_initialized = false;
    
    private String tablename;
    private boolean tablename_is_modified = false;
    private boolean tablename_is_initialized = false;
    
    private java.sql.Timestamp opendate;
    private boolean opendate_is_modified = false;
    private boolean opendate_is_initialized = false;
    
    private java.sql.Timestamp closedate;
    private boolean closedate_is_modified = false;
    private boolean closedate_is_initialized = false;
    
    private String waitername;
    private boolean waitername_is_modified = false;
    private boolean waitername_is_initialized = false;
    
    private Double amount;
    private boolean amount_is_modified = false;
    private boolean amount_is_initialized = false;
    
    private Double discount;
    private boolean discount_is_modified = false;
    private boolean discount_is_initialized = false;
    
    private Double price;
    private boolean price_is_modified = false;
    private boolean price_is_initialized = false;
    
    private Double cash;
    private boolean cash_is_modified = false;
    private boolean cash_is_initialized = false;
    
    private Double paid;
    private boolean paid_is_modified = false;
    private boolean paid_is_initialized = false;
    
    private String regname;
    private boolean regname_is_modified = false;
    private boolean regname_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    OrdermainBean()
    {
    }
    
    /**
     * Getter method for ordermainid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.ordermainid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of ordermainid
     */
    public Long getOrdermainid()
    {
        return ordermainid; 
    }

    /**
     * Setter method for ordermainid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ordermainid
     */
    public void setOrdermainid(Long newVal) {
        if ((newVal != null && this.ordermainid != null && (newVal.compareTo(this.ordermainid) == 0)) || 
            (newVal == null && this.ordermainid == null && ordermainid_is_initialized)) {
            return; 
        } 
        this.ordermainid = newVal; 
        ordermainid_is_modified = true; 
        ordermainid_is_initialized = true; 
    }

    /**
     * Setter method for ordermainid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ordermainid
     */
    public void setOrdermainid(long newVal) {
        setOrdermainid(new Long(newVal));
    }

    /**
     * Determines if the ordermainid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOrdermainidModified() {
        return ordermainid_is_modified; 
    }

    /**
     * Determines if the ordermainid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOrdermainidInitialized() {
        return ordermainid_is_initialized; 
    }

    /**
     * Getter method for hallname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.hallname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of hallname
     */
    public String getHallname()
    {
        return hallname; 
    }

    /**
     * Setter method for hallname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to hallname
     */
    public void setHallname(String newVal) {
        if ((newVal != null && this.hallname != null && (newVal.compareTo(this.hallname) == 0)) || 
            (newVal == null && this.hallname == null && hallname_is_initialized)) {
            return; 
        } 
        this.hallname = newVal; 
        hallname_is_modified = true; 
        hallname_is_initialized = true; 
    }

    /**
     * Determines if the hallname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isHallnameModified() {
        return hallname_is_modified; 
    }

    /**
     * Determines if the hallname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isHallnameInitialized() {
        return hallname_is_initialized; 
    }

    /**
     * Getter method for tablename.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.tablename
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of tablename
     */
    public String getTablename()
    {
        return tablename; 
    }

    /**
     * Setter method for tablename.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tablename
     */
    public void setTablename(String newVal) {
        if ((newVal != null && this.tablename != null && (newVal.compareTo(this.tablename) == 0)) || 
            (newVal == null && this.tablename == null && tablename_is_initialized)) {
            return; 
        } 
        this.tablename = newVal; 
        tablename_is_modified = true; 
        tablename_is_initialized = true; 
    }

    /**
     * Determines if the tablename has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTablenameModified() {
        return tablename_is_modified; 
    }

    /**
     * Determines if the tablename has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTablenameInitialized() {
        return tablename_is_initialized; 
    }

    /**
     * Getter method for opendate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.opendate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of opendate
     */
    public java.sql.Timestamp getOpendate()
    {
        return opendate; 
    }

    /**
     * Setter method for opendate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to opendate
     */
    public void setOpendate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.opendate != null && (newVal.compareTo(this.opendate) == 0)) || 
            (newVal == null && this.opendate == null && opendate_is_initialized)) {
            return; 
        } 
        this.opendate = newVal; 
        opendate_is_modified = true; 
        opendate_is_initialized = true; 
    }

    /**
     * Setter method for opendate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to opendate
     */
    public void setOpendate(long newVal) {
        setOpendate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the opendate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOpendateModified() {
        return opendate_is_modified; 
    }

    /**
     * Determines if the opendate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOpendateInitialized() {
        return opendate_is_initialized; 
    }

    /**
     * Getter method for closedate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.closedate
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of closedate
     */
    public java.sql.Timestamp getClosedate()
    {
        return closedate; 
    }

    /**
     * Setter method for closedate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to closedate
     */
    public void setClosedate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.closedate != null && (newVal.compareTo(this.closedate) == 0)) || 
            (newVal == null && this.closedate == null && closedate_is_initialized)) {
            return; 
        } 
        this.closedate = newVal; 
        closedate_is_modified = true; 
        closedate_is_initialized = true; 
    }

    /**
     * Setter method for closedate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to closedate
     */
    public void setClosedate(long newVal) {
        setClosedate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the closedate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isClosedateModified() {
        return closedate_is_modified; 
    }

    /**
     * Determines if the closedate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isClosedateInitialized() {
        return closedate_is_initialized; 
    }

    /**
     * Getter method for waitername.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.waitername
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of waitername
     */
    public String getWaitername()
    {
        return waitername; 
    }

    /**
     * Setter method for waitername.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to waitername
     */
    public void setWaitername(String newVal) {
        if ((newVal != null && this.waitername != null && (newVal.compareTo(this.waitername) == 0)) || 
            (newVal == null && this.waitername == null && waitername_is_initialized)) {
            return; 
        } 
        this.waitername = newVal; 
        waitername_is_modified = true; 
        waitername_is_initialized = true; 
    }

    /**
     * Determines if the waitername has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWaiternameModified() {
        return waitername_is_modified; 
    }

    /**
     * Determines if the waitername has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWaiternameInitialized() {
        return waitername_is_initialized; 
    }

    /**
     * Getter method for amount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.amount
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of amount
     */
    public Double getAmount()
    {
        return amount; 
    }

    /**
     * Setter method for amount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to amount
     */
    public void setAmount(Double newVal) {
        if ((newVal != null && this.amount != null && (newVal.compareTo(this.amount) == 0)) || 
            (newVal == null && this.amount == null && amount_is_initialized)) {
            return; 
        } 
        this.amount = newVal; 
        amount_is_modified = true; 
        amount_is_initialized = true; 
    }

    /**
     * Setter method for amount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to amount
     */
    public void setAmount(double newVal) {
        setAmount(new Double(newVal));
    }

    /**
     * Determines if the amount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAmountModified() {
        return amount_is_modified; 
    }

    /**
     * Determines if the amount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAmountInitialized() {
        return amount_is_initialized; 
    }

    /**
     * Getter method for discount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.discount
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of discount
     */
    public Double getDiscount()
    {
        return discount; 
    }

    /**
     * Setter method for discount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to discount
     */
    public void setDiscount(Double newVal) {
        if ((newVal != null && this.discount != null && (newVal.compareTo(this.discount) == 0)) || 
            (newVal == null && this.discount == null && discount_is_initialized)) {
            return; 
        } 
        this.discount = newVal; 
        discount_is_modified = true; 
        discount_is_initialized = true; 
    }

    /**
     * Setter method for discount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to discount
     */
    public void setDiscount(double newVal) {
        setDiscount(new Double(newVal));
    }

    /**
     * Determines if the discount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDiscountModified() {
        return discount_is_modified; 
    }

    /**
     * Determines if the discount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDiscountInitialized() {
        return discount_is_initialized; 
    }

    /**
     * Getter method for price.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.price
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of price
     */
    public Double getPrice()
    {
        return price; 
    }

    /**
     * Setter method for price.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(Double newVal) {
        if ((newVal != null && this.price != null && (newVal.compareTo(this.price) == 0)) || 
            (newVal == null && this.price == null && price_is_initialized)) {
            return; 
        } 
        this.price = newVal; 
        price_is_modified = true; 
        price_is_initialized = true; 
    }

    /**
     * Setter method for price.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(double newVal) {
        setPrice(new Double(newVal));
    }

    /**
     * Determines if the price has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPriceModified() {
        return price_is_modified; 
    }

    /**
     * Determines if the price has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPriceInitialized() {
        return price_is_initialized; 
    }

    /**
     * Getter method for cash.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.cash
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of cash
     */
    public Double getCash()
    {
        return cash; 
    }

    /**
     * Setter method for cash.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to cash
     */
    public void setCash(Double newVal) {
        if ((newVal != null && this.cash != null && (newVal.compareTo(this.cash) == 0)) || 
            (newVal == null && this.cash == null && cash_is_initialized)) {
            return; 
        } 
        this.cash = newVal; 
        cash_is_modified = true; 
        cash_is_initialized = true; 
    }

    /**
     * Setter method for cash.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to cash
     */
    public void setCash(double newVal) {
        setCash(new Double(newVal));
    }

    /**
     * Determines if the cash has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCashModified() {
        return cash_is_modified; 
    }

    /**
     * Determines if the cash has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCashInitialized() {
        return cash_is_initialized; 
    }

    /**
     * Getter method for paid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.paid
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of paid
     */
    public Double getPaid()
    {
        return paid; 
    }

    /**
     * Setter method for paid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to paid
     */
    public void setPaid(Double newVal) {
        if ((newVal != null && this.paid != null && (newVal.compareTo(this.paid) == 0)) || 
            (newVal == null && this.paid == null && paid_is_initialized)) {
            return; 
        } 
        this.paid = newVal; 
        paid_is_modified = true; 
        paid_is_initialized = true; 
    }

    /**
     * Setter method for paid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to paid
     */
    public void setPaid(double newVal) {
        setPaid(new Double(newVal));
    }

    /**
     * Determines if the paid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPaidModified() {
        return paid_is_modified; 
    }

    /**
     * Determines if the paid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPaidInitialized() {
        return paid_is_initialized; 
    }

    /**
     * Getter method for regname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.regname
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of regname
     */
    public String getRegname()
    {
        return regname; 
    }

    /**
     * Setter method for regname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regname
     */
    public void setRegname(String newVal) {
        if ((newVal != null && this.regname != null && (newVal.compareTo(this.regname) == 0)) || 
            (newVal == null && this.regname == null && regname_is_initialized)) {
            return; 
        } 
        this.regname = newVal; 
        regname_is_modified = true; 
        regname_is_initialized = true; 
    }

    /**
     * Determines if the regname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegnameModified() {
        return regname_is_modified; 
    }

    /**
     * Determines if the regname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegnameInitialized() {
        return regname_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: ordermain.regdate
     * <li>default value: now()
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return ordermainid_is_modified || 
		hallname_is_modified || 
		tablename_is_modified || 
		opendate_is_modified || 
		closedate_is_modified || 
		waitername_is_modified || 
		amount_is_modified || 
		discount_is_modified || 
		price_is_modified || 
		cash_is_modified || 
		paid_is_modified || 
		regname_is_modified || 
		regdate_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        ordermainid_is_modified = false;
        hallname_is_modified = false;
        tablename_is_modified = false;
        opendate_is_modified = false;
        closedate_is_modified = false;
        waitername_is_modified = false;
        amount_is_modified = false;
        discount_is_modified = false;
        price_is_modified = false;
        cash_is_modified = false;
        paid_is_modified = false;
        regname_is_modified = false;
        regdate_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(OrdermainBean bean) {
        setOrdermainid(bean.getOrdermainid());
        setHallname(bean.getHallname());
        setTablename(bean.getTablename());
        setOpendate(bean.getOpendate());
        setClosedate(bean.getClosedate());
        setWaitername(bean.getWaitername());
        setAmount(bean.getAmount());
        setDiscount(bean.getDiscount());
        setPrice(bean.getPrice());
        setCash(bean.getCash());
        setPaid(bean.getPaid());
        setRegname(bean.getRegname());
        setRegdate(bean.getRegdate());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[ordermain] "
                 + "\n - ordermain.ordermainid = " + (ordermainid_is_initialized ? ("[" + (ordermainid == null ? null : ordermainid.toString()) + "]") : "not initialized") + ""
                 + "\n - ordermain.hallname = " + (hallname_is_initialized ? ("[" + (hallname == null ? null : hallname.toString()) + "]") : "not initialized") + ""
                 + "\n - ordermain.tablename = " + (tablename_is_initialized ? ("[" + (tablename == null ? null : tablename.toString()) + "]") : "not initialized") + ""
                 + "\n - ordermain.opendate = " + (opendate_is_initialized ? ("[" + (opendate == null ? null : opendate.toString()) + "]") : "not initialized") + ""
                 + "\n - ordermain.closedate = " + (closedate_is_initialized ? ("[" + (closedate == null ? null : closedate.toString()) + "]") : "not initialized") + ""
                 + "\n - ordermain.waitername = " + (waitername_is_initialized ? ("[" + (waitername == null ? null : waitername.toString()) + "]") : "not initialized") + ""
                 + "\n - ordermain.amount = " + (amount_is_initialized ? ("[" + (amount == null ? null : amount.toString()) + "]") : "not initialized") + ""
                 + "\n - ordermain.discount = " + (discount_is_initialized ? ("[" + (discount == null ? null : discount.toString()) + "]") : "not initialized") + ""
                 + "\n - ordermain.price = " + (price_is_initialized ? ("[" + (price == null ? null : price.toString()) + "]") : "not initialized") + ""
                 + "\n - ordermain.cash = " + (cash_is_initialized ? ("[" + (cash == null ? null : cash.toString()) + "]") : "not initialized") + ""
                 + "\n - ordermain.paid = " + (paid_is_initialized ? ("[" + (paid == null ? null : paid.toString()) + "]") : "not initialized") + ""
                 + "\n - ordermain.regname = " + (regname_is_initialized ? ("[" + (regname == null ? null : regname.toString()) + "]") : "not initialized") + ""
                 + "\n - ordermain.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
