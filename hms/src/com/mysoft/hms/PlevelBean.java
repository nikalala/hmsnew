// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class PlevelBean
// extends+ 

// extends- 

{
    private Integer plevelid;
    private boolean plevelid_is_modified = false;
    private boolean plevelid_is_initialized = false;
    
    private Integer personneltypeid;
    private boolean personneltypeid_is_modified = false;
    private boolean personneltypeid_is_initialized = false;
    
    private Integer menuid;
    private boolean menuid_is_modified = false;
    private boolean menuid_is_initialized = false;
    
    private Boolean read;
    private boolean read_is_modified = false;
    private boolean read_is_initialized = false;
    
    private Boolean write;
    private boolean write_is_modified = false;
    private boolean write_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    PlevelBean()
    {
    }
    
    /**
     * Getter method for plevelid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: plevel.plevelid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of plevelid
     */
    public Integer getPlevelid()
    {
        return plevelid; 
    }

    /**
     * Setter method for plevelid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to plevelid
     */
    public void setPlevelid(Integer newVal) {
        if ((newVal != null && this.plevelid != null && (newVal.compareTo(this.plevelid) == 0)) || 
            (newVal == null && this.plevelid == null && plevelid_is_initialized)) {
            return; 
        } 
        this.plevelid = newVal; 
        plevelid_is_modified = true; 
        plevelid_is_initialized = true; 
    }

    /**
     * Setter method for plevelid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to plevelid
     */
    public void setPlevelid(int newVal) {
        setPlevelid(new Integer(newVal));
    }

    /**
     * Determines if the plevelid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPlevelidModified() {
        return plevelid_is_modified; 
    }

    /**
     * Determines if the plevelid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPlevelidInitialized() {
        return plevelid_is_initialized; 
    }

    /**
     * Getter method for personneltypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: plevel.personneltypeid
     * <li> foreign key: personneltype.personneltypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of personneltypeid
     */
    public Integer getPersonneltypeid()
    {
        return personneltypeid; 
    }

    /**
     * Setter method for personneltypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to personneltypeid
     */
    public void setPersonneltypeid(Integer newVal) {
        if ((newVal != null && this.personneltypeid != null && (newVal.compareTo(this.personneltypeid) == 0)) || 
            (newVal == null && this.personneltypeid == null && personneltypeid_is_initialized)) {
            return; 
        } 
        this.personneltypeid = newVal; 
        personneltypeid_is_modified = true; 
        personneltypeid_is_initialized = true; 
    }

    /**
     * Setter method for personneltypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to personneltypeid
     */
    public void setPersonneltypeid(int newVal) {
        setPersonneltypeid(new Integer(newVal));
    }

    /**
     * Determines if the personneltypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPersonneltypeidModified() {
        return personneltypeid_is_modified; 
    }

    /**
     * Determines if the personneltypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPersonneltypeidInitialized() {
        return personneltypeid_is_initialized; 
    }

    /**
     * Getter method for menuid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: plevel.menuid
     * <li> foreign key: menu.menuid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of menuid
     */
    public Integer getMenuid()
    {
        return menuid; 
    }

    /**
     * Setter method for menuid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to menuid
     */
    public void setMenuid(Integer newVal) {
        if ((newVal != null && this.menuid != null && (newVal.compareTo(this.menuid) == 0)) || 
            (newVal == null && this.menuid == null && menuid_is_initialized)) {
            return; 
        } 
        this.menuid = newVal; 
        menuid_is_modified = true; 
        menuid_is_initialized = true; 
    }

    /**
     * Setter method for menuid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to menuid
     */
    public void setMenuid(int newVal) {
        setMenuid(new Integer(newVal));
    }

    /**
     * Determines if the menuid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMenuidModified() {
        return menuid_is_modified; 
    }

    /**
     * Determines if the menuid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMenuidInitialized() {
        return menuid_is_initialized; 
    }

    /**
     * Getter method for read.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: plevel.read
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of read
     */
    public Boolean getRead()
    {
        return read; 
    }

    /**
     * Setter method for read.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to read
     */
    public void setRead(Boolean newVal) {
        if ((newVal != null && this.read != null && newVal.equals(this.read)) || 
            (newVal == null && this.read == null && read_is_initialized)) {
            return; 
        } 
        this.read = newVal; 
        read_is_modified = true; 
        read_is_initialized = true; 
    }

    /**
     * Setter method for read.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to read
     */
    public void setRead(boolean newVal) {
        setRead(new Boolean(newVal));
    }

    /**
     * Determines if the read has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReadModified() {
        return read_is_modified; 
    }

    /**
     * Determines if the read has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReadInitialized() {
        return read_is_initialized; 
    }

    /**
     * Getter method for write.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: plevel.write
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of write
     */
    public Boolean getWrite()
    {
        return write; 
    }

    /**
     * Setter method for write.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to write
     */
    public void setWrite(Boolean newVal) {
        if ((newVal != null && this.write != null && newVal.equals(this.write)) || 
            (newVal == null && this.write == null && write_is_initialized)) {
            return; 
        } 
        this.write = newVal; 
        write_is_modified = true; 
        write_is_initialized = true; 
    }

    /**
     * Setter method for write.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to write
     */
    public void setWrite(boolean newVal) {
        setWrite(new Boolean(newVal));
    }

    /**
     * Determines if the write has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWriteModified() {
        return write_is_modified; 
    }

    /**
     * Determines if the write has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWriteInitialized() {
        return write_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return plevelid_is_modified || 
		personneltypeid_is_modified || 
		menuid_is_modified || 
		read_is_modified || 
		write_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        plevelid_is_modified = false;
        personneltypeid_is_modified = false;
        menuid_is_modified = false;
        read_is_modified = false;
        write_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(PlevelBean bean) {
        setPlevelid(bean.getPlevelid());
        setPersonneltypeid(bean.getPersonneltypeid());
        setMenuid(bean.getMenuid());
        setRead(bean.getRead());
        setWrite(bean.getWrite());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[plevel] "
                 + "\n - plevel.plevelid = " + (plevelid_is_initialized ? ("[" + (plevelid == null ? null : plevelid.toString()) + "]") : "not initialized") + ""
                 + "\n - plevel.personneltypeid = " + (personneltypeid_is_initialized ? ("[" + (personneltypeid == null ? null : personneltypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - plevel.menuid = " + (menuid_is_initialized ? ("[" + (menuid == null ? null : menuid.toString()) + "]") : "not initialized") + ""
                 + "\n - plevel.read = " + (read_is_initialized ? ("[" + (read == null ? null : read.toString()) + "]") : "not initialized") + ""
                 + "\n - plevel.write = " + (write_is_initialized ? ("[" + (write == null ? null : write.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
