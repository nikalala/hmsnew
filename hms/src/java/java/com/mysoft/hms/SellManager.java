// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the sell table.
 */
public class SellManager
// extends+ 

// extends- 

{

    /**
     * Column sellid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_SELLID = 0;
    public static final int TYPE_SELLID = Types.BIGINT;
    public static final String NAME_SELLID = "sellid";

    /**
     * Column customerid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CUSTOMERID = 1;
    public static final int TYPE_CUSTOMERID = Types.BIGINT;
    public static final String NAME_CUSTOMERID = "customerid";

    /**
     * Column selltypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SELLTYPEID = 2;
    public static final int TYPE_SELLTYPEID = Types.INTEGER;
    public static final String NAME_SELLTYPEID = "selltypeid";

    /**
     * Column selldate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_SELLDATE = 3;
    public static final int TYPE_SELLDATE = Types.TIMESTAMP;
    public static final String NAME_SELLDATE = "selldate";

    /**
     * Column sproductid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SPRODUCTID = 4;
    public static final int TYPE_SPRODUCTID = Types.INTEGER;
    public static final String NAME_SPRODUCTID = "sproductid";

    /**
     * Column price of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_PRICE = 5;
    public static final int TYPE_PRICE = Types.DOUBLE;
    public static final String NAME_PRICE = "price";


    private static final String TABLE_NAME = "sell";

    /**
     * Create an array of type string containing all the fields of the sell table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "sell.sellid"
        ,"sell.customerid"
        ,"sell.selltypeid"
        ,"sell.selldate"
        ,"sell.sproductid"
        ,"sell.price"
    };

    /**
     * Field that contains the comma separated fields of the sell table.
     */
    private static final String ALL_FIELDS = "sell.sellid"
                            + ",sell.customerid"
                            + ",sell.selltypeid"
                            + ",sell.selldate"
                            + ",sell.sproductid"
                            + ",sell.price";

    private static SellManager singleton = new SellManager();

    /**
     * Get the SellManager singleton.
     *
     * @return SellManager 
     */
    synchronized public static SellManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own SellManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(SellManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new SellBean instance.
     *
     * @return the new SellBean 
     */
    public SellBean createSellBean()
    {
        return new SellBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a SellBean from the sell using its key fields.
     *
     * @return a unique SellBean 
     */
    //12
    public SellBean loadByPrimaryKey(Long sellid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sell WHERE sell.sellid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, sellid);
            SellBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long sellid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from sell WHERE sell.sellid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, sellid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads SellBean array from the sell table using its customerid field.
     *
     * @return an array of SellBean 
     */
    // LOAD BY IMPORTED KEY
    public SellBean[] loadByCustomerid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sell WHERE customerid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the sell table by customerid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByCustomerid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM sell WHERE customerid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads SellBean array from the sell table using its selltypeid field.
     *
     * @return an array of SellBean 
     */
    // LOAD BY IMPORTED KEY
    public SellBean[] loadBySelltypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sell WHERE selltypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the sell table by selltypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySelltypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM sell WHERE selltypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads SellBean array from the sell table using its sproductid field.
     *
     * @return an array of SellBean 
     */
    // LOAD BY IMPORTED KEY
    public SellBean[] loadBySproductid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sell WHERE sproductid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the sell table by sproductid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySproductid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM sell WHERE sproductid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the CustomerBean object from the sell.customerid field.
     *
     * @param pObject the SellBean 
     * @return the associated CustomerBean pObject
     */
    // GET IMPORTED
    public CustomerBean getCustomerBean(SellBean pObject) throws SQLException
    {
        CustomerBean other = CustomerManager.getInstance().createCustomerBean();
        other.setCustomerid(pObject.getCustomerid());
        return CustomerManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the SellBean object to the CustomerBean object.
     *
     * @param pObject the SellBean object to use
     * @param pObjectToBeSet the CustomerBean object to associate to the SellBean 
     * @return the associated CustomerBean pObject
     */
    // SET IMPORTED
    public SellBean setCustomerBean(SellBean pObject,CustomerBean pObjectToBeSet)
    {
        pObject.setCustomerid(pObjectToBeSet.getCustomerid());
        return pObject;
    }

    /**
     * Retrieves the SelltypeBean object from the sell.selltypeid field.
     *
     * @param pObject the SellBean 
     * @return the associated SelltypeBean pObject
     */
    // GET IMPORTED
    public SelltypeBean getSelltypeBean(SellBean pObject) throws SQLException
    {
        SelltypeBean other = SelltypeManager.getInstance().createSelltypeBean();
        other.setSelltypeid(pObject.getSelltypeid());
        return SelltypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the SellBean object to the SelltypeBean object.
     *
     * @param pObject the SellBean object to use
     * @param pObjectToBeSet the SelltypeBean object to associate to the SellBean 
     * @return the associated SelltypeBean pObject
     */
    // SET IMPORTED
    public SellBean setSelltypeBean(SellBean pObject,SelltypeBean pObjectToBeSet)
    {
        pObject.setSelltypeid(pObjectToBeSet.getSelltypeid());
        return pObject;
    }

    /**
     * Retrieves the SproductBean object from the sell.sproductid field.
     *
     * @param pObject the SellBean 
     * @return the associated SproductBean pObject
     */
    // GET IMPORTED
    public SproductBean getSproductBean(SellBean pObject) throws SQLException
    {
        SproductBean other = SproductManager.getInstance().createSproductBean();
        other.setSproductid(pObject.getSproductid());
        return SproductManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the SellBean object to the SproductBean object.
     *
     * @param pObject the SellBean object to use
     * @param pObjectToBeSet the SproductBean object to associate to the SellBean 
     * @return the associated SproductBean pObject
     */
    // SET IMPORTED
    public SellBean setSproductBean(SellBean pObject,SproductBean pObjectToBeSet)
    {
        pObject.setSproductid(pObjectToBeSet.getSproductid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from sell.
     *
     * @return an array of SellManager pObject
     */
    //38
    public SellBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sell",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of SellBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting SellBean table 
     */
    //49
    public SellBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of SellBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting SellBean table 
     */
    //51
    public SellBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from sell " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from sell ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (SellBean[])v.toArray(new SellBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from sell table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the sell table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM sell " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the SellBean pObject into the database.
     *
     * @param pObject the SellBean pObject to be saved
     */
    //100
    public SellBean save(SellBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isSellidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('sellid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setSellid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into sell (");
    
                if (pObject.isSellidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sellid");
                    _dirtyCount++;
                }

                if (pObject.isCustomeridModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("customerid");
                    _dirtyCount++;
                }

                if (pObject.isSelltypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("selltypeid");
                    _dirtyCount++;
                }

                if (pObject.isSelldateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("selldate");
                    _dirtyCount++;
                }

                if (pObject.isSproductidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sproductid");
                    _dirtyCount++;
                }

                if (pObject.isPriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("price");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isSellidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSellid());
                }
    
                if (pObject.isCustomeridModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getCustomerid());
                }
    
                if (pObject.isSelltypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSelltypeid());
                }
    
                if (pObject.isSelldateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getSelldate());
                }
    
                if (pObject.isSproductidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSproductid());
                }
    
                if (pObject.isPriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE sell SET ");
                boolean useComma=false;

                if (pObject.isSellidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sellid").append("=?");
                }

                if (pObject.isCustomeridModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("customerid").append("=?");
                }

                if (pObject.isSelltypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("selltypeid").append("=?");
                }

                if (pObject.isSelldateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("selldate").append("=?");
                }

                if (pObject.isSproductidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sproductid").append("=?");
                }

                if (pObject.isPriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("price").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("sell.sellid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isSellidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getSellid());
                }

                if (pObject.isCustomeridModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getCustomerid());
                }

                if (pObject.isSelltypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSelltypeid());
                }

                if (pObject.isSelldateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getSelldate());
                }

                if (pObject.isSproductidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSproductid());
                }

                if (pObject.isPriceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getSellid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of SellBean pObjects into the database.
     *
     * @param pObjects the SellBean pObject table to be saved
     * @return the saved SellBean array.
     */
    //65
    public SellBean[] save(SellBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique SellBean pObject from a template one giving a c
     *
     * @param pObject the SellBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public SellBean loadUniqueUsingTemplate(SellBean pObject) throws SQLException
    {
         SellBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of SellBean from a template one.
     *
     * @param pObject the SellBean template to look for
     * @return all the SellBean matching the template
     */
    //88
    public SellBean[] loadUsingTemplate(SellBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from sell WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isSellidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sellid= ?");
             }
    
             if (pObject.isCustomeridModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("customerid= ?");
             }
    
             if (pObject.isSelltypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("selltypeid= ?");
             }
    
             if (pObject.isSelldateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("selldate= ?");
             }
    
             if (pObject.isSproductidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sproductid= ?");
             }
    
             if (pObject.isPriceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("price= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isSellidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getSellid());
             }
    
             if (pObject.isCustomeridModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getCustomerid());
             }
    
             if (pObject.isSelltypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSelltypeid());
             }
    
             if (pObject.isSelldateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getSelldate());
             }
    
             if (pObject.isSproductidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSproductid());
             }
    
             if (pObject.isPriceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a SellBean template.
     *
     * @param pObject the SellBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(SellBean pObject) throws SQLException
    {
        if (pObject.isSellidInitialized())
            return deleteByPrimaryKey(pObject.getSellid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM sell WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isSellidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sellid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCustomeridInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("customerid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSelltypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("selltypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSelldateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("selldate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSproductidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sproductid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("price").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isSellidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getSellid());
            }
    
            if (pObject.isCustomeridInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getCustomerid());
            }
    
            if (pObject.isSelltypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSelltypeid());
            }
    
            if (pObject.isSelldateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getSelldate());
            }
    
            if (pObject.isSproductidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSproductid());
            }
    
            if (pObject.isPriceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of PaytypeBean using the relation table Payment given a SellBean object.
     *
     * @param pObject the SellBean pObject to be used
     * @return an array of PaytypeBean 
     */
    // MANY TO MANY
    public PaytypeBean[] loadPaytypeViaPayment(SellBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        paytype,payment"
                         + " WHERE "    
                         + "     payment.sellid = ?"
                         + " AND payment.paytypeid = paytype.paytypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getSellid());
             return PaytypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table sell.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table sell with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from sell " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table sell with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific SellBean pObject given a c
     *
     * @param pObject the SellBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(SellBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from sell WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isSellidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sellid= ?");
                }
    
                if (pObject.isCustomeridModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("customerid= ?");
                }
    
                if (pObject.isSelltypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("selltypeid= ?");
                }
    
                if (pObject.isSelldateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("selldate= ?");
                }
    
                if (pObject.isSproductidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sproductid= ?");
                }
    
                if (pObject.isPriceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("price= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isSellidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSellid());
                }
    
                if (pObject.isCustomeridModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getCustomerid());
                }
    
                if (pObject.isSelltypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSelltypeid());
                }
    
                if (pObject.isSelldateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getSelldate());
                }
    
                if (pObject.isSproductidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSproductid());
                }
    
                if (pObject.isPriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the sell on a SellBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting SellBean pObject
     */
    //72
    public SellBean decodeRow(ResultSet rs) throws SQLException
    {
        SellBean pObject = createSellBean();
        pObject.setSellid(Manager.getLong(rs, 1));
        pObject.setCustomerid(Manager.getLong(rs, 2));
        pObject.setSelltypeid(Manager.getInteger(rs, 3));
        pObject.setSelldate(rs.getTimestamp(4));
        pObject.setSproductid(Manager.getInteger(rs, 5));
        pObject.setPrice(Manager.getDouble(rs, 6));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the sell table on a SellBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting SellBean pObject
     */
    //73
    public SellBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        SellBean pObject = createSellBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_SELLID:
                    ++pos;
                    pObject.setSellid(Manager.getLong(rs, pos));
                    break;
                case ID_CUSTOMERID:
                    ++pos;
                    pObject.setCustomerid(Manager.getLong(rs, pos));
                    break;
                case ID_SELLTYPEID:
                    ++pos;
                    pObject.setSelltypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_SELLDATE:
                    ++pos;
                    pObject.setSelldate(rs.getTimestamp(pos));
                    break;
                case ID_SPRODUCTID:
                    ++pos;
                    pObject.setSproductid(Manager.getInteger(rs, pos));
                    break;
                case ID_PRICE:
                    ++pos;
                    pObject.setPrice(Manager.getDouble(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of SellBean 
     */
    //41
    public SellBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of SellBean 
     */
    public SellBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (SellBean[])v.toArray(new SellBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private SellListener listener = null;

    /**
     * Registers a unique SellListener listener.
     */
    //66.5
    public void registerListener(SellListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the SellBean pObject.
     *
     * @param pObject the SellBean pObject to be saved
     */
    //67
    void beforeInsert(SellBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the SellBean pObject.
     *
     * @param pObject the SellBean pObject to be saved
     */
    //68
    void afterInsert(SellBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the SellBean pObject.
     *
     * @param pObject the SellBean pObject to be updated
     */
    //69
    void beforeUpdate(SellBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the SellBean pObject.
     *
     * @param pObject the SellBean pObject to be updated
     */
    //70
    void afterUpdate(SellBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
