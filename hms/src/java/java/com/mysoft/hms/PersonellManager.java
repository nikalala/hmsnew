// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the personell table.
 */
public class PersonellManager
// extends+ 

// extends- 

{

    /**
     * Column personellid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_PERSONELLID = 0;
    public static final int TYPE_PERSONELLID = Types.INTEGER;
    public static final String NAME_PERSONELLID = "personellid";

    /**
     * Column fname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_FNAME = 1;
    public static final int TYPE_FNAME = Types.VARCHAR;
    public static final String NAME_FNAME = "fname";

    /**
     * Column lname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_LNAME = 2;
    public static final int TYPE_LNAME = Types.VARCHAR;
    public static final String NAME_LNAME = "lname";

    /**
     * Column phone of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PHONE = 3;
    public static final int TYPE_PHONE = Types.VARCHAR;
    public static final String NAME_PHONE = "phone";

    /**
     * Column personelltypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_PERSONELLTYPEID = 4;
    public static final int TYPE_PERSONELLTYPEID = Types.INTEGER;
    public static final String NAME_PERSONELLTYPEID = "personelltypeid";

    /**
     * Column loginid of type Types.VARCHAR mapped to String.
     */
    public static final int ID_LOGINID = 5;
    public static final int TYPE_LOGINID = Types.VARCHAR;
    public static final String NAME_LOGINID = "loginid";

    /**
     * Column password of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PASSWORD = 6;
    public static final int TYPE_PASSWORD = Types.VARCHAR;
    public static final String NAME_PASSWORD = "password";

    /**
     * Column email of type Types.VARCHAR mapped to String.
     */
    public static final int ID_EMAIL = 7;
    public static final int TYPE_EMAIL = Types.VARCHAR;
    public static final String NAME_EMAIL = "email";

    /**
     * Column address of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ADDRESS = 8;
    public static final int TYPE_ADDRESS = Types.VARCHAR;
    public static final String NAME_ADDRESS = "address";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 9;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 10;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";


    private static final String TABLE_NAME = "personell";

    /**
     * Create an array of type string containing all the fields of the personell table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "personell.personellid"
        ,"personell.fname"
        ,"personell.lname"
        ,"personell.phone"
        ,"personell.personelltypeid"
        ,"personell.loginid"
        ,"personell.password"
        ,"personell.email"
        ,"personell.address"
        ,"personell.regdate"
        ,"personell.deleted"
    };

    /**
     * Field that contains the comma separated fields of the personell table.
     */
    private static final String ALL_FIELDS = "personell.personellid"
                            + ",personell.fname"
                            + ",personell.lname"
                            + ",personell.phone"
                            + ",personell.personelltypeid"
                            + ",personell.loginid"
                            + ",personell.password"
                            + ",personell.email"
                            + ",personell.address"
                            + ",personell.regdate"
                            + ",personell.deleted";

    private static PersonellManager singleton = new PersonellManager();

    /**
     * Get the PersonellManager singleton.
     *
     * @return PersonellManager 
     */
    synchronized public static PersonellManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own PersonellManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(PersonellManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new PersonellBean instance.
     *
     * @return the new PersonellBean 
     */
    public PersonellBean createPersonellBean()
    {
        return new PersonellBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a PersonellBean from the personell using its key fields.
     *
     * @return a unique PersonellBean 
     */
    //12
    public PersonellBean loadByPrimaryKey(Integer personellid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM personell WHERE personell.personellid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, personellid);
            PersonellBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer personellid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from personell WHERE personell.personellid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, personellid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads PersonellBean array from the personell table using its personelltypeid field.
     *
     * @return an array of PersonellBean 
     */
    // LOAD BY IMPORTED KEY
    public PersonellBean[] loadByPersonelltypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM personell WHERE personelltypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the personell table by personelltypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByPersonelltypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM personell WHERE personelltypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the PersonelltypeBean object from the personell.personelltypeid field.
     *
     * @param pObject the PersonellBean 
     * @return the associated PersonelltypeBean pObject
     */
    // GET IMPORTED
    public PersonelltypeBean getPersonelltypeBean(PersonellBean pObject) throws SQLException
    {
        PersonelltypeBean other = PersonelltypeManager.getInstance().createPersonelltypeBean();
        other.setPersonelltypeid(pObject.getPersonelltypeid());
        return PersonelltypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the PersonellBean object to the PersonelltypeBean object.
     *
     * @param pObject the PersonellBean object to use
     * @param pObjectToBeSet the PersonelltypeBean object to associate to the PersonellBean 
     * @return the associated PersonelltypeBean pObject
     */
    // SET IMPORTED
    public PersonellBean setPersonelltypeBean(PersonellBean pObject,PersonelltypeBean pObjectToBeSet)
    {
        pObject.setPersonelltypeid(pObjectToBeSet.getPersonelltypeid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from personell.
     *
     * @return an array of PersonellManager pObject
     */
    //38
    public PersonellBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM personell",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of PersonellBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting PersonellBean table 
     */
    //49
    public PersonellBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of PersonellBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting PersonellBean table 
     */
    //51
    public PersonellBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from personell " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from personell ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (PersonellBean[])v.toArray(new PersonellBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from personell table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the personell table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM personell " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the PersonellBean pObject into the database.
     *
     * @param pObject the PersonellBean pObject to be saved
     */
    //100
    public PersonellBean save(PersonellBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isPersonellidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('personellid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setPersonellid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into personell (");
    
                if (pObject.isPersonellidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("personellid");
                    _dirtyCount++;
                }

                if (pObject.isFnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fname");
                    _dirtyCount++;
                }

                if (pObject.isLnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("lname");
                    _dirtyCount++;
                }

                if (pObject.isPhoneModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("phone");
                    _dirtyCount++;
                }

                if (pObject.isPersonelltypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("personelltypeid");
                    _dirtyCount++;
                }

                if (pObject.isLoginidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("loginid");
                    _dirtyCount++;
                }

                if (pObject.isPasswordModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("password");
                    _dirtyCount++;
                }

                if (pObject.isEmailModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("email");
                    _dirtyCount++;
                }

                if (pObject.isAddressModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("address");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isPersonellidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPersonellid());
                }
    
                if (pObject.isFnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getFname());
                }
    
                if (pObject.isLnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLname());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isPersonelltypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPersonelltypeid());
                }
    
                if (pObject.isLoginidModified()) {
                    ps.setString(++_dirtyCount, pObject.getLoginid());
                }
    
                if (pObject.isPasswordModified()) {
                    ps.setString(++_dirtyCount, pObject.getPassword());
                }
    
                if (pObject.isEmailModified()) {
                    ps.setString(++_dirtyCount, pObject.getEmail());
                }
    
                if (pObject.isAddressModified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE personell SET ");
                boolean useComma=false;

                if (pObject.isPersonellidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("personellid").append("=?");
                }

                if (pObject.isFnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fname").append("=?");
                }

                if (pObject.isLnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("lname").append("=?");
                }

                if (pObject.isPhoneModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("phone").append("=?");
                }

                if (pObject.isPersonelltypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("personelltypeid").append("=?");
                }

                if (pObject.isLoginidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("loginid").append("=?");
                }

                if (pObject.isPasswordModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("password").append("=?");
                }

                if (pObject.isEmailModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("email").append("=?");
                }

                if (pObject.isAddressModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("address").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("personell.personellid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isPersonellidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getPersonellid());
                }

                if (pObject.isFnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getFname());
                }

                if (pObject.isLnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getLname());
                }

                if (pObject.isPhoneModified()) {
                      ps.setString(++_dirtyCount, pObject.getPhone());
                }

                if (pObject.isPersonelltypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getPersonelltypeid());
                }

                if (pObject.isLoginidModified()) {
                      ps.setString(++_dirtyCount, pObject.getLoginid());
                }

                if (pObject.isPasswordModified()) {
                      ps.setString(++_dirtyCount, pObject.getPassword());
                }

                if (pObject.isEmailModified()) {
                      ps.setString(++_dirtyCount, pObject.getEmail());
                }

                if (pObject.isAddressModified()) {
                      ps.setString(++_dirtyCount, pObject.getAddress());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPersonellid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of PersonellBean pObjects into the database.
     *
     * @param pObjects the PersonellBean pObject table to be saved
     * @return the saved PersonellBean array.
     */
    //65
    public PersonellBean[] save(PersonellBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique PersonellBean pObject from a template one giving a c
     *
     * @param pObject the PersonellBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public PersonellBean loadUniqueUsingTemplate(PersonellBean pObject) throws SQLException
    {
         PersonellBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of PersonellBean from a template one.
     *
     * @param pObject the PersonellBean template to look for
     * @return all the PersonellBean matching the template
     */
    //88
    public PersonellBean[] loadUsingTemplate(PersonellBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from personell WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isPersonellidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("personellid= ?");
             }
    
             if (pObject.isFnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fname= ?");
             }
    
             if (pObject.isLnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("lname= ?");
             }
    
             if (pObject.isPhoneModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
             }
    
             if (pObject.isPersonelltypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("personelltypeid= ?");
             }
    
             if (pObject.isLoginidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("loginid= ?");
             }
    
             if (pObject.isPasswordModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("password= ?");
             }
    
             if (pObject.isEmailModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("email= ?");
             }
    
             if (pObject.isAddressModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isPersonellidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getPersonellid());
             }
    
             if (pObject.isFnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getFname());
             }
    
             if (pObject.isLnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getLname());
             }
    
             if (pObject.isPhoneModified()) {
                 ps.setString(++_dirtyCount, pObject.getPhone());
             }
    
             if (pObject.isPersonelltypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getPersonelltypeid());
             }
    
             if (pObject.isLoginidModified()) {
                 ps.setString(++_dirtyCount, pObject.getLoginid());
             }
    
             if (pObject.isPasswordModified()) {
                 ps.setString(++_dirtyCount, pObject.getPassword());
             }
    
             if (pObject.isEmailModified()) {
                 ps.setString(++_dirtyCount, pObject.getEmail());
             }
    
             if (pObject.isAddressModified()) {
                 ps.setString(++_dirtyCount, pObject.getAddress());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a PersonellBean template.
     *
     * @param pObject the PersonellBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(PersonellBean pObject) throws SQLException
    {
        if (pObject.isPersonellidInitialized())
            return deleteByPrimaryKey(pObject.getPersonellid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM personell WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isPersonellidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("personellid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("lname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPhoneInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("phone").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPersonelltypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("personelltypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLoginidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("loginid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPasswordInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("password").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isEmailInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("email").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAddressInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("address").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isPersonellidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPersonellid());
            }
    
            if (pObject.isFnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getFname());
            }
    
            if (pObject.isLnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getLname());
            }
    
            if (pObject.isPhoneInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPhone());
            }
    
            if (pObject.isPersonelltypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPersonelltypeid());
            }
    
            if (pObject.isLoginidInitialized()) {
                ps.setString(++_dirtyCount, pObject.getLoginid());
            }
    
            if (pObject.isPasswordInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPassword());
            }
    
            if (pObject.isEmailInitialized()) {
                ps.setString(++_dirtyCount, pObject.getEmail());
            }
    
            if (pObject.isAddressInitialized()) {
                ps.setString(++_dirtyCount, pObject.getAddress());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table personell.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table personell with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from personell " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table personell with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific PersonellBean pObject given a c
     *
     * @param pObject the PersonellBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(PersonellBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from personell WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isPersonellidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("personellid= ?");
                }
    
                if (pObject.isFnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fname= ?");
                }
    
                if (pObject.isLnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("lname= ?");
                }
    
                if (pObject.isPhoneModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
                }
    
                if (pObject.isPersonelltypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("personelltypeid= ?");
                }
    
                if (pObject.isLoginidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("loginid= ?");
                }
    
                if (pObject.isPasswordModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("password= ?");
                }
    
                if (pObject.isEmailModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("email= ?");
                }
    
                if (pObject.isAddressModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isPersonellidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPersonellid());
                }
    
                if (pObject.isFnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getFname());
                }
    
                if (pObject.isLnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLname());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isPersonelltypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPersonelltypeid());
                }
    
                if (pObject.isLoginidModified()) {
                    ps.setString(++_dirtyCount, pObject.getLoginid());
                }
    
                if (pObject.isPasswordModified()) {
                    ps.setString(++_dirtyCount, pObject.getPassword());
                }
    
                if (pObject.isEmailModified()) {
                    ps.setString(++_dirtyCount, pObject.getEmail());
                }
    
                if (pObject.isAddressModified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the personell on a PersonellBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting PersonellBean pObject
     */
    //72
    public PersonellBean decodeRow(ResultSet rs) throws SQLException
    {
        PersonellBean pObject = createPersonellBean();
        pObject.setPersonellid(Manager.getInteger(rs, 1));
        pObject.setFname(rs.getString(2));
        pObject.setLname(rs.getString(3));
        pObject.setPhone(rs.getString(4));
        pObject.setPersonelltypeid(Manager.getInteger(rs, 5));
        pObject.setLoginid(rs.getString(6));
        pObject.setPassword(rs.getString(7));
        pObject.setEmail(rs.getString(8));
        pObject.setAddress(rs.getString(9));
        pObject.setRegdate(rs.getTimestamp(10));
        pObject.setDeleted(Manager.getBoolean(rs, 11));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the personell table on a PersonellBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting PersonellBean pObject
     */
    //73
    public PersonellBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        PersonellBean pObject = createPersonellBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_PERSONELLID:
                    ++pos;
                    pObject.setPersonellid(Manager.getInteger(rs, pos));
                    break;
                case ID_FNAME:
                    ++pos;
                    pObject.setFname(rs.getString(pos));
                    break;
                case ID_LNAME:
                    ++pos;
                    pObject.setLname(rs.getString(pos));
                    break;
                case ID_PHONE:
                    ++pos;
                    pObject.setPhone(rs.getString(pos));
                    break;
                case ID_PERSONELLTYPEID:
                    ++pos;
                    pObject.setPersonelltypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_LOGINID:
                    ++pos;
                    pObject.setLoginid(rs.getString(pos));
                    break;
                case ID_PASSWORD:
                    ++pos;
                    pObject.setPassword(rs.getString(pos));
                    break;
                case ID_EMAIL:
                    ++pos;
                    pObject.setEmail(rs.getString(pos));
                    break;
                case ID_ADDRESS:
                    ++pos;
                    pObject.setAddress(rs.getString(pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of PersonellBean 
     */
    //41
    public PersonellBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of PersonellBean 
     */
    public PersonellBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (PersonellBean[])v.toArray(new PersonellBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private PersonellListener listener = null;

    /**
     * Registers a unique PersonellListener listener.
     */
    //66.5
    public void registerListener(PersonellListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the PersonellBean pObject.
     *
     * @param pObject the PersonellBean pObject to be saved
     */
    //67
    void beforeInsert(PersonellBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the PersonellBean pObject.
     *
     * @param pObject the PersonellBean pObject to be saved
     */
    //68
    void afterInsert(PersonellBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the PersonellBean pObject.
     *
     * @param pObject the PersonellBean pObject to be updated
     */
    //69
    void beforeUpdate(PersonellBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the PersonellBean pObject.
     *
     * @param pObject the PersonellBean pObject to be updated
     */
    //70
    void afterUpdate(PersonellBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
