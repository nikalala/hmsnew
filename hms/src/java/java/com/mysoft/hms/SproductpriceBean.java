// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class SproductpriceBean
// extends+ 

// extends- 

{
    private Long sproductpriceid;
    private boolean sproductpriceid_is_modified = false;
    private boolean sproductpriceid_is_initialized = false;
    
    private Integer sproductid;
    private boolean sproductid_is_modified = false;
    private boolean sproductid_is_initialized = false;
    
    private java.util.Date calcdate;
    private boolean calcdate_is_modified = false;
    private boolean calcdate_is_initialized = false;
    
    private Double price;
    private boolean price_is_modified = false;
    private boolean price_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    SproductpriceBean()
    {
    }
    
    /**
     * Getter method for sproductpriceid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sproductprice.sproductpriceid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of sproductpriceid
     */
    public Long getSproductpriceid()
    {
        return sproductpriceid; 
    }

    /**
     * Setter method for sproductpriceid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sproductpriceid
     */
    public void setSproductpriceid(Long newVal) {
        if ((newVal != null && this.sproductpriceid != null && (newVal.compareTo(this.sproductpriceid) == 0)) || 
            (newVal == null && this.sproductpriceid == null && sproductpriceid_is_initialized)) {
            return; 
        } 
        this.sproductpriceid = newVal; 
        sproductpriceid_is_modified = true; 
        sproductpriceid_is_initialized = true; 
    }

    /**
     * Setter method for sproductpriceid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sproductpriceid
     */
    public void setSproductpriceid(long newVal) {
        setSproductpriceid(new Long(newVal));
    }

    /**
     * Determines if the sproductpriceid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSproductpriceidModified() {
        return sproductpriceid_is_modified; 
    }

    /**
     * Determines if the sproductpriceid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSproductpriceidInitialized() {
        return sproductpriceid_is_initialized; 
    }

    /**
     * Getter method for sproductid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sproductprice.sproductid
     * <li> foreign key: sproduct.sproductid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of sproductid
     */
    public Integer getSproductid()
    {
        return sproductid; 
    }

    /**
     * Setter method for sproductid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sproductid
     */
    public void setSproductid(Integer newVal) {
        if ((newVal != null && this.sproductid != null && (newVal.compareTo(this.sproductid) == 0)) || 
            (newVal == null && this.sproductid == null && sproductid_is_initialized)) {
            return; 
        } 
        this.sproductid = newVal; 
        sproductid_is_modified = true; 
        sproductid_is_initialized = true; 
    }

    /**
     * Setter method for sproductid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sproductid
     */
    public void setSproductid(int newVal) {
        setSproductid(new Integer(newVal));
    }

    /**
     * Determines if the sproductid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSproductidModified() {
        return sproductid_is_modified; 
    }

    /**
     * Determines if the sproductid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSproductidInitialized() {
        return sproductid_is_initialized; 
    }

    /**
     * Getter method for calcdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sproductprice.calcdate
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of calcdate
     */
    public java.util.Date getCalcdate()
    {
        return calcdate; 
    }

    /**
     * Setter method for calcdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to calcdate
     */
    public void setCalcdate(java.util.Date newVal) {
        if ((newVal != null && this.calcdate != null && (newVal.compareTo(this.calcdate) == 0)) || 
            (newVal == null && this.calcdate == null && calcdate_is_initialized)) {
            return; 
        } 
        this.calcdate = newVal; 
        calcdate_is_modified = true; 
        calcdate_is_initialized = true; 
    }

    /**
     * Setter method for calcdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to calcdate
     */
    public void setCalcdate(long newVal) {
        setCalcdate(new java.util.Date(newVal));
    }

    /**
     * Determines if the calcdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCalcdateModified() {
        return calcdate_is_modified; 
    }

    /**
     * Determines if the calcdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCalcdateInitialized() {
        return calcdate_is_initialized; 
    }

    /**
     * Getter method for price.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sproductprice.price
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of price
     */
    public Double getPrice()
    {
        return price; 
    }

    /**
     * Setter method for price.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(Double newVal) {
        if ((newVal != null && this.price != null && (newVal.compareTo(this.price) == 0)) || 
            (newVal == null && this.price == null && price_is_initialized)) {
            return; 
        } 
        this.price = newVal; 
        price_is_modified = true; 
        price_is_initialized = true; 
    }

    /**
     * Setter method for price.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(double newVal) {
        setPrice(new Double(newVal));
    }

    /**
     * Determines if the price has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPriceModified() {
        return price_is_modified; 
    }

    /**
     * Determines if the price has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPriceInitialized() {
        return price_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return sproductpriceid_is_modified || 
		sproductid_is_modified || 
		calcdate_is_modified || 
		price_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        sproductpriceid_is_modified = false;
        sproductid_is_modified = false;
        calcdate_is_modified = false;
        price_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SproductpriceBean bean) {
        setSproductpriceid(bean.getSproductpriceid());
        setSproductid(bean.getSproductid());
        setCalcdate(bean.getCalcdate());
        setPrice(bean.getPrice());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[sproductprice] "
                 + "\n - sproductprice.sproductpriceid = " + (sproductpriceid_is_initialized ? ("[" + (sproductpriceid == null ? null : sproductpriceid.toString()) + "]") : "not initialized") + ""
                 + "\n - sproductprice.sproductid = " + (sproductid_is_initialized ? ("[" + (sproductid == null ? null : sproductid.toString()) + "]") : "not initialized") + ""
                 + "\n - sproductprice.calcdate = " + (calcdate_is_initialized ? ("[" + (calcdate == null ? null : calcdate.toString()) + "]") : "not initialized") + ""
                 + "\n - sproductprice.price = " + (price_is_initialized ? ("[" + (price == null ? null : price.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
