// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class ReservationroomBean
// extends+ 

// extends- 

{
    private Long reservationroomid;
    private boolean reservationroomid_is_modified = false;
    private boolean reservationroomid_is_initialized = false;
    
    private Long reservationid;
    private boolean reservationid_is_modified = false;
    private boolean reservationid_is_initialized = false;
    
    private Integer roomid;
    private boolean roomid_is_modified = false;
    private boolean roomid_is_initialized = false;
    
    private Boolean leader;
    private boolean leader_is_modified = false;
    private boolean leader_is_initialized = false;
    
    private Integer adult;
    private boolean adult_is_modified = false;
    private boolean adult_is_initialized = false;
    
    private Integer child;
    private boolean child_is_modified = false;
    private boolean child_is_initialized = false;
    
    private Integer ratetypeid;
    private boolean ratetypeid_is_modified = false;
    private boolean ratetypeid_is_initialized = false;
    
    private Long guestid;
    private boolean guestid_is_modified = false;
    private boolean guestid_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Integer roomtypeid;
    private boolean roomtypeid_is_modified = false;
    private boolean roomtypeid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ReservationroomBean()
    {
    }
    
    /**
     * Getter method for reservationroomid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationroom.reservationroomid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of reservationroomid
     */
    public Long getReservationroomid()
    {
        return reservationroomid; 
    }

    /**
     * Setter method for reservationroomid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationroomid
     */
    public void setReservationroomid(Long newVal) {
        if ((newVal != null && this.reservationroomid != null && (newVal.compareTo(this.reservationroomid) == 0)) || 
            (newVal == null && this.reservationroomid == null && reservationroomid_is_initialized)) {
            return; 
        } 
        this.reservationroomid = newVal; 
        reservationroomid_is_modified = true; 
        reservationroomid_is_initialized = true; 
    }

    /**
     * Setter method for reservationroomid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationroomid
     */
    public void setReservationroomid(long newVal) {
        setReservationroomid(new Long(newVal));
    }

    /**
     * Determines if the reservationroomid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationroomidModified() {
        return reservationroomid_is_modified; 
    }

    /**
     * Determines if the reservationroomid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationroomidInitialized() {
        return reservationroomid_is_initialized; 
    }

    /**
     * Getter method for reservationid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationroom.reservationid
     * <li> foreign key: reservation.reservationid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of reservationid
     */
    public Long getReservationid()
    {
        return reservationid; 
    }

    /**
     * Setter method for reservationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reservationid
     */
    public void setReservationid(Long newVal) {
        if ((newVal != null && this.reservationid != null && (newVal.compareTo(this.reservationid) == 0)) || 
            (newVal == null && this.reservationid == null && reservationid_is_initialized)) {
            return; 
        } 
        this.reservationid = newVal; 
        reservationid_is_modified = true; 
        reservationid_is_initialized = true; 
    }

    /**
     * Setter method for reservationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reservationid
     */
    public void setReservationid(long newVal) {
        setReservationid(new Long(newVal));
    }

    /**
     * Determines if the reservationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReservationidModified() {
        return reservationid_is_modified; 
    }

    /**
     * Determines if the reservationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReservationidInitialized() {
        return reservationid_is_initialized; 
    }

    /**
     * Getter method for roomid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationroom.roomid
     * <li> foreign key: room.roomid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of roomid
     */
    public Integer getRoomid()
    {
        return roomid; 
    }

    /**
     * Setter method for roomid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomid
     */
    public void setRoomid(Integer newVal) {
        if ((newVal != null && this.roomid != null && (newVal.compareTo(this.roomid) == 0)) || 
            (newVal == null && this.roomid == null && roomid_is_initialized)) {
            return; 
        } 
        this.roomid = newVal; 
        roomid_is_modified = true; 
        roomid_is_initialized = true; 
    }

    /**
     * Setter method for roomid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to roomid
     */
    public void setRoomid(int newVal) {
        setRoomid(new Integer(newVal));
    }

    /**
     * Determines if the roomid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomidModified() {
        return roomid_is_modified; 
    }

    /**
     * Determines if the roomid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomidInitialized() {
        return roomid_is_initialized; 
    }

    /**
     * Getter method for leader.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationroom.leader
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of leader
     */
    public Boolean getLeader()
    {
        return leader; 
    }

    /**
     * Setter method for leader.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to leader
     */
    public void setLeader(Boolean newVal) {
        if ((newVal != null && this.leader != null && newVal.equals(this.leader)) || 
            (newVal == null && this.leader == null && leader_is_initialized)) {
            return; 
        } 
        this.leader = newVal; 
        leader_is_modified = true; 
        leader_is_initialized = true; 
    }

    /**
     * Setter method for leader.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to leader
     */
    public void setLeader(boolean newVal) {
        setLeader(new Boolean(newVal));
    }

    /**
     * Determines if the leader has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLeaderModified() {
        return leader_is_modified; 
    }

    /**
     * Determines if the leader has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLeaderInitialized() {
        return leader_is_initialized; 
    }

    /**
     * Getter method for adult.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationroom.adult
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of adult
     */
    public Integer getAdult()
    {
        return adult; 
    }

    /**
     * Setter method for adult.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to adult
     */
    public void setAdult(Integer newVal) {
        if ((newVal != null && this.adult != null && (newVal.compareTo(this.adult) == 0)) || 
            (newVal == null && this.adult == null && adult_is_initialized)) {
            return; 
        } 
        this.adult = newVal; 
        adult_is_modified = true; 
        adult_is_initialized = true; 
    }

    /**
     * Setter method for adult.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to adult
     */
    public void setAdult(int newVal) {
        setAdult(new Integer(newVal));
    }

    /**
     * Determines if the adult has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAdultModified() {
        return adult_is_modified; 
    }

    /**
     * Determines if the adult has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAdultInitialized() {
        return adult_is_initialized; 
    }

    /**
     * Getter method for child.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationroom.child
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of child
     */
    public Integer getChild()
    {
        return child; 
    }

    /**
     * Setter method for child.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to child
     */
    public void setChild(Integer newVal) {
        if ((newVal != null && this.child != null && (newVal.compareTo(this.child) == 0)) || 
            (newVal == null && this.child == null && child_is_initialized)) {
            return; 
        } 
        this.child = newVal; 
        child_is_modified = true; 
        child_is_initialized = true; 
    }

    /**
     * Setter method for child.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to child
     */
    public void setChild(int newVal) {
        setChild(new Integer(newVal));
    }

    /**
     * Determines if the child has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isChildModified() {
        return child_is_modified; 
    }

    /**
     * Determines if the child has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isChildInitialized() {
        return child_is_initialized; 
    }

    /**
     * Getter method for ratetypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationroom.ratetypeid
     * <li> foreign key: ratetype.ratetypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of ratetypeid
     */
    public Integer getRatetypeid()
    {
        return ratetypeid; 
    }

    /**
     * Setter method for ratetypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ratetypeid
     */
    public void setRatetypeid(Integer newVal) {
        if ((newVal != null && this.ratetypeid != null && (newVal.compareTo(this.ratetypeid) == 0)) || 
            (newVal == null && this.ratetypeid == null && ratetypeid_is_initialized)) {
            return; 
        } 
        this.ratetypeid = newVal; 
        ratetypeid_is_modified = true; 
        ratetypeid_is_initialized = true; 
    }

    /**
     * Setter method for ratetypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ratetypeid
     */
    public void setRatetypeid(int newVal) {
        setRatetypeid(new Integer(newVal));
    }

    /**
     * Determines if the ratetypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRatetypeidModified() {
        return ratetypeid_is_modified; 
    }

    /**
     * Determines if the ratetypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRatetypeidInitialized() {
        return ratetypeid_is_initialized; 
    }

    /**
     * Getter method for guestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationroom.guestid
     * <li> foreign key: guest.guestid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of guestid
     */
    public Long getGuestid()
    {
        return guestid; 
    }

    /**
     * Setter method for guestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to guestid
     */
    public void setGuestid(Long newVal) {
        if ((newVal != null && this.guestid != null && (newVal.compareTo(this.guestid) == 0)) || 
            (newVal == null && this.guestid == null && guestid_is_initialized)) {
            return; 
        } 
        this.guestid = newVal; 
        guestid_is_modified = true; 
        guestid_is_initialized = true; 
    }

    /**
     * Setter method for guestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to guestid
     */
    public void setGuestid(long newVal) {
        setGuestid(new Long(newVal));
    }

    /**
     * Determines if the guestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGuestidModified() {
        return guestid_is_modified; 
    }

    /**
     * Determines if the guestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGuestidInitialized() {
        return guestid_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationroom.regbyid
     * <li> foreign key: personnel.personnelid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationroom.regdate
     * <li>default value: now()
     * <li>column size: 29
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for roomtypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: reservationroom.roomtypeid
     * <li> foreign key: roomtype.roomtypeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of roomtypeid
     */
    public Integer getRoomtypeid()
    {
        return roomtypeid; 
    }

    /**
     * Setter method for roomtypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomtypeid
     */
    public void setRoomtypeid(Integer newVal) {
        if ((newVal != null && this.roomtypeid != null && (newVal.compareTo(this.roomtypeid) == 0)) || 
            (newVal == null && this.roomtypeid == null && roomtypeid_is_initialized)) {
            return; 
        } 
        this.roomtypeid = newVal; 
        roomtypeid_is_modified = true; 
        roomtypeid_is_initialized = true; 
    }

    /**
     * Setter method for roomtypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to roomtypeid
     */
    public void setRoomtypeid(int newVal) {
        setRoomtypeid(new Integer(newVal));
    }

    /**
     * Determines if the roomtypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomtypeidModified() {
        return roomtypeid_is_modified; 
    }

    /**
     * Determines if the roomtypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomtypeidInitialized() {
        return roomtypeid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return reservationroomid_is_modified || 
		reservationid_is_modified || 
		roomid_is_modified || 
		leader_is_modified || 
		adult_is_modified || 
		child_is_modified || 
		ratetypeid_is_modified || 
		guestid_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		roomtypeid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        reservationroomid_is_modified = false;
        reservationid_is_modified = false;
        roomid_is_modified = false;
        leader_is_modified = false;
        adult_is_modified = false;
        child_is_modified = false;
        ratetypeid_is_modified = false;
        guestid_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        roomtypeid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ReservationroomBean bean) {
        setReservationroomid(bean.getReservationroomid());
        setReservationid(bean.getReservationid());
        setRoomid(bean.getRoomid());
        setLeader(bean.getLeader());
        setAdult(bean.getAdult());
        setChild(bean.getChild());
        setRatetypeid(bean.getRatetypeid());
        setGuestid(bean.getGuestid());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setRoomtypeid(bean.getRoomtypeid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[reservationroom] "
                 + "\n - reservationroom.reservationroomid = " + (reservationroomid_is_initialized ? ("[" + (reservationroomid == null ? null : reservationroomid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationroom.reservationid = " + (reservationid_is_initialized ? ("[" + (reservationid == null ? null : reservationid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationroom.roomid = " + (roomid_is_initialized ? ("[" + (roomid == null ? null : roomid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationroom.leader = " + (leader_is_initialized ? ("[" + (leader == null ? null : leader.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationroom.adult = " + (adult_is_initialized ? ("[" + (adult == null ? null : adult.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationroom.child = " + (child_is_initialized ? ("[" + (child == null ? null : child.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationroom.ratetypeid = " + (ratetypeid_is_initialized ? ("[" + (ratetypeid == null ? null : ratetypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationroom.guestid = " + (guestid_is_initialized ? ("[" + (guestid == null ? null : guestid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationroom.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationroom.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - reservationroom.roomtypeid = " + (roomtypeid_is_initialized ? ("[" + (roomtypeid == null ? null : roomtypeid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
