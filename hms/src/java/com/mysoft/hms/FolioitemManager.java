// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the folioitem table.
 */
public class FolioitemManager
// extends+ 

// extends- 
{

    /**
     * Column folioitemid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_FOLIOITEMID = 0;
    public static final int TYPE_FOLIOITEMID = Types.BIGINT;
    public static final String NAME_FOLIOITEMID = "folioitemid";

    /**
     * Column folioid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_FOLIOID = 1;
    public static final int TYPE_FOLIOID = Types.BIGINT;
    public static final String NAME_FOLIOID = "folioid";

    /**
     * Column roomid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ROOMID = 2;
    public static final int TYPE_ROOMID = Types.INTEGER;
    public static final String NAME_ROOMID = "roomid";

    /**
     * Column itemdate of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_ITEMDATE = 3;
    public static final int TYPE_ITEMDATE = Types.DATE;
    public static final String NAME_ITEMDATE = "itemdate";

    /**
     * Column refno of type Types.VARCHAR mapped to String.
     */
    public static final int ID_REFNO = 4;
    public static final int TYPE_REFNO = Types.VARCHAR;
    public static final String NAME_REFNO = "refno";

    /**
     * Column particular of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_PARTICULAR = 5;
    public static final int TYPE_PARTICULAR = Types.INTEGER;
    public static final String NAME_PARTICULAR = "particular";

    /**
     * Column amount of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_AMOUNT = 6;
    public static final int TYPE_AMOUNT = Types.DOUBLE;
    public static final String NAME_AMOUNT = "amount";

    /**
     * Column extrachargeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_EXTRACHARGEID = 7;
    public static final int TYPE_EXTRACHARGEID = Types.INTEGER;
    public static final String NAME_EXTRACHARGEID = "extrachargeid";

    /**
     * Column ordermainid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_ORDERMAINID = 8;
    public static final int TYPE_ORDERMAINID = Types.BIGINT;
    public static final String NAME_ORDERMAINID = "ordermainid";

    /**
     * Column discountid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_DISCOUNTID = 9;
    public static final int TYPE_DISCOUNTID = Types.INTEGER;
    public static final String NAME_DISCOUNTID = "discountid";

    /**
     * Column taxid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TAXID = 10;
    public static final int TYPE_TAXID = Types.INTEGER;
    public static final String NAME_TAXID = "taxid";

    /**
     * Column paymentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PAYMENTID = 11;
    public static final int TYPE_PAYMENTID = Types.BIGINT;
    public static final String NAME_PAYMENTID = "paymentid";

    /**
     * Column zvoid of type Types.BIT mapped to Boolean.
     */
    public static final int ID_ZVOID = 12;
    public static final int TYPE_ZVOID = Types.BIT;
    public static final String NAME_ZVOID = "zvoid";

    /**
     * Column done of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DONE = 13;
    public static final int TYPE_DONE = Types.BIT;
    public static final String NAME_DONE = "done";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 14;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 15;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column note of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NOTE = 16;
    public static final int TYPE_NOTE = Types.VARCHAR;
    public static final String NAME_NOTE = "note";


    private static final String TABLE_NAME = "folioitem";

    /**
     * Create an array of type string containing all the fields of the folioitem table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "folioitem.folioitemid"
        ,"folioitem.folioid"
        ,"folioitem.roomid"
        ,"folioitem.itemdate"
        ,"folioitem.refno"
        ,"folioitem.particular"
        ,"folioitem.amount"
        ,"folioitem.extrachargeid"
        ,"folioitem.ordermainid"
        ,"folioitem.discountid"
        ,"folioitem.taxid"
        ,"folioitem.paymentid"
        ,"folioitem.zvoid"
        ,"folioitem.done"
        ,"folioitem.regbyid"
        ,"folioitem.regdate"
        ,"folioitem.note"
    };

    /**
     * Field that contains the comma separated fields of the folioitem table.
     */
    private static final String ALL_FIELDS = "folioitem.folioitemid"
                            + ",folioitem.folioid"
                            + ",folioitem.roomid"
                            + ",folioitem.itemdate"
                            + ",folioitem.refno"
                            + ",folioitem.particular"
                            + ",folioitem.amount"
                            + ",folioitem.extrachargeid"
                            + ",folioitem.ordermainid"
                            + ",folioitem.discountid"
                            + ",folioitem.taxid"
                            + ",folioitem.paymentid"
                            + ",folioitem.zvoid"
                            + ",folioitem.done"
                            + ",folioitem.regbyid"
                            + ",folioitem.regdate"
                            + ",folioitem.note";

    private static FolioitemManager singleton = new FolioitemManager();

    /**
     * Get the FolioitemManager singleton.
     *
     * @return FolioitemManager 
     */
    synchronized public static FolioitemManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own FolioitemManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(FolioitemManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new FolioitemBean instance.
     *
     * @return the new FolioitemBean 
     */
    public FolioitemBean createFolioitemBean()
    {
        return new FolioitemBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a FolioitemBean from the folioitem using its key fields.
     *
     * @return a unique FolioitemBean 
     */
    //12
    public FolioitemBean loadByPrimaryKey(Long folioitemid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM folioitem WHERE folioitem.folioitemid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, folioitemid);
            FolioitemBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long folioitemid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from folioitem WHERE folioitem.folioitemid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, folioitemid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads FolioitemBean array from the folioitem table using its discountid field.
     *
     * @return an array of FolioitemBean 
     */
    // LOAD BY IMPORTED KEY
    public FolioitemBean[] loadByDiscountid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM folioitem WHERE discountid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the folioitem table by discountid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByDiscountid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM folioitem WHERE discountid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads FolioitemBean array from the folioitem table using its extrachargeid field.
     *
     * @return an array of FolioitemBean 
     */
    // LOAD BY IMPORTED KEY
    public FolioitemBean[] loadByExtrachargeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM folioitem WHERE extrachargeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the folioitem table by extrachargeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByExtrachargeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM folioitem WHERE extrachargeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads FolioitemBean array from the folioitem table using its folioid field.
     *
     * @return an array of FolioitemBean 
     */
    // LOAD BY IMPORTED KEY
    public FolioitemBean[] loadByFolioid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM folioitem WHERE folioid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the folioitem table by folioid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByFolioid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM folioitem WHERE folioid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads FolioitemBean array from the folioitem table using its regbyid field.
     *
     * @return an array of FolioitemBean 
     */
    // LOAD BY IMPORTED KEY
    public FolioitemBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM folioitem WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the folioitem table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM folioitem WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads FolioitemBean array from the folioitem table using its roomid field.
     *
     * @return an array of FolioitemBean 
     */
    // LOAD BY IMPORTED KEY
    public FolioitemBean[] loadByRoomid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM folioitem WHERE roomid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the folioitem table by roomid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRoomid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM folioitem WHERE roomid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads FolioitemBean array from the folioitem table using its taxid field.
     *
     * @return an array of FolioitemBean 
     */
    // LOAD BY IMPORTED KEY
    public FolioitemBean[] loadByTaxid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM folioitem WHERE taxid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the folioitem table by taxid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByTaxid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM folioitem WHERE taxid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the DiscountBean object from the folioitem.discountid field.
     *
     * @param pObject the FolioitemBean 
     * @return the associated DiscountBean pObject
     */
    // GET IMPORTED
    public DiscountBean getDiscountBean(FolioitemBean pObject) throws SQLException
    {
        DiscountBean other = DiscountManager.getInstance().createDiscountBean();
        other.setDiscountid(pObject.getDiscountid());
        return DiscountManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the FolioitemBean object to the DiscountBean object.
     *
     * @param pObject the FolioitemBean object to use
     * @param pObjectToBeSet the DiscountBean object to associate to the FolioitemBean 
     * @return the associated DiscountBean pObject
     */
    // SET IMPORTED
    public FolioitemBean setDiscountBean(FolioitemBean pObject,DiscountBean pObjectToBeSet)
    {
        pObject.setDiscountid(pObjectToBeSet.getDiscountid());
        return pObject;
    }

    /**
     * Retrieves the ExtrachargeBean object from the folioitem.extrachargeid field.
     *
     * @param pObject the FolioitemBean 
     * @return the associated ExtrachargeBean pObject
     */
    // GET IMPORTED
    public ExtrachargeBean getExtrachargeBean(FolioitemBean pObject) throws SQLException
    {
        ExtrachargeBean other = ExtrachargeManager.getInstance().createExtrachargeBean();
        other.setExtrachargeid(pObject.getExtrachargeid());
        return ExtrachargeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the FolioitemBean object to the ExtrachargeBean object.
     *
     * @param pObject the FolioitemBean object to use
     * @param pObjectToBeSet the ExtrachargeBean object to associate to the FolioitemBean 
     * @return the associated ExtrachargeBean pObject
     */
    // SET IMPORTED
    public FolioitemBean setExtrachargeBean(FolioitemBean pObject,ExtrachargeBean pObjectToBeSet)
    {
        pObject.setExtrachargeid(pObjectToBeSet.getExtrachargeid());
        return pObject;
    }

    /**
     * Retrieves the FolioBean object from the folioitem.folioid field.
     *
     * @param pObject the FolioitemBean 
     * @return the associated FolioBean pObject
     */
    // GET IMPORTED
    public FolioBean getFolioBean(FolioitemBean pObject) throws SQLException
    {
        FolioBean other = FolioManager.getInstance().createFolioBean();
        other.setFolioid(pObject.getFolioid());
        return FolioManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the FolioitemBean object to the FolioBean object.
     *
     * @param pObject the FolioitemBean object to use
     * @param pObjectToBeSet the FolioBean object to associate to the FolioitemBean 
     * @return the associated FolioBean pObject
     */
    // SET IMPORTED
    public FolioitemBean setFolioBean(FolioitemBean pObject,FolioBean pObjectToBeSet)
    {
        pObject.setFolioid(pObjectToBeSet.getFolioid());
        return pObject;
    }

    /**
     * Retrieves the PersonnelBean object from the folioitem.personnelid field.
     *
     * @param pObject the FolioitemBean 
     * @return the associated PersonnelBean pObject
     */
    // GET IMPORTED
    public PersonnelBean getPersonnelBean(FolioitemBean pObject) throws SQLException
    {
        PersonnelBean other = PersonnelManager.getInstance().createPersonnelBean();
        other.setPersonnelid(pObject.getRegbyid());
        return PersonnelManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the FolioitemBean object to the PersonnelBean object.
     *
     * @param pObject the FolioitemBean object to use
     * @param pObjectToBeSet the PersonnelBean object to associate to the FolioitemBean 
     * @return the associated PersonnelBean pObject
     */
    // SET IMPORTED
    public FolioitemBean setPersonnelBean(FolioitemBean pObject,PersonnelBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonnelid());
        return pObject;
    }

    /**
     * Retrieves the RoomBean object from the folioitem.roomid field.
     *
     * @param pObject the FolioitemBean 
     * @return the associated RoomBean pObject
     */
    // GET IMPORTED
    public RoomBean getRoomBean(FolioitemBean pObject) throws SQLException
    {
        RoomBean other = RoomManager.getInstance().createRoomBean();
        other.setRoomid(pObject.getRoomid());
        return RoomManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the FolioitemBean object to the RoomBean object.
     *
     * @param pObject the FolioitemBean object to use
     * @param pObjectToBeSet the RoomBean object to associate to the FolioitemBean 
     * @return the associated RoomBean pObject
     */
    // SET IMPORTED
    public FolioitemBean setRoomBean(FolioitemBean pObject,RoomBean pObjectToBeSet)
    {
        pObject.setRoomid(pObjectToBeSet.getRoomid());
        return pObject;
    }

    /**
     * Retrieves the TaxBean object from the folioitem.taxid field.
     *
     * @param pObject the FolioitemBean 
     * @return the associated TaxBean pObject
     */
    // GET IMPORTED
    public TaxBean getTaxBean(FolioitemBean pObject) throws SQLException
    {
        TaxBean other = TaxManager.getInstance().createTaxBean();
        other.setTaxid(pObject.getTaxid());
        return TaxManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the FolioitemBean object to the TaxBean object.
     *
     * @param pObject the FolioitemBean object to use
     * @param pObjectToBeSet the TaxBean object to associate to the FolioitemBean 
     * @return the associated TaxBean pObject
     */
    // SET IMPORTED
    public FolioitemBean setTaxBean(FolioitemBean pObject,TaxBean pObjectToBeSet)
    {
        pObject.setTaxid(pObjectToBeSet.getTaxid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from folioitem.
     *
     * @return an array of FolioitemManager pObject
     */
    //38
    public FolioitemBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM folioitem",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of FolioitemBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting FolioitemBean table 
     */
    //49
    public FolioitemBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of FolioitemBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting FolioitemBean table 
     */
    //51
    public FolioitemBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from folioitem " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from folioitem ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (FolioitemBean[])v.toArray(new FolioitemBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from folioitem table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the folioitem table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM folioitem " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the FolioitemBean pObject into the database.
     *
     * @param pObject the FolioitemBean pObject to be saved
     */
    //100
    public FolioitemBean save(FolioitemBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isFolioitemidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('folioitemid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setFolioitemid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into folioitem (");
    
                if (pObject.isFolioitemidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("folioitemid");
                    _dirtyCount++;
                }

                if (pObject.isFolioidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("folioid");
                    _dirtyCount++;
                }

                if (pObject.isRoomidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roomid");
                    _dirtyCount++;
                }

                if (pObject.isItemdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("itemdate");
                    _dirtyCount++;
                }

                if (pObject.isRefnoModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("refno");
                    _dirtyCount++;
                }

                if (pObject.isParticularModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("particular");
                    _dirtyCount++;
                }

                if (pObject.isAmountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("amount");
                    _dirtyCount++;
                }

                if (pObject.isExtrachargeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("extrachargeid");
                    _dirtyCount++;
                }

                if (pObject.isOrdermainidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ordermainid");
                    _dirtyCount++;
                }

                if (pObject.isDiscountidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("discountid");
                    _dirtyCount++;
                }

                if (pObject.isTaxidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("taxid");
                    _dirtyCount++;
                }

                if (pObject.isPaymentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("paymentid");
                    _dirtyCount++;
                }

                if (pObject.isZvoidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("zvoid");
                    _dirtyCount++;
                }

                if (pObject.isDoneModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("done");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isNoteModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("note");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isFolioitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getFolioitemid());
                }
    
                if (pObject.isFolioidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getFolioid());
                }
    
                if (pObject.isRoomidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
                }
    
                if (pObject.isItemdateModified()) {
                    if (pObject.getItemdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getItemdate().getTime()));
                }
    
                if (pObject.isRefnoModified()) {
                    ps.setString(++_dirtyCount, pObject.getRefno());
                }
    
                if (pObject.isParticularModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getParticular());
                }
    
                if (pObject.isAmountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }
    
                if (pObject.isExtrachargeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getExtrachargeid());
                }
    
                if (pObject.isOrdermainidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getOrdermainid());
                }
    
                if (pObject.isDiscountidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountid());
                }
    
                if (pObject.isTaxidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTaxid());
                }
    
                if (pObject.isPaymentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPaymentid());
                }
    
                if (pObject.isZvoidModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getZvoid());
                }
    
                if (pObject.isDoneModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDone());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE folioitem SET ");
                boolean useComma=false;

                if (pObject.isFolioitemidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("folioitemid").append("=?");
                }

                if (pObject.isFolioidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("folioid").append("=?");
                }

                if (pObject.isRoomidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roomid").append("=?");
                }

                if (pObject.isItemdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("itemdate").append("=?");
                }

                if (pObject.isRefnoModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("refno").append("=?");
                }

                if (pObject.isParticularModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("particular").append("=?");
                }

                if (pObject.isAmountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("amount").append("=?");
                }

                if (pObject.isExtrachargeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("extrachargeid").append("=?");
                }

                if (pObject.isOrdermainidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ordermainid").append("=?");
                }

                if (pObject.isDiscountidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("discountid").append("=?");
                }

                if (pObject.isTaxidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("taxid").append("=?");
                }

                if (pObject.isPaymentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("paymentid").append("=?");
                }

                if (pObject.isZvoidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("zvoid").append("=?");
                }

                if (pObject.isDoneModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("done").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isNoteModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("note").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("folioitem.folioitemid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isFolioitemidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getFolioitemid());
                }

                if (pObject.isFolioidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getFolioid());
                }

                if (pObject.isRoomidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
                }

                if (pObject.isItemdateModified()) {
                      if (pObject.getItemdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getItemdate().getTime()));
                }

                if (pObject.isRefnoModified()) {
                      ps.setString(++_dirtyCount, pObject.getRefno());
                }

                if (pObject.isParticularModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getParticular());
                }

                if (pObject.isAmountModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }

                if (pObject.isExtrachargeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getExtrachargeid());
                }

                if (pObject.isOrdermainidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getOrdermainid());
                }

                if (pObject.isDiscountidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountid());
                }

                if (pObject.isTaxidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getTaxid());
                }

                if (pObject.isPaymentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getPaymentid());
                }

                if (pObject.isZvoidModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getZvoid());
                }

                if (pObject.isDoneModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDone());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isNoteModified()) {
                      ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getFolioitemid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of FolioitemBean pObjects into the database.
     *
     * @param pObjects the FolioitemBean pObject table to be saved
     * @return the saved FolioitemBean array.
     */
    //65
    public FolioitemBean[] save(FolioitemBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique FolioitemBean pObject from a template one giving a c
     *
     * @param pObject the FolioitemBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public FolioitemBean loadUniqueUsingTemplate(FolioitemBean pObject) throws SQLException
    {
         FolioitemBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of FolioitemBean from a template one.
     *
     * @param pObject the FolioitemBean template to look for
     * @return all the FolioitemBean matching the template
     */
    //88
    public FolioitemBean[] loadUsingTemplate(FolioitemBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from folioitem WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isFolioitemidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("folioitemid= ?");
             }
    
             if (pObject.isFolioidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("folioid= ?");
             }
    
             if (pObject.isRoomidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomid= ?");
             }
    
             if (pObject.isItemdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("itemdate= ?");
             }
    
             if (pObject.isRefnoModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("refno= ?");
             }
    
             if (pObject.isParticularModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("particular= ?");
             }
    
             if (pObject.isAmountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amount= ?");
             }
    
             if (pObject.isExtrachargeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("extrachargeid= ?");
             }
    
             if (pObject.isOrdermainidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ordermainid= ?");
             }
    
             if (pObject.isDiscountidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("discountid= ?");
             }
    
             if (pObject.isTaxidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("taxid= ?");
             }
    
             if (pObject.isPaymentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentid= ?");
             }
    
             if (pObject.isZvoidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("zvoid= ?");
             }
    
             if (pObject.isDoneModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("done= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isNoteModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("note= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isFolioitemidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getFolioitemid());
             }
    
             if (pObject.isFolioidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getFolioid());
             }
    
             if (pObject.isRoomidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
             }
    
             if (pObject.isItemdateModified()) {
                 if (pObject.getItemdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getItemdate().getTime()));
             }
    
             if (pObject.isRefnoModified()) {
                 ps.setString(++_dirtyCount, pObject.getRefno());
             }
    
             if (pObject.isParticularModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getParticular());
             }
    
             if (pObject.isAmountModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
             }
    
             if (pObject.isExtrachargeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getExtrachargeid());
             }
    
             if (pObject.isOrdermainidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getOrdermainid());
             }
    
             if (pObject.isDiscountidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountid());
             }
    
             if (pObject.isTaxidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getTaxid());
             }
    
             if (pObject.isPaymentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getPaymentid());
             }
    
             if (pObject.isZvoidModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getZvoid());
             }
    
             if (pObject.isDoneModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDone());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isNoteModified()) {
                 ps.setString(++_dirtyCount, pObject.getNote());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a FolioitemBean template.
     *
     * @param pObject the FolioitemBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(FolioitemBean pObject) throws SQLException
    {
        if (pObject.isFolioitemidInitialized())
            return deleteByPrimaryKey(pObject.getFolioitemid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM folioitem WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isFolioitemidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("folioitemid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFolioidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("folioid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRoomidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roomid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isItemdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("itemdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRefnoInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("refno").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isParticularInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("particular").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAmountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("amount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isExtrachargeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("extrachargeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isOrdermainidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ordermainid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDiscountidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("discountid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTaxidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("taxid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPaymentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("paymentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isZvoidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("zvoid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDoneInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("done").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNoteInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("note").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isFolioitemidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getFolioitemid());
            }
    
            if (pObject.isFolioidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getFolioid());
            }
    
            if (pObject.isRoomidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
            }
    
            if (pObject.isItemdateInitialized()) {
                if (pObject.getItemdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getItemdate().getTime()));
            }
    
            if (pObject.isRefnoInitialized()) {
                ps.setString(++_dirtyCount, pObject.getRefno());
            }
    
            if (pObject.isParticularInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getParticular());
            }
    
            if (pObject.isAmountInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
            }
    
            if (pObject.isExtrachargeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getExtrachargeid());
            }
    
            if (pObject.isOrdermainidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getOrdermainid());
            }
    
            if (pObject.isDiscountidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountid());
            }
    
            if (pObject.isTaxidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTaxid());
            }
    
            if (pObject.isPaymentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getPaymentid());
            }
    
            if (pObject.isZvoidInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getZvoid());
            }
    
            if (pObject.isDoneInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDone());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isNoteInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNote());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table folioitem.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table folioitem with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from folioitem " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table folioitem with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific FolioitemBean pObject given a c
     *
     * @param pObject the FolioitemBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(FolioitemBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from folioitem WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isFolioitemidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("folioitemid= ?");
                }
    
                if (pObject.isFolioidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("folioid= ?");
                }
    
                if (pObject.isRoomidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomid= ?");
                }
    
                if (pObject.isItemdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("itemdate= ?");
                }
    
                if (pObject.isRefnoModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("refno= ?");
                }
    
                if (pObject.isParticularModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("particular= ?");
                }
    
                if (pObject.isAmountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amount= ?");
                }
    
                if (pObject.isExtrachargeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("extrachargeid= ?");
                }
    
                if (pObject.isOrdermainidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ordermainid= ?");
                }
    
                if (pObject.isDiscountidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("discountid= ?");
                }
    
                if (pObject.isTaxidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("taxid= ?");
                }
    
                if (pObject.isPaymentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentid= ?");
                }
    
                if (pObject.isZvoidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("zvoid= ?");
                }
    
                if (pObject.isDoneModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("done= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isNoteModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("note= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isFolioitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getFolioitemid());
                }
    
                if (pObject.isFolioidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getFolioid());
                }
    
                if (pObject.isRoomidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
                }
    
                if (pObject.isItemdateModified()) {
                    if (pObject.getItemdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getItemdate().getTime()));
                }
    
                if (pObject.isRefnoModified()) {
                    ps.setString(++_dirtyCount, pObject.getRefno());
                }
    
                if (pObject.isParticularModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getParticular());
                }
    
                if (pObject.isAmountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }
    
                if (pObject.isExtrachargeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getExtrachargeid());
                }
    
                if (pObject.isOrdermainidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getOrdermainid());
                }
    
                if (pObject.isDiscountidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountid());
                }
    
                if (pObject.isTaxidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTaxid());
                }
    
                if (pObject.isPaymentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPaymentid());
                }
    
                if (pObject.isZvoidModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getZvoid());
                }
    
                if (pObject.isDoneModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDone());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the folioitem on a FolioitemBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting FolioitemBean pObject
     */
    //72
    public FolioitemBean decodeRow(ResultSet rs) throws SQLException
    {
        FolioitemBean pObject = createFolioitemBean();
        pObject.setFolioitemid(Manager.getLong(rs, 1));
        pObject.setFolioid(Manager.getLong(rs, 2));
        pObject.setRoomid(Manager.getInteger(rs, 3));
        pObject.setItemdate(rs.getDate(4));
        pObject.setRefno(rs.getString(5));
        pObject.setParticular(Manager.getInteger(rs, 6));
        pObject.setAmount(Manager.getDouble(rs, 7));
        pObject.setExtrachargeid(Manager.getInteger(rs, 8));
        pObject.setOrdermainid(Manager.getLong(rs, 9));
        pObject.setDiscountid(Manager.getInteger(rs, 10));
        pObject.setTaxid(Manager.getInteger(rs, 11));
        pObject.setPaymentid(Manager.getLong(rs, 12));
        pObject.setZvoid(Manager.getBoolean(rs, 13));
        pObject.setDone(Manager.getBoolean(rs, 14));
        pObject.setRegbyid(Manager.getInteger(rs, 15));
        pObject.setRegdate(rs.getTimestamp(16));
        pObject.setNote(rs.getString(17));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the folioitem table on a FolioitemBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting FolioitemBean pObject
     */
    //73
    public FolioitemBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        FolioitemBean pObject = createFolioitemBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_FOLIOITEMID:
                    ++pos;
                    pObject.setFolioitemid(Manager.getLong(rs, pos));
                    break;
                case ID_FOLIOID:
                    ++pos;
                    pObject.setFolioid(Manager.getLong(rs, pos));
                    break;
                case ID_ROOMID:
                    ++pos;
                    pObject.setRoomid(Manager.getInteger(rs, pos));
                    break;
                case ID_ITEMDATE:
                    ++pos;
                    pObject.setItemdate(rs.getDate(pos));
                    break;
                case ID_REFNO:
                    ++pos;
                    pObject.setRefno(rs.getString(pos));
                    break;
                case ID_PARTICULAR:
                    ++pos;
                    pObject.setParticular(Manager.getInteger(rs, pos));
                    break;
                case ID_AMOUNT:
                    ++pos;
                    pObject.setAmount(Manager.getDouble(rs, pos));
                    break;
                case ID_EXTRACHARGEID:
                    ++pos;
                    pObject.setExtrachargeid(Manager.getInteger(rs, pos));
                    break;
                case ID_ORDERMAINID:
                    ++pos;
                    pObject.setOrdermainid(Manager.getLong(rs, pos));
                    break;
                case ID_DISCOUNTID:
                    ++pos;
                    pObject.setDiscountid(Manager.getInteger(rs, pos));
                    break;
                case ID_TAXID:
                    ++pos;
                    pObject.setTaxid(Manager.getInteger(rs, pos));
                    break;
                case ID_PAYMENTID:
                    ++pos;
                    pObject.setPaymentid(Manager.getLong(rs, pos));
                    break;
                case ID_ZVOID:
                    ++pos;
                    pObject.setZvoid(Manager.getBoolean(rs, pos));
                    break;
                case ID_DONE:
                    ++pos;
                    pObject.setDone(Manager.getBoolean(rs, pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_NOTE:
                    ++pos;
                    pObject.setNote(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FolioitemBean 
     */
    //41
    public FolioitemBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FolioitemBean 
     */
    public FolioitemBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (FolioitemBean[])v.toArray(new FolioitemBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private FolioitemListener listener = null;

    /**
     * Registers a unique FolioitemListener listener.
     */
    //66.5
    public void registerListener(FolioitemListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the FolioitemBean pObject.
     *
     * @param pObject the FolioitemBean pObject to be saved
     */
    //67
    void beforeInsert(FolioitemBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the FolioitemBean pObject.
     *
     * @param pObject the FolioitemBean pObject to be saved
     */
    //68
    void afterInsert(FolioitemBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the FolioitemBean pObject.
     *
     * @param pObject the FolioitemBean pObject to be updated
     */
    //69
    void beforeUpdate(FolioitemBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the FolioitemBean pObject.
     *
     * @param pObject the FolioitemBean pObject to be updated
     */
    //70
    void afterUpdate(FolioitemBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
