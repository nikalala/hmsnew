// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.util.Comparator;
// imports+ 

// imports- 


/**
 * Comparator class is used to sort the ConfmailBean objects.
 */
public class ConfmailComparator implements Comparator
// extends+ 

// extends- 

{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ConfmailComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ConfmailComparator(ConfmailManager.CONFMAILID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ConfmailManager.ID_CONFMAILID
     *   <li>ConfmailManager.ID_SMTP
     *   <li>ConfmailManager.ID_PORT
     *   <li>ConfmailManager.ID_USERNAME
     *   <li>ConfmailManager.ID_PASS
     *   <li>ConfmailManager.ID_FROMMAIL
     * </ul>
     */
    public ConfmailComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ConfmailComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ConfmailComparator(ConfmailManager.CONFMAILID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ConfmailManager.ID_CONFMAILID
     *   <li>ConfmailManager.ID_SMTP
     *   <li>ConfmailManager.ID_PORT
     *   <li>ConfmailManager.ID_USERNAME
     *   <li>ConfmailManager.ID_PASS
     *   <li>ConfmailManager.ID_FROMMAIL
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ConfmailComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ConfmailBean b1 = (ConfmailBean)pObj1;
        ConfmailBean b2 = (ConfmailBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ConfmailManager.ID_CONFMAILID:
                if (b1.getConfmailid() == null && b2.getConfmailid() != null) {
                    iReturn = -1;
                } else if (b1.getConfmailid() == null && b2.getConfmailid() == null) {
                    iReturn = 0;
                } else if (b1.getConfmailid() != null && b2.getConfmailid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getConfmailid().compareTo(b2.getConfmailid());
                }
                break;
            case ConfmailManager.ID_SMTP:
                if (b1.getSmtp() == null && b2.getSmtp() != null) {
                    iReturn = -1;
                } else if (b1.getSmtp() == null && b2.getSmtp() == null) {
                    iReturn = 0;
                } else if (b1.getSmtp() != null && b2.getSmtp() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getSmtp().compareTo(b2.getSmtp());
                }
                break;
            case ConfmailManager.ID_PORT:
                if (b1.getPort() == null && b2.getPort() != null) {
                    iReturn = -1;
                } else if (b1.getPort() == null && b2.getPort() == null) {
                    iReturn = 0;
                } else if (b1.getPort() != null && b2.getPort() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPort().compareTo(b2.getPort());
                }
                break;
            case ConfmailManager.ID_USERNAME:
                if (b1.getUsername() == null && b2.getUsername() != null) {
                    iReturn = -1;
                } else if (b1.getUsername() == null && b2.getUsername() == null) {
                    iReturn = 0;
                } else if (b1.getUsername() != null && b2.getUsername() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getUsername().compareTo(b2.getUsername());
                }
                break;
            case ConfmailManager.ID_PASS:
                if (b1.getPass() == null && b2.getPass() != null) {
                    iReturn = -1;
                } else if (b1.getPass() == null && b2.getPass() == null) {
                    iReturn = 0;
                } else if (b1.getPass() != null && b2.getPass() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPass().compareTo(b2.getPass());
                }
                break;
            case ConfmailManager.ID_FROMMAIL:
                if (b1.getFrommail() == null && b2.getFrommail() != null) {
                    iReturn = -1;
                } else if (b1.getFrommail() == null && b2.getFrommail() == null) {
                    iReturn = 0;
                } else if (b1.getFrommail() != null && b2.getFrommail() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getFrommail().compareTo(b2.getFrommail());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 

}
