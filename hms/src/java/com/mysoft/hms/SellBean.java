// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class SellBean
// extends+ 

// extends- 

{
    private Long sellid;
    private boolean sellid_is_modified = false;
    private boolean sellid_is_initialized = false;
    
    private Long customerid;
    private boolean customerid_is_modified = false;
    private boolean customerid_is_initialized = false;
    
    private Integer selltypeid;
    private boolean selltypeid_is_modified = false;
    private boolean selltypeid_is_initialized = false;
    
    private java.sql.Timestamp selldate;
    private boolean selldate_is_modified = false;
    private boolean selldate_is_initialized = false;
    
    private Integer sproductid;
    private boolean sproductid_is_modified = false;
    private boolean sproductid_is_initialized = false;
    
    private Double price;
    private boolean price_is_modified = false;
    private boolean price_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    SellBean()
    {
    }
    
    /**
     * Getter method for sellid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sell.sellid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of sellid
     */
    public Long getSellid()
    {
        return sellid; 
    }

    /**
     * Setter method for sellid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sellid
     */
    public void setSellid(Long newVal) {
        if ((newVal != null && this.sellid != null && (newVal.compareTo(this.sellid) == 0)) || 
            (newVal == null && this.sellid == null && sellid_is_initialized)) {
            return; 
        } 
        this.sellid = newVal; 
        sellid_is_modified = true; 
        sellid_is_initialized = true; 
    }

    /**
     * Setter method for sellid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sellid
     */
    public void setSellid(long newVal) {
        setSellid(new Long(newVal));
    }

    /**
     * Determines if the sellid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSellidModified() {
        return sellid_is_modified; 
    }

    /**
     * Determines if the sellid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSellidInitialized() {
        return sellid_is_initialized; 
    }

    /**
     * Getter method for customerid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sell.customerid
     * <li> foreign key: customer.customerid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of customerid
     */
    public Long getCustomerid()
    {
        return customerid; 
    }

    /**
     * Setter method for customerid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to customerid
     */
    public void setCustomerid(Long newVal) {
        if ((newVal != null && this.customerid != null && (newVal.compareTo(this.customerid) == 0)) || 
            (newVal == null && this.customerid == null && customerid_is_initialized)) {
            return; 
        } 
        this.customerid = newVal; 
        customerid_is_modified = true; 
        customerid_is_initialized = true; 
    }

    /**
     * Setter method for customerid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to customerid
     */
    public void setCustomerid(long newVal) {
        setCustomerid(new Long(newVal));
    }

    /**
     * Determines if the customerid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCustomeridModified() {
        return customerid_is_modified; 
    }

    /**
     * Determines if the customerid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCustomeridInitialized() {
        return customerid_is_initialized; 
    }

    /**
     * Getter method for selltypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sell.selltypeid
     * <li> foreign key: selltype.selltypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of selltypeid
     */
    public Integer getSelltypeid()
    {
        return selltypeid; 
    }

    /**
     * Setter method for selltypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to selltypeid
     */
    public void setSelltypeid(Integer newVal) {
        if ((newVal != null && this.selltypeid != null && (newVal.compareTo(this.selltypeid) == 0)) || 
            (newVal == null && this.selltypeid == null && selltypeid_is_initialized)) {
            return; 
        } 
        this.selltypeid = newVal; 
        selltypeid_is_modified = true; 
        selltypeid_is_initialized = true; 
    }

    /**
     * Setter method for selltypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to selltypeid
     */
    public void setSelltypeid(int newVal) {
        setSelltypeid(new Integer(newVal));
    }

    /**
     * Determines if the selltypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSelltypeidModified() {
        return selltypeid_is_modified; 
    }

    /**
     * Determines if the selltypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSelltypeidInitialized() {
        return selltypeid_is_initialized; 
    }

    /**
     * Getter method for selldate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sell.selldate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of selldate
     */
    public java.sql.Timestamp getSelldate()
    {
        return selldate; 
    }

    /**
     * Setter method for selldate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to selldate
     */
    public void setSelldate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.selldate != null && (newVal.compareTo(this.selldate) == 0)) || 
            (newVal == null && this.selldate == null && selldate_is_initialized)) {
            return; 
        } 
        this.selldate = newVal; 
        selldate_is_modified = true; 
        selldate_is_initialized = true; 
    }

    /**
     * Setter method for selldate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to selldate
     */
    public void setSelldate(long newVal) {
        setSelldate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the selldate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSelldateModified() {
        return selldate_is_modified; 
    }

    /**
     * Determines if the selldate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSelldateInitialized() {
        return selldate_is_initialized; 
    }

    /**
     * Getter method for sproductid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sell.sproductid
     * <li> foreign key: sproduct.sproductid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of sproductid
     */
    public Integer getSproductid()
    {
        return sproductid; 
    }

    /**
     * Setter method for sproductid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sproductid
     */
    public void setSproductid(Integer newVal) {
        if ((newVal != null && this.sproductid != null && (newVal.compareTo(this.sproductid) == 0)) || 
            (newVal == null && this.sproductid == null && sproductid_is_initialized)) {
            return; 
        } 
        this.sproductid = newVal; 
        sproductid_is_modified = true; 
        sproductid_is_initialized = true; 
    }

    /**
     * Setter method for sproductid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sproductid
     */
    public void setSproductid(int newVal) {
        setSproductid(new Integer(newVal));
    }

    /**
     * Determines if the sproductid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSproductidModified() {
        return sproductid_is_modified; 
    }

    /**
     * Determines if the sproductid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSproductidInitialized() {
        return sproductid_is_initialized; 
    }

    /**
     * Getter method for price.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sell.price
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of price
     */
    public Double getPrice()
    {
        return price; 
    }

    /**
     * Setter method for price.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(Double newVal) {
        if ((newVal != null && this.price != null && (newVal.compareTo(this.price) == 0)) || 
            (newVal == null && this.price == null && price_is_initialized)) {
            return; 
        } 
        this.price = newVal; 
        price_is_modified = true; 
        price_is_initialized = true; 
    }

    /**
     * Setter method for price.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(double newVal) {
        setPrice(new Double(newVal));
    }

    /**
     * Determines if the price has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPriceModified() {
        return price_is_modified; 
    }

    /**
     * Determines if the price has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPriceInitialized() {
        return price_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return sellid_is_modified || 
		customerid_is_modified || 
		selltypeid_is_modified || 
		selldate_is_modified || 
		sproductid_is_modified || 
		price_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        sellid_is_modified = false;
        customerid_is_modified = false;
        selltypeid_is_modified = false;
        selldate_is_modified = false;
        sproductid_is_modified = false;
        price_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SellBean bean) {
        setSellid(bean.getSellid());
        setCustomerid(bean.getCustomerid());
        setSelltypeid(bean.getSelltypeid());
        setSelldate(bean.getSelldate());
        setSproductid(bean.getSproductid());
        setPrice(bean.getPrice());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[sell] "
                 + "\n - sell.sellid = " + (sellid_is_initialized ? ("[" + (sellid == null ? null : sellid.toString()) + "]") : "not initialized") + ""
                 + "\n - sell.customerid = " + (customerid_is_initialized ? ("[" + (customerid == null ? null : customerid.toString()) + "]") : "not initialized") + ""
                 + "\n - sell.selltypeid = " + (selltypeid_is_initialized ? ("[" + (selltypeid == null ? null : selltypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - sell.selldate = " + (selldate_is_initialized ? ("[" + (selldate == null ? null : selldate.toString()) + "]") : "not initialized") + ""
                 + "\n - sell.sproductid = " + (sproductid_is_initialized ? ("[" + (sproductid == null ? null : sproductid.toString()) + "]") : "not initialized") + ""
                 + "\n - sell.price = " + (price_is_initialized ? ("[" + (price == null ? null : price.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
