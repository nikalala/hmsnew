// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the contragent table.
 */
public class ContragentManager
// extends+ 

// extends- 
{

    /**
     * Column contragentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRAGENTID = 0;
    public static final int TYPE_CONTRAGENTID = Types.BIGINT;
    public static final String NAME_CONTRAGENTID = "contragentid";

    /**
     * Column type of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TYPE = 1;
    public static final int TYPE_TYPE = Types.INTEGER;
    public static final String NAME_TYPE = "type";

    /**
     * Column salutationid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SALUTATIONID = 2;
    public static final int TYPE_SALUTATIONID = Types.INTEGER;
    public static final String NAME_SALUTATIONID = "salutationid";

    /**
     * Column fname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_FNAME = 3;
    public static final int TYPE_FNAME = Types.VARCHAR;
    public static final String NAME_FNAME = "fname";

    /**
     * Column lname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_LNAME = 4;
    public static final int TYPE_LNAME = Types.VARCHAR;
    public static final String NAME_LNAME = "lname";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 5;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column address of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ADDRESS = 6;
    public static final int TYPE_ADDRESS = Types.VARCHAR;
    public static final String NAME_ADDRESS = "address";

    /**
     * Column countryid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_COUNTRYID = 7;
    public static final int TYPE_COUNTRYID = Types.INTEGER;
    public static final String NAME_COUNTRYID = "countryid";

    /**
     * Column city of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CITY = 8;
    public static final int TYPE_CITY = Types.VARCHAR;
    public static final String NAME_CITY = "city";

    /**
     * Column zip of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ZIP = 9;
    public static final int TYPE_ZIP = Types.VARCHAR;
    public static final String NAME_ZIP = "zip";

    /**
     * Column phone of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PHONE = 10;
    public static final int TYPE_PHONE = Types.VARCHAR;
    public static final String NAME_PHONE = "phone";

    /**
     * Column fax of type Types.VARCHAR mapped to String.
     */
    public static final int ID_FAX = 11;
    public static final int TYPE_FAX = Types.VARCHAR;
    public static final String NAME_FAX = "fax";

    /**
     * Column mobile of type Types.VARCHAR mapped to String.
     */
    public static final int ID_MOBILE = 12;
    public static final int TYPE_MOBILE = Types.VARCHAR;
    public static final String NAME_MOBILE = "mobile";

    /**
     * Column email of type Types.VARCHAR mapped to String.
     */
    public static final int ID_EMAIL = 13;
    public static final int TYPE_EMAIL = Types.VARCHAR;
    public static final String NAME_EMAIL = "email";

    /**
     * Column commissionplan of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_COMMISSIONPLAN = 14;
    public static final int TYPE_COMMISSIONPLAN = Types.INTEGER;
    public static final String NAME_COMMISSIONPLAN = "commissionplan";

    /**
     * Column val of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_VAL = 15;
    public static final int TYPE_VAL = Types.DOUBLE;
    public static final String NAME_VAL = "val";

    /**
     * Column rate of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_RATE = 16;
    public static final int TYPE_RATE = Types.INTEGER;
    public static final String NAME_RATE = "rate";

    /**
     * Column openbalance of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_OPENBALANCE = 17;
    public static final int TYPE_OPENBALANCE = Types.DOUBLE;
    public static final String NAME_OPENBALANCE = "openbalance";

    /**
     * Column roominventory of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ROOMINVENTORY = 18;
    public static final int TYPE_ROOMINVENTORY = Types.INTEGER;
    public static final String NAME_ROOMINVENTORY = "roominventory";

    /**
     * Column createuser of type Types.BIT mapped to Boolean.
     */
    public static final int ID_CREATEUSER = 19;
    public static final int TYPE_CREATEUSER = Types.BIT;
    public static final String NAME_CREATEUSER = "createuser";

    /**
     * Column bsource of type Types.BIT mapped to Boolean.
     */
    public static final int ID_BSOURCE = 20;
    public static final int TYPE_BSOURCE = Types.BIT;
    public static final String NAME_BSOURCE = "bsource";

    /**
     * Column ccblock of type Types.BIT mapped to Boolean.
     */
    public static final int ID_CCBLOCK = 21;
    public static final int TYPE_CCBLOCK = Types.BIT;
    public static final String NAME_CCBLOCK = "ccblock";

    /**
     * Column idn of type Types.VARCHAR mapped to String.
     */
    public static final int ID_IDN = 22;
    public static final int TYPE_IDN = Types.VARCHAR;
    public static final String NAME_IDN = "idn";

    /**
     * Column creditterm of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_CREDITTERM = 23;
    public static final int TYPE_CREDITTERM = Types.INTEGER;
    public static final String NAME_CREDITTERM = "creditterm";

    /**
     * Column creditlimit of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_CREDITLIMIT = 24;
    public static final int TYPE_CREDITLIMIT = Types.DOUBLE;
    public static final String NAME_CREDITLIMIT = "creditlimit";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 25;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 26;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 27;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";


    private static final String TABLE_NAME = "contragent";

    /**
     * Create an array of type string containing all the fields of the contragent table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "contragent.contragentid"
        ,"contragent.type"
        ,"contragent.salutationid"
        ,"contragent.fname"
        ,"contragent.lname"
        ,"contragent.name"
        ,"contragent.address"
        ,"contragent.countryid"
        ,"contragent.city"
        ,"contragent.zip"
        ,"contragent.phone"
        ,"contragent.fax"
        ,"contragent.mobile"
        ,"contragent.email"
        ,"contragent.commissionplan"
        ,"contragent.val"
        ,"contragent.rate"
        ,"contragent.openbalance"
        ,"contragent.roominventory"
        ,"contragent.createuser"
        ,"contragent.bsource"
        ,"contragent.ccblock"
        ,"contragent.idn"
        ,"contragent.creditterm"
        ,"contragent.creditlimit"
        ,"contragent.regbyid"
        ,"contragent.regdate"
        ,"contragent.deleted"
    };

    /**
     * Field that contains the comma separated fields of the contragent table.
     */
    private static final String ALL_FIELDS = "contragent.contragentid"
                            + ",contragent.type"
                            + ",contragent.salutationid"
                            + ",contragent.fname"
                            + ",contragent.lname"
                            + ",contragent.name"
                            + ",contragent.address"
                            + ",contragent.countryid"
                            + ",contragent.city"
                            + ",contragent.zip"
                            + ",contragent.phone"
                            + ",contragent.fax"
                            + ",contragent.mobile"
                            + ",contragent.email"
                            + ",contragent.commissionplan"
                            + ",contragent.val"
                            + ",contragent.rate"
                            + ",contragent.openbalance"
                            + ",contragent.roominventory"
                            + ",contragent.createuser"
                            + ",contragent.bsource"
                            + ",contragent.ccblock"
                            + ",contragent.idn"
                            + ",contragent.creditterm"
                            + ",contragent.creditlimit"
                            + ",contragent.regbyid"
                            + ",contragent.regdate"
                            + ",contragent.deleted";

    private static ContragentManager singleton = new ContragentManager();

    /**
     * Get the ContragentManager singleton.
     *
     * @return ContragentManager 
     */
    synchronized public static ContragentManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own ContragentManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(ContragentManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new ContragentBean instance.
     *
     * @return the new ContragentBean 
     */
    public ContragentBean createContragentBean()
    {
        return new ContragentBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ContragentBean from the contragent using its key fields.
     *
     * @return a unique ContragentBean 
     */
    //12
    public ContragentBean loadByPrimaryKey(Long contragentid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contragent WHERE contragent.contragentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, contragentid);
            ContragentBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long contragentid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from contragent WHERE contragent.contragentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, contragentid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads ContragentBean array from the contragent table using its countryid field.
     *
     * @return an array of ContragentBean 
     */
    // LOAD BY IMPORTED KEY
    public ContragentBean[] loadByCountryid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contragent WHERE countryid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contragent table by countryid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByCountryid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contragent WHERE countryid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContragentBean array from the contragent table using its regbyid field.
     *
     * @return an array of ContragentBean 
     */
    // LOAD BY IMPORTED KEY
    public ContragentBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contragent WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contragent table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contragent WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContragentBean array from the contragent table using its salutationid field.
     *
     * @return an array of ContragentBean 
     */
    // LOAD BY IMPORTED KEY
    public ContragentBean[] loadBySalutationid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contragent WHERE salutationid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contragent table by salutationid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySalutationid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contragent WHERE salutationid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the CountryBean object from the contragent.countryid field.
     *
     * @param pObject the ContragentBean 
     * @return the associated CountryBean pObject
     */
    // GET IMPORTED
    public CountryBean getCountryBean(ContragentBean pObject) throws SQLException
    {
        CountryBean other = CountryManager.getInstance().createCountryBean();
        other.setCountryid(pObject.getCountryid());
        return CountryManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContragentBean object to the CountryBean object.
     *
     * @param pObject the ContragentBean object to use
     * @param pObjectToBeSet the CountryBean object to associate to the ContragentBean 
     * @return the associated CountryBean pObject
     */
    // SET IMPORTED
    public ContragentBean setCountryBean(ContragentBean pObject,CountryBean pObjectToBeSet)
    {
        pObject.setCountryid(pObjectToBeSet.getCountryid());
        return pObject;
    }

    /**
     * Retrieves the PersonnelBean object from the contragent.personnelid field.
     *
     * @param pObject the ContragentBean 
     * @return the associated PersonnelBean pObject
     */
    // GET IMPORTED
    public PersonnelBean getPersonnelBean(ContragentBean pObject) throws SQLException
    {
        PersonnelBean other = PersonnelManager.getInstance().createPersonnelBean();
        other.setPersonnelid(pObject.getRegbyid());
        return PersonnelManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContragentBean object to the PersonnelBean object.
     *
     * @param pObject the ContragentBean object to use
     * @param pObjectToBeSet the PersonnelBean object to associate to the ContragentBean 
     * @return the associated PersonnelBean pObject
     */
    // SET IMPORTED
    public ContragentBean setPersonnelBean(ContragentBean pObject,PersonnelBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonnelid());
        return pObject;
    }

    /**
     * Retrieves the SalutationBean object from the contragent.salutationid field.
     *
     * @param pObject the ContragentBean 
     * @return the associated SalutationBean pObject
     */
    // GET IMPORTED
    public SalutationBean getSalutationBean(ContragentBean pObject) throws SQLException
    {
        SalutationBean other = SalutationManager.getInstance().createSalutationBean();
        other.setSalutationid(pObject.getSalutationid());
        return SalutationManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContragentBean object to the SalutationBean object.
     *
     * @param pObject the ContragentBean object to use
     * @param pObjectToBeSet the SalutationBean object to associate to the ContragentBean 
     * @return the associated SalutationBean pObject
     */
    // SET IMPORTED
    public ContragentBean setSalutationBean(ContragentBean pObject,SalutationBean pObjectToBeSet)
    {
        pObject.setSalutationid(pObjectToBeSet.getSalutationid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from contragent.
     *
     * @return an array of ContragentManager pObject
     */
    //38
    public ContragentBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contragent",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ContragentBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ContragentBean table 
     */
    //49
    public ContragentBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ContragentBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting ContragentBean table 
     */
    //51
    public ContragentBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from contragent " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from contragent ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (ContragentBean[])v.toArray(new ContragentBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from contragent table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the contragent table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM contragent " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the ContragentBean pObject into the database.
     *
     * @param pObject the ContragentBean pObject to be saved
     */
    //100
    public ContragentBean save(ContragentBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isContragentidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('contragentid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setContragentid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into contragent (");
    
                if (pObject.isContragentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contragentid");
                    _dirtyCount++;
                }

                if (pObject.isTypeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("type");
                    _dirtyCount++;
                }

                if (pObject.isSalutationidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("salutationid");
                    _dirtyCount++;
                }

                if (pObject.isFnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fname");
                    _dirtyCount++;
                }

                if (pObject.isLnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("lname");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isAddressModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("address");
                    _dirtyCount++;
                }

                if (pObject.isCountryidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("countryid");
                    _dirtyCount++;
                }

                if (pObject.isCityModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("city");
                    _dirtyCount++;
                }

                if (pObject.isZipModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("zip");
                    _dirtyCount++;
                }

                if (pObject.isPhoneModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("phone");
                    _dirtyCount++;
                }

                if (pObject.isFaxModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fax");
                    _dirtyCount++;
                }

                if (pObject.isMobileModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("mobile");
                    _dirtyCount++;
                }

                if (pObject.isEmailModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("email");
                    _dirtyCount++;
                }

                if (pObject.isCommissionplanModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("commissionplan");
                    _dirtyCount++;
                }

                if (pObject.isValModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("val");
                    _dirtyCount++;
                }

                if (pObject.isRateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("rate");
                    _dirtyCount++;
                }

                if (pObject.isOpenbalanceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("openbalance");
                    _dirtyCount++;
                }

                if (pObject.isRoominventoryModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roominventory");
                    _dirtyCount++;
                }

                if (pObject.isCreateuserModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("createuser");
                    _dirtyCount++;
                }

                if (pObject.isBsourceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("bsource");
                    _dirtyCount++;
                }

                if (pObject.isCcblockModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ccblock");
                    _dirtyCount++;
                }

                if (pObject.isIdnModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("idn");
                    _dirtyCount++;
                }

                if (pObject.isCredittermModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("creditterm");
                    _dirtyCount++;
                }

                if (pObject.isCreditlimitModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("creditlimit");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isContragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }
    
                if (pObject.isTypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
                }
    
                if (pObject.isSalutationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
                }
    
                if (pObject.isFnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getFname());
                }
    
                if (pObject.isLnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLname());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isAddressModified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress());
                }
    
                if (pObject.isCountryidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
                }
    
                if (pObject.isCityModified()) {
                    ps.setString(++_dirtyCount, pObject.getCity());
                }
    
                if (pObject.isZipModified()) {
                    ps.setString(++_dirtyCount, pObject.getZip());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isFaxModified()) {
                    ps.setString(++_dirtyCount, pObject.getFax());
                }
    
                if (pObject.isMobileModified()) {
                    ps.setString(++_dirtyCount, pObject.getMobile());
                }
    
                if (pObject.isEmailModified()) {
                    ps.setString(++_dirtyCount, pObject.getEmail());
                }
    
                if (pObject.isCommissionplanModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCommissionplan());
                }
    
                if (pObject.isValModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getVal());
                }
    
                if (pObject.isRateModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRate());
                }
    
                if (pObject.isOpenbalanceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getOpenbalance());
                }
    
                if (pObject.isRoominventoryModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoominventory());
                }
    
                if (pObject.isCreateuserModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getCreateuser());
                }
    
                if (pObject.isBsourceModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsource());
                }
    
                if (pObject.isCcblockModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getCcblock());
                }
    
                if (pObject.isIdnModified()) {
                    ps.setString(++_dirtyCount, pObject.getIdn());
                }
    
                if (pObject.isCredittermModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCreditterm());
                }
    
                if (pObject.isCreditlimitModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getCreditlimit());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE contragent SET ");
                boolean useComma=false;

                if (pObject.isContragentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contragentid").append("=?");
                }

                if (pObject.isTypeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("type").append("=?");
                }

                if (pObject.isSalutationidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("salutationid").append("=?");
                }

                if (pObject.isFnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fname").append("=?");
                }

                if (pObject.isLnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("lname").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isAddressModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("address").append("=?");
                }

                if (pObject.isCountryidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("countryid").append("=?");
                }

                if (pObject.isCityModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("city").append("=?");
                }

                if (pObject.isZipModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("zip").append("=?");
                }

                if (pObject.isPhoneModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("phone").append("=?");
                }

                if (pObject.isFaxModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fax").append("=?");
                }

                if (pObject.isMobileModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("mobile").append("=?");
                }

                if (pObject.isEmailModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("email").append("=?");
                }

                if (pObject.isCommissionplanModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("commissionplan").append("=?");
                }

                if (pObject.isValModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("val").append("=?");
                }

                if (pObject.isRateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("rate").append("=?");
                }

                if (pObject.isOpenbalanceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("openbalance").append("=?");
                }

                if (pObject.isRoominventoryModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roominventory").append("=?");
                }

                if (pObject.isCreateuserModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("createuser").append("=?");
                }

                if (pObject.isBsourceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("bsource").append("=?");
                }

                if (pObject.isCcblockModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ccblock").append("=?");
                }

                if (pObject.isIdnModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("idn").append("=?");
                }

                if (pObject.isCredittermModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("creditterm").append("=?");
                }

                if (pObject.isCreditlimitModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("creditlimit").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("contragent.contragentid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isContragentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }

                if (pObject.isTypeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
                }

                if (pObject.isSalutationidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
                }

                if (pObject.isFnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getFname());
                }

                if (pObject.isLnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getLname());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isAddressModified()) {
                      ps.setString(++_dirtyCount, pObject.getAddress());
                }

                if (pObject.isCountryidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
                }

                if (pObject.isCityModified()) {
                      ps.setString(++_dirtyCount, pObject.getCity());
                }

                if (pObject.isZipModified()) {
                      ps.setString(++_dirtyCount, pObject.getZip());
                }

                if (pObject.isPhoneModified()) {
                      ps.setString(++_dirtyCount, pObject.getPhone());
                }

                if (pObject.isFaxModified()) {
                      ps.setString(++_dirtyCount, pObject.getFax());
                }

                if (pObject.isMobileModified()) {
                      ps.setString(++_dirtyCount, pObject.getMobile());
                }

                if (pObject.isEmailModified()) {
                      ps.setString(++_dirtyCount, pObject.getEmail());
                }

                if (pObject.isCommissionplanModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCommissionplan());
                }

                if (pObject.isValModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getVal());
                }

                if (pObject.isRateModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRate());
                }

                if (pObject.isOpenbalanceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getOpenbalance());
                }

                if (pObject.isRoominventoryModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRoominventory());
                }

                if (pObject.isCreateuserModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getCreateuser());
                }

                if (pObject.isBsourceModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsource());
                }

                if (pObject.isCcblockModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getCcblock());
                }

                if (pObject.isIdnModified()) {
                      ps.setString(++_dirtyCount, pObject.getIdn());
                }

                if (pObject.isCredittermModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCreditterm());
                }

                if (pObject.isCreditlimitModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getCreditlimit());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of ContragentBean pObjects into the database.
     *
     * @param pObjects the ContragentBean pObject table to be saved
     * @return the saved ContragentBean array.
     */
    //65
    public ContragentBean[] save(ContragentBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique ContragentBean pObject from a template one giving a c
     *
     * @param pObject the ContragentBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public ContragentBean loadUniqueUsingTemplate(ContragentBean pObject) throws SQLException
    {
         ContragentBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of ContragentBean from a template one.
     *
     * @param pObject the ContragentBean template to look for
     * @return all the ContragentBean matching the template
     */
    //88
    public ContragentBean[] loadUsingTemplate(ContragentBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from contragent WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isContragentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contragentid= ?");
             }
    
             if (pObject.isTypeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("type= ?");
             }
    
             if (pObject.isSalutationidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("salutationid= ?");
             }
    
             if (pObject.isFnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fname= ?");
             }
    
             if (pObject.isLnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("lname= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isAddressModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address= ?");
             }
    
             if (pObject.isCountryidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("countryid= ?");
             }
    
             if (pObject.isCityModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("city= ?");
             }
    
             if (pObject.isZipModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("zip= ?");
             }
    
             if (pObject.isPhoneModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
             }
    
             if (pObject.isFaxModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fax= ?");
             }
    
             if (pObject.isMobileModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mobile= ?");
             }
    
             if (pObject.isEmailModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("email= ?");
             }
    
             if (pObject.isCommissionplanModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("commissionplan= ?");
             }
    
             if (pObject.isValModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("val= ?");
             }
    
             if (pObject.isRateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("rate= ?");
             }
    
             if (pObject.isOpenbalanceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("openbalance= ?");
             }
    
             if (pObject.isRoominventoryModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roominventory= ?");
             }
    
             if (pObject.isCreateuserModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("createuser= ?");
             }
    
             if (pObject.isBsourceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bsource= ?");
             }
    
             if (pObject.isCcblockModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ccblock= ?");
             }
    
             if (pObject.isIdnModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("idn= ?");
             }
    
             if (pObject.isCredittermModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("creditterm= ?");
             }
    
             if (pObject.isCreditlimitModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("creditlimit= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isContragentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
             }
    
             if (pObject.isTypeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
             }
    
             if (pObject.isSalutationidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
             }
    
             if (pObject.isFnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getFname());
             }
    
             if (pObject.isLnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getLname());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isAddressModified()) {
                 ps.setString(++_dirtyCount, pObject.getAddress());
             }
    
             if (pObject.isCountryidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
             }
    
             if (pObject.isCityModified()) {
                 ps.setString(++_dirtyCount, pObject.getCity());
             }
    
             if (pObject.isZipModified()) {
                 ps.setString(++_dirtyCount, pObject.getZip());
             }
    
             if (pObject.isPhoneModified()) {
                 ps.setString(++_dirtyCount, pObject.getPhone());
             }
    
             if (pObject.isFaxModified()) {
                 ps.setString(++_dirtyCount, pObject.getFax());
             }
    
             if (pObject.isMobileModified()) {
                 ps.setString(++_dirtyCount, pObject.getMobile());
             }
    
             if (pObject.isEmailModified()) {
                 ps.setString(++_dirtyCount, pObject.getEmail());
             }
    
             if (pObject.isCommissionplanModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCommissionplan());
             }
    
             if (pObject.isValModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getVal());
             }
    
             if (pObject.isRateModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRate());
             }
    
             if (pObject.isOpenbalanceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getOpenbalance());
             }
    
             if (pObject.isRoominventoryModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRoominventory());
             }
    
             if (pObject.isCreateuserModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getCreateuser());
             }
    
             if (pObject.isBsourceModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsource());
             }
    
             if (pObject.isCcblockModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getCcblock());
             }
    
             if (pObject.isIdnModified()) {
                 ps.setString(++_dirtyCount, pObject.getIdn());
             }
    
             if (pObject.isCredittermModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCreditterm());
             }
    
             if (pObject.isCreditlimitModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getCreditlimit());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a ContragentBean template.
     *
     * @param pObject the ContragentBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(ContragentBean pObject) throws SQLException
    {
        if (pObject.isContragentidInitialized())
            return deleteByPrimaryKey(pObject.getContragentid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM contragent WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isContragentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contragentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTypeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("type").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSalutationidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("salutationid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("lname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAddressInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("address").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCountryidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("countryid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCityInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("city").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isZipInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("zip").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPhoneInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("phone").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFaxInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fax").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMobileInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("mobile").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isEmailInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("email").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCommissionplanInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("commissionplan").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isValInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("val").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("rate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isOpenbalanceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("openbalance").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRoominventoryInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roominventory").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCreateuserInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("createuser").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBsourceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("bsource").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCcblockInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ccblock").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isIdnInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("idn").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCredittermInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("creditterm").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCreditlimitInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("creditlimit").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isContragentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
            }
    
            if (pObject.isTypeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
            }
    
            if (pObject.isSalutationidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
            }
    
            if (pObject.isFnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getFname());
            }
    
            if (pObject.isLnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getLname());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isAddressInitialized()) {
                ps.setString(++_dirtyCount, pObject.getAddress());
            }
    
            if (pObject.isCountryidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
            }
    
            if (pObject.isCityInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCity());
            }
    
            if (pObject.isZipInitialized()) {
                ps.setString(++_dirtyCount, pObject.getZip());
            }
    
            if (pObject.isPhoneInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPhone());
            }
    
            if (pObject.isFaxInitialized()) {
                ps.setString(++_dirtyCount, pObject.getFax());
            }
    
            if (pObject.isMobileInitialized()) {
                ps.setString(++_dirtyCount, pObject.getMobile());
            }
    
            if (pObject.isEmailInitialized()) {
                ps.setString(++_dirtyCount, pObject.getEmail());
            }
    
            if (pObject.isCommissionplanInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCommissionplan());
            }
    
            if (pObject.isValInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getVal());
            }
    
            if (pObject.isRateInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRate());
            }
    
            if (pObject.isOpenbalanceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getOpenbalance());
            }
    
            if (pObject.isRoominventoryInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRoominventory());
            }
    
            if (pObject.isCreateuserInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getCreateuser());
            }
    
            if (pObject.isBsourceInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsource());
            }
    
            if (pObject.isCcblockInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getCcblock());
            }
    
            if (pObject.isIdnInitialized()) {
                ps.setString(++_dirtyCount, pObject.getIdn());
            }
    
            if (pObject.isCredittermInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCreditterm());
            }
    
            if (pObject.isCreditlimitInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getCreditlimit());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of GuestBean using the relation table Folio given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of GuestBean 
     */
    // MANY TO MANY
    public GuestBean[] loadGuestViaFolio(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        guest,folio"
                         + " WHERE "    
                         + "     folio.contragentid = ?"
                         + " AND folio.guestid = guest.guestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return GuestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonnelBean using the relation table Folio given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of PersonnelBean 
     */
    // MANY TO MANY
    public PersonnelBean[] loadPersonnelViaFolio(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personnel,folio"
                         + " WHERE "    
                         + "     folio.contragentid = ?"
                         + " AND folio.regbyid = personnel.personnelid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return PersonnelManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ReservationroomBean using the relation table Folio given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of ReservationroomBean 
     */
    // MANY TO MANY
    public ReservationroomBean[] loadReservationroomViaFolio(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        reservationroom,folio"
                         + " WHERE "    
                         + "     folio.contragentid = ?"
                         + " AND folio.reservationroomid = reservationroom.reservationroomid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return ReservationroomManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of BsourceBean using the relation table Reservation given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of BsourceBean 
     */
    // MANY TO MANY
    public BsourceBean[] loadBsourceViaReservation(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        bsource,reservation"
                         + " WHERE "    
                         + "     reservation.contractcontragentid = ?"
                         + " AND reservation.bsourceid = bsource.bsourceid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return BsourceManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of DiscountBean using the relation table Reservation given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of DiscountBean 
     */
    // MANY TO MANY
    public DiscountBean[] loadDiscountViaReservation(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        discount,reservation"
                         + " WHERE "    
                         + "     reservation.contractcontragentid = ?"
                         + " AND reservation.discountid = discount.discountid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return DiscountManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of MarketBean using the relation table Reservation given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of MarketBean 
     */
    // MANY TO MANY
    public MarketBean[] loadMarketViaReservation(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        market,reservation"
                         + " WHERE "    
                         + "     reservation.contractcontragentid = ?"
                         + " AND reservation.marketid = market.marketid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return MarketManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PaymentmethodBean using the relation table Reservation given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of PaymentmethodBean 
     */
    // MANY TO MANY
    public PaymentmethodBean[] loadPaymentmethodViaReservation(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        paymentmethod,reservation"
                         + " WHERE "    
                         + "     reservation.contractcontragentid = ?"
                         + " AND reservation.paymentmethodid = paymentmethod.paymentmethodid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return PaymentmethodManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonnelBean using the relation table Reservation given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of PersonnelBean 
     */
    // MANY TO MANY
    public PersonnelBean[] loadPersonnelViaReservation(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personnel,reservation"
                         + " WHERE "    
                         + "     reservation.contractcontragentid = ?"
                         + " AND reservation.regbyid = personnel.personnelid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return PersonnelManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ReservationtypeBean using the relation table Reservation given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of ReservationtypeBean 
     */
    // MANY TO MANY
    public ReservationtypeBean[] loadReservationtypeViaReservation(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        reservationtype,reservation"
                         + " WHERE "    
                         + "     reservation.contractcontragentid = ?"
                         + " AND reservation.reservationtypeid = reservationtype.reservationtypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return ReservationtypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RoomBean using the relation table Roomownerroom given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of RoomBean 
     */
    // MANY TO MANY
    public RoomBean[] loadRoomViaRoomownerroom(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        room,roomownerroom"
                         + " WHERE "    
                         + "     roomownerroom.roomownerid = ?"
                         + " AND roomownerroom.roomid = room.roomid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return RoomManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RatetypeBean using the relation table Roomrate given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of RatetypeBean 
     */
    // MANY TO MANY
    public RatetypeBean[] loadRatetypeViaRoomrate(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        ratetype,roomrate"
                         + " WHERE "    
                         + "     roomrate.contragentid = ?"
                         + " AND roomrate.ratetypeid = ratetype.ratetypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return RatetypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RoomtypeBean using the relation table Roomrate given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of RoomtypeBean 
     */
    // MANY TO MANY
    public RoomtypeBean[] loadRoomtypeViaRoomrate(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        roomtype,roomrate"
                         + " WHERE "    
                         + "     roomrate.contragentid = ?"
                         + " AND roomrate.roomtypeid = roomtype.roomtypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return RoomtypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SeasonBean using the relation table Roomrate given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of SeasonBean 
     */
    // MANY TO MANY
    public SeasonBean[] loadSeasonViaRoomrate(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        season,roomrate"
                         + " WHERE "    
                         + "     roomrate.contragentid = ?"
                         + " AND roomrate.seasonid = season.seasonid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return SeasonManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table contragent.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table contragent with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from contragent " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table contragent with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific ContragentBean pObject given a c
     *
     * @param pObject the ContragentBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(ContragentBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from contragent WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isContragentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contragentid= ?");
                }
    
                if (pObject.isTypeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("type= ?");
                }
    
                if (pObject.isSalutationidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("salutationid= ?");
                }
    
                if (pObject.isFnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fname= ?");
                }
    
                if (pObject.isLnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("lname= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isAddressModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address= ?");
                }
    
                if (pObject.isCountryidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("countryid= ?");
                }
    
                if (pObject.isCityModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("city= ?");
                }
    
                if (pObject.isZipModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("zip= ?");
                }
    
                if (pObject.isPhoneModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
                }
    
                if (pObject.isFaxModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fax= ?");
                }
    
                if (pObject.isMobileModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mobile= ?");
                }
    
                if (pObject.isEmailModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("email= ?");
                }
    
                if (pObject.isCommissionplanModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("commissionplan= ?");
                }
    
                if (pObject.isValModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("val= ?");
                }
    
                if (pObject.isRateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("rate= ?");
                }
    
                if (pObject.isOpenbalanceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("openbalance= ?");
                }
    
                if (pObject.isRoominventoryModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roominventory= ?");
                }
    
                if (pObject.isCreateuserModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("createuser= ?");
                }
    
                if (pObject.isBsourceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bsource= ?");
                }
    
                if (pObject.isCcblockModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ccblock= ?");
                }
    
                if (pObject.isIdnModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("idn= ?");
                }
    
                if (pObject.isCredittermModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("creditterm= ?");
                }
    
                if (pObject.isCreditlimitModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("creditlimit= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isContragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }
    
                if (pObject.isTypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
                }
    
                if (pObject.isSalutationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
                }
    
                if (pObject.isFnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getFname());
                }
    
                if (pObject.isLnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLname());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isAddressModified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress());
                }
    
                if (pObject.isCountryidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCountryid());
                }
    
                if (pObject.isCityModified()) {
                    ps.setString(++_dirtyCount, pObject.getCity());
                }
    
                if (pObject.isZipModified()) {
                    ps.setString(++_dirtyCount, pObject.getZip());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isFaxModified()) {
                    ps.setString(++_dirtyCount, pObject.getFax());
                }
    
                if (pObject.isMobileModified()) {
                    ps.setString(++_dirtyCount, pObject.getMobile());
                }
    
                if (pObject.isEmailModified()) {
                    ps.setString(++_dirtyCount, pObject.getEmail());
                }
    
                if (pObject.isCommissionplanModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCommissionplan());
                }
    
                if (pObject.isValModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getVal());
                }
    
                if (pObject.isRateModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRate());
                }
    
                if (pObject.isOpenbalanceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getOpenbalance());
                }
    
                if (pObject.isRoominventoryModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoominventory());
                }
    
                if (pObject.isCreateuserModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getCreateuser());
                }
    
                if (pObject.isBsourceModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsource());
                }
    
                if (pObject.isCcblockModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getCcblock());
                }
    
                if (pObject.isIdnModified()) {
                    ps.setString(++_dirtyCount, pObject.getIdn());
                }
    
                if (pObject.isCredittermModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCreditterm());
                }
    
                if (pObject.isCreditlimitModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getCreditlimit());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the contragent on a ContragentBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting ContragentBean pObject
     */
    //72
    public ContragentBean decodeRow(ResultSet rs) throws SQLException
    {
        ContragentBean pObject = createContragentBean();
        pObject.setContragentid(Manager.getLong(rs, 1));
        pObject.setType(Manager.getInteger(rs, 2));
        pObject.setSalutationid(Manager.getInteger(rs, 3));
        pObject.setFname(rs.getString(4));
        pObject.setLname(rs.getString(5));
        pObject.setName(rs.getString(6));
        pObject.setAddress(rs.getString(7));
        pObject.setCountryid(Manager.getInteger(rs, 8));
        pObject.setCity(rs.getString(9));
        pObject.setZip(rs.getString(10));
        pObject.setPhone(rs.getString(11));
        pObject.setFax(rs.getString(12));
        pObject.setMobile(rs.getString(13));
        pObject.setEmail(rs.getString(14));
        pObject.setCommissionplan(Manager.getInteger(rs, 15));
        pObject.setVal(Manager.getDouble(rs, 16));
        pObject.setRate(Manager.getInteger(rs, 17));
        pObject.setOpenbalance(Manager.getDouble(rs, 18));
        pObject.setRoominventory(Manager.getInteger(rs, 19));
        pObject.setCreateuser(Manager.getBoolean(rs, 20));
        pObject.setBsource(Manager.getBoolean(rs, 21));
        pObject.setCcblock(Manager.getBoolean(rs, 22));
        pObject.setIdn(rs.getString(23));
        pObject.setCreditterm(Manager.getInteger(rs, 24));
        pObject.setCreditlimit(Manager.getDouble(rs, 25));
        pObject.setRegbyid(Manager.getInteger(rs, 26));
        pObject.setRegdate(rs.getTimestamp(27));
        pObject.setDeleted(Manager.getBoolean(rs, 28));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the contragent table on a ContragentBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting ContragentBean pObject
     */
    //73
    public ContragentBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        ContragentBean pObject = createContragentBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_CONTRAGENTID:
                    ++pos;
                    pObject.setContragentid(Manager.getLong(rs, pos));
                    break;
                case ID_TYPE:
                    ++pos;
                    pObject.setType(Manager.getInteger(rs, pos));
                    break;
                case ID_SALUTATIONID:
                    ++pos;
                    pObject.setSalutationid(Manager.getInteger(rs, pos));
                    break;
                case ID_FNAME:
                    ++pos;
                    pObject.setFname(rs.getString(pos));
                    break;
                case ID_LNAME:
                    ++pos;
                    pObject.setLname(rs.getString(pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_ADDRESS:
                    ++pos;
                    pObject.setAddress(rs.getString(pos));
                    break;
                case ID_COUNTRYID:
                    ++pos;
                    pObject.setCountryid(Manager.getInteger(rs, pos));
                    break;
                case ID_CITY:
                    ++pos;
                    pObject.setCity(rs.getString(pos));
                    break;
                case ID_ZIP:
                    ++pos;
                    pObject.setZip(rs.getString(pos));
                    break;
                case ID_PHONE:
                    ++pos;
                    pObject.setPhone(rs.getString(pos));
                    break;
                case ID_FAX:
                    ++pos;
                    pObject.setFax(rs.getString(pos));
                    break;
                case ID_MOBILE:
                    ++pos;
                    pObject.setMobile(rs.getString(pos));
                    break;
                case ID_EMAIL:
                    ++pos;
                    pObject.setEmail(rs.getString(pos));
                    break;
                case ID_COMMISSIONPLAN:
                    ++pos;
                    pObject.setCommissionplan(Manager.getInteger(rs, pos));
                    break;
                case ID_VAL:
                    ++pos;
                    pObject.setVal(Manager.getDouble(rs, pos));
                    break;
                case ID_RATE:
                    ++pos;
                    pObject.setRate(Manager.getInteger(rs, pos));
                    break;
                case ID_OPENBALANCE:
                    ++pos;
                    pObject.setOpenbalance(Manager.getDouble(rs, pos));
                    break;
                case ID_ROOMINVENTORY:
                    ++pos;
                    pObject.setRoominventory(Manager.getInteger(rs, pos));
                    break;
                case ID_CREATEUSER:
                    ++pos;
                    pObject.setCreateuser(Manager.getBoolean(rs, pos));
                    break;
                case ID_BSOURCE:
                    ++pos;
                    pObject.setBsource(Manager.getBoolean(rs, pos));
                    break;
                case ID_CCBLOCK:
                    ++pos;
                    pObject.setCcblock(Manager.getBoolean(rs, pos));
                    break;
                case ID_IDN:
                    ++pos;
                    pObject.setIdn(rs.getString(pos));
                    break;
                case ID_CREDITTERM:
                    ++pos;
                    pObject.setCreditterm(Manager.getInteger(rs, pos));
                    break;
                case ID_CREDITLIMIT:
                    ++pos;
                    pObject.setCreditlimit(Manager.getDouble(rs, pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ContragentBean 
     */
    //41
    public ContragentBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ContragentBean 
     */
    public ContragentBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (ContragentBean[])v.toArray(new ContragentBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private ContragentListener listener = null;

    /**
     * Registers a unique ContragentListener listener.
     */
    //66.5
    public void registerListener(ContragentListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the ContragentBean pObject.
     *
     * @param pObject the ContragentBean pObject to be saved
     */
    //67
    void beforeInsert(ContragentBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the ContragentBean pObject.
     *
     * @param pObject the ContragentBean pObject to be saved
     */
    //68
    void afterInsert(ContragentBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the ContragentBean pObject.
     *
     * @param pObject the ContragentBean pObject to be updated
     */
    //69
    void beforeUpdate(ContragentBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the ContragentBean pObject.
     *
     * @param pObject the ContragentBean pObject to be updated
     */
    //70
    void afterUpdate(ContragentBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
