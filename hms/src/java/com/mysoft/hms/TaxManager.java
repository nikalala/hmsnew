// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the tax table.
 */
public class TaxManager
// extends+ 

// extends- 

{

    /**
     * Column taxid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TAXID = 0;
    public static final int TYPE_TAXID = Types.INTEGER;
    public static final String NAME_TAXID = "taxid";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 1;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column code of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CODE = 2;
    public static final int TYPE_CODE = Types.VARCHAR;
    public static final String NAME_CODE = "code";

    /**
     * Column startfrom of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_STARTFROM = 3;
    public static final int TYPE_STARTFROM = Types.DATE;
    public static final String NAME_STARTFROM = "startfrom";

    /**
     * Column exemptafter of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_EXEMPTAFTER = 4;
    public static final int TYPE_EXEMPTAFTER = Types.INTEGER;
    public static final String NAME_EXEMPTAFTER = "exemptafter";

    /**
     * Column postingtype of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_POSTINGTYPE = 5;
    public static final int TYPE_POSTINGTYPE = Types.INTEGER;
    public static final String NAME_POSTINGTYPE = "postingtype";

    /**
     * Column amount of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_AMOUNT = 6;
    public static final int TYPE_AMOUNT = Types.DOUBLE;
    public static final String NAME_AMOUNT = "amount";

    /**
     * Column applybefore of type Types.BIT mapped to Boolean.
     */
    public static final int ID_APPLYBEFORE = 7;
    public static final int TYPE_APPLYBEFORE = Types.BIT;
    public static final String NAME_APPLYBEFORE = "applybefore";

    /**
     * Column applyonrate of type Types.BIT mapped to Boolean.
     */
    public static final int ID_APPLYONRATE = 8;
    public static final int TYPE_APPLYONRATE = Types.BIT;
    public static final String NAME_APPLYONRATE = "applyonrate";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 9;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 10;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column active of type Types.BIT mapped to Boolean.
     */
    public static final int ID_ACTIVE = 11;
    public static final int TYPE_ACTIVE = Types.BIT;
    public static final String NAME_ACTIVE = "active";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 12;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";


    private static final String TABLE_NAME = "tax";

    /**
     * Create an array of type string containing all the fields of the tax table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "tax.taxid"
        ,"tax.name"
        ,"tax.code"
        ,"tax.startfrom"
        ,"tax.exemptafter"
        ,"tax.postingtype"
        ,"tax.amount"
        ,"tax.applybefore"
        ,"tax.applyonrate"
        ,"tax.regbyid"
        ,"tax.regdate"
        ,"tax.active"
        ,"tax.deleted"
    };

    /**
     * Field that contains the comma separated fields of the tax table.
     */
    private static final String ALL_FIELDS = "tax.taxid"
                            + ",tax.name"
                            + ",tax.code"
                            + ",tax.startfrom"
                            + ",tax.exemptafter"
                            + ",tax.postingtype"
                            + ",tax.amount"
                            + ",tax.applybefore"
                            + ",tax.applyonrate"
                            + ",tax.regbyid"
                            + ",tax.regdate"
                            + ",tax.active"
                            + ",tax.deleted";

    private static TaxManager singleton = new TaxManager();

    /**
     * Get the TaxManager singleton.
     *
     * @return TaxManager 
     */
    synchronized public static TaxManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own TaxManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(TaxManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new TaxBean instance.
     *
     * @return the new TaxBean 
     */
    public TaxBean createTaxBean()
    {
        return new TaxBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a TaxBean from the tax using its key fields.
     *
     * @return a unique TaxBean 
     */
    //12
    public TaxBean loadByPrimaryKey(Integer taxid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM tax WHERE tax.taxid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, taxid);
            TaxBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer taxid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from tax WHERE tax.taxid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, taxid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads TaxBean array from the tax table using its regbyid field.
     *
     * @return an array of TaxBean 
     */
    // LOAD BY IMPORTED KEY
    public TaxBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM tax WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the tax table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM tax WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the PersonnelBean object from the tax.personnelid field.
     *
     * @param pObject the TaxBean 
     * @return the associated PersonnelBean pObject
     */
    // GET IMPORTED
    public PersonnelBean getPersonnelBean(TaxBean pObject) throws SQLException
    {
        PersonnelBean other = PersonnelManager.getInstance().createPersonnelBean();
        other.setPersonnelid(pObject.getRegbyid());
        return PersonnelManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TaxBean object to the PersonnelBean object.
     *
     * @param pObject the TaxBean object to use
     * @param pObjectToBeSet the PersonnelBean object to associate to the TaxBean 
     * @return the associated PersonnelBean pObject
     */
    // SET IMPORTED
    public TaxBean setPersonnelBean(TaxBean pObject,PersonnelBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonnelid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from tax.
     *
     * @return an array of TaxManager pObject
     */
    //38
    public TaxBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM tax",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of TaxBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting TaxBean table 
     */
    //49
    public TaxBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of TaxBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting TaxBean table 
     */
    //51
    public TaxBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from tax " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from tax ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (TaxBean[])v.toArray(new TaxBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from tax table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the tax table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM tax " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the TaxBean pObject into the database.
     *
     * @param pObject the TaxBean pObject to be saved
     */
    //100
    public TaxBean save(TaxBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isTaxidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('taxid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setTaxid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into tax (");
    
                if (pObject.isTaxidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("taxid");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isCodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("code");
                    _dirtyCount++;
                }

                if (pObject.isStartfromModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("startfrom");
                    _dirtyCount++;
                }

                if (pObject.isExemptafterModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("exemptafter");
                    _dirtyCount++;
                }

                if (pObject.isPostingtypeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("postingtype");
                    _dirtyCount++;
                }

                if (pObject.isAmountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("amount");
                    _dirtyCount++;
                }

                if (pObject.isApplybeforeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("applybefore");
                    _dirtyCount++;
                }

                if (pObject.isApplyonrateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("applyonrate");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isActiveModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("active");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isTaxidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTaxid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isStartfromModified()) {
                    if (pObject.getStartfrom() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartfrom().getTime()));
                }
    
                if (pObject.isExemptafterModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getExemptafter());
                }
    
                if (pObject.isPostingtypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPostingtype());
                }
    
                if (pObject.isAmountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }
    
                if (pObject.isApplybeforeModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getApplybefore());
                }
    
                if (pObject.isApplyonrateModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getApplyonrate());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isActiveModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE tax SET ");
                boolean useComma=false;

                if (pObject.isTaxidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("taxid").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isCodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("code").append("=?");
                }

                if (pObject.isStartfromModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("startfrom").append("=?");
                }

                if (pObject.isExemptafterModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("exemptafter").append("=?");
                }

                if (pObject.isPostingtypeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("postingtype").append("=?");
                }

                if (pObject.isAmountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("amount").append("=?");
                }

                if (pObject.isApplybeforeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("applybefore").append("=?");
                }

                if (pObject.isApplyonrateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("applyonrate").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isActiveModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("active").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("tax.taxid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isTaxidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getTaxid());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isCodeModified()) {
                      ps.setString(++_dirtyCount, pObject.getCode());
                }

                if (pObject.isStartfromModified()) {
                      if (pObject.getStartfrom() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartfrom().getTime()));
                }

                if (pObject.isExemptafterModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getExemptafter());
                }

                if (pObject.isPostingtypeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getPostingtype());
                }

                if (pObject.isAmountModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }

                if (pObject.isApplybeforeModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getApplybefore());
                }

                if (pObject.isApplyonrateModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getApplyonrate());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isActiveModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTaxid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of TaxBean pObjects into the database.
     *
     * @param pObjects the TaxBean pObject table to be saved
     * @return the saved TaxBean array.
     */
    //65
    public TaxBean[] save(TaxBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique TaxBean pObject from a template one giving a c
     *
     * @param pObject the TaxBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public TaxBean loadUniqueUsingTemplate(TaxBean pObject) throws SQLException
    {
         TaxBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of TaxBean from a template one.
     *
     * @param pObject the TaxBean template to look for
     * @return all the TaxBean matching the template
     */
    //88
    public TaxBean[] loadUsingTemplate(TaxBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from tax WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isTaxidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("taxid= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isCodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
             }
    
             if (pObject.isStartfromModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("startfrom= ?");
             }
    
             if (pObject.isExemptafterModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("exemptafter= ?");
             }
    
             if (pObject.isPostingtypeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("postingtype= ?");
             }
    
             if (pObject.isAmountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amount= ?");
             }
    
             if (pObject.isApplybeforeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("applybefore= ?");
             }
    
             if (pObject.isApplyonrateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("applyonrate= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isActiveModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("active= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isTaxidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getTaxid());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isCodeModified()) {
                 ps.setString(++_dirtyCount, pObject.getCode());
             }
    
             if (pObject.isStartfromModified()) {
                 if (pObject.getStartfrom() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartfrom().getTime()));
             }
    
             if (pObject.isExemptafterModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getExemptafter());
             }
    
             if (pObject.isPostingtypeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getPostingtype());
             }
    
             if (pObject.isAmountModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
             }
    
             if (pObject.isApplybeforeModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getApplybefore());
             }
    
             if (pObject.isApplyonrateModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getApplyonrate());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isActiveModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a TaxBean template.
     *
     * @param pObject the TaxBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(TaxBean pObject) throws SQLException
    {
        if (pObject.isTaxidInitialized())
            return deleteByPrimaryKey(pObject.getTaxid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM tax WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isTaxidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("taxid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("code").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStartfromInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("startfrom").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isExemptafterInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("exemptafter").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPostingtypeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("postingtype").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAmountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("amount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isApplybeforeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("applybefore").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isApplyonrateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("applyonrate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isActiveInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("active").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isTaxidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTaxid());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isCodeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCode());
            }
    
            if (pObject.isStartfromInitialized()) {
                if (pObject.getStartfrom() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartfrom().getTime()));
            }
    
            if (pObject.isExemptafterInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getExemptafter());
            }
    
            if (pObject.isPostingtypeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPostingtype());
            }
    
            if (pObject.isAmountInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
            }
    
            if (pObject.isApplybeforeInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getApplybefore());
            }
    
            if (pObject.isApplyonrateInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getApplyonrate());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isActiveInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of ExtrachargeBean using the relation table Extrachargetax given a TaxBean object.
     *
     * @param pObject the TaxBean pObject to be used
     * @return an array of ExtrachargeBean 
     */
    // MANY TO MANY
    public ExtrachargeBean[] loadExtrachargeViaExtrachargetax(TaxBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        extracharge,extrachargetax"
                         + " WHERE "    
                         + "     extrachargetax.taxid = ?"
                         + " AND extrachargetax.extrachargeid = extracharge.extrachargeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getTaxid());
             return ExtrachargeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of DiscountBean using the relation table Folioitem given a TaxBean object.
     *
     * @param pObject the TaxBean pObject to be used
     * @return an array of DiscountBean 
     */
    // MANY TO MANY
    public DiscountBean[] loadDiscountViaFolioitem(TaxBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        discount,folioitem"
                         + " WHERE "    
                         + "     folioitem.taxid = ?"
                         + " AND folioitem.discountid = discount.discountid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getTaxid());
             return DiscountManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ExtrachargeBean using the relation table Folioitem given a TaxBean object.
     *
     * @param pObject the TaxBean pObject to be used
     * @return an array of ExtrachargeBean 
     */
    // MANY TO MANY
    public ExtrachargeBean[] loadExtrachargeViaFolioitem(TaxBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        extracharge,folioitem"
                         + " WHERE "    
                         + "     folioitem.taxid = ?"
                         + " AND folioitem.extrachargeid = extracharge.extrachargeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getTaxid());
             return ExtrachargeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of FolioBean using the relation table Folioitem given a TaxBean object.
     *
     * @param pObject the TaxBean pObject to be used
     * @return an array of FolioBean 
     */
    // MANY TO MANY
    public FolioBean[] loadFolioViaFolioitem(TaxBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        folio,folioitem"
                         + " WHERE "    
                         + "     folioitem.taxid = ?"
                         + " AND folioitem.folioid = folio.folioid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getTaxid());
             return FolioManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonnelBean using the relation table Folioitem given a TaxBean object.
     *
     * @param pObject the TaxBean pObject to be used
     * @return an array of PersonnelBean 
     */
    // MANY TO MANY
    public PersonnelBean[] loadPersonnelViaFolioitem(TaxBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personnel,folioitem"
                         + " WHERE "    
                         + "     folioitem.taxid = ?"
                         + " AND folioitem.regbyid = personnel.personnelid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getTaxid());
             return PersonnelManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RoomBean using the relation table Folioitem given a TaxBean object.
     *
     * @param pObject the TaxBean pObject to be used
     * @return an array of RoomBean 
     */
    // MANY TO MANY
    public RoomBean[] loadRoomViaFolioitem(TaxBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        room,folioitem"
                         + " WHERE "    
                         + "     folioitem.taxid = ?"
                         + " AND folioitem.roomid = room.roomid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getTaxid());
             return RoomManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PayoutBean using the relation table Taxaccount given a TaxBean object.
     *
     * @param pObject the TaxBean pObject to be used
     * @return an array of PayoutBean 
     */
    // MANY TO MANY
    public PayoutBean[] loadPayoutViaTaxaccount(TaxBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        payout,taxaccount"
                         + " WHERE "    
                         + "     taxaccount.taxid = ?"
                         + " AND taxaccount.payoutid = payout.payoutid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getTaxid());
             return PayoutManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table tax.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table tax with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from tax " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table tax with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific TaxBean pObject given a c
     *
     * @param pObject the TaxBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(TaxBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from tax WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isTaxidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("taxid= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isCodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
                }
    
                if (pObject.isStartfromModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("startfrom= ?");
                }
    
                if (pObject.isExemptafterModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("exemptafter= ?");
                }
    
                if (pObject.isPostingtypeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("postingtype= ?");
                }
    
                if (pObject.isAmountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amount= ?");
                }
    
                if (pObject.isApplybeforeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("applybefore= ?");
                }
    
                if (pObject.isApplyonrateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("applyonrate= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isActiveModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("active= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isTaxidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTaxid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isStartfromModified()) {
                    if (pObject.getStartfrom() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartfrom().getTime()));
                }
    
                if (pObject.isExemptafterModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getExemptafter());
                }
    
                if (pObject.isPostingtypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPostingtype());
                }
    
                if (pObject.isAmountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }
    
                if (pObject.isApplybeforeModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getApplybefore());
                }
    
                if (pObject.isApplyonrateModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getApplyonrate());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isActiveModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the tax on a TaxBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting TaxBean pObject
     */
    //72
    public TaxBean decodeRow(ResultSet rs) throws SQLException
    {
        TaxBean pObject = createTaxBean();
        pObject.setTaxid(Manager.getInteger(rs, 1));
        pObject.setName(rs.getString(2));
        pObject.setCode(rs.getString(3));
        pObject.setStartfrom(rs.getDate(4));
        pObject.setExemptafter(Manager.getInteger(rs, 5));
        pObject.setPostingtype(Manager.getInteger(rs, 6));
        pObject.setAmount(Manager.getDouble(rs, 7));
        pObject.setApplybefore(Manager.getBoolean(rs, 8));
        pObject.setApplyonrate(Manager.getBoolean(rs, 9));
        pObject.setRegbyid(Manager.getInteger(rs, 10));
        pObject.setRegdate(rs.getTimestamp(11));
        pObject.setActive(Manager.getBoolean(rs, 12));
        pObject.setDeleted(Manager.getBoolean(rs, 13));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the tax table on a TaxBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting TaxBean pObject
     */
    //73
    public TaxBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        TaxBean pObject = createTaxBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_TAXID:
                    ++pos;
                    pObject.setTaxid(Manager.getInteger(rs, pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_CODE:
                    ++pos;
                    pObject.setCode(rs.getString(pos));
                    break;
                case ID_STARTFROM:
                    ++pos;
                    pObject.setStartfrom(rs.getDate(pos));
                    break;
                case ID_EXEMPTAFTER:
                    ++pos;
                    pObject.setExemptafter(Manager.getInteger(rs, pos));
                    break;
                case ID_POSTINGTYPE:
                    ++pos;
                    pObject.setPostingtype(Manager.getInteger(rs, pos));
                    break;
                case ID_AMOUNT:
                    ++pos;
                    pObject.setAmount(Manager.getDouble(rs, pos));
                    break;
                case ID_APPLYBEFORE:
                    ++pos;
                    pObject.setApplybefore(Manager.getBoolean(rs, pos));
                    break;
                case ID_APPLYONRATE:
                    ++pos;
                    pObject.setApplyonrate(Manager.getBoolean(rs, pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_ACTIVE:
                    ++pos;
                    pObject.setActive(Manager.getBoolean(rs, pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of TaxBean 
     */
    //41
    public TaxBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of TaxBean 
     */
    public TaxBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (TaxBean[])v.toArray(new TaxBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private TaxListener listener = null;

    /**
     * Registers a unique TaxListener listener.
     */
    //66.5
    public void registerListener(TaxListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the TaxBean pObject.
     *
     * @param pObject the TaxBean pObject to be saved
     */
    //67
    void beforeInsert(TaxBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the TaxBean pObject.
     *
     * @param pObject the TaxBean pObject to be saved
     */
    //68
    void afterInsert(TaxBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the TaxBean pObject.
     *
     * @param pObject the TaxBean pObject to be updated
     */
    //69
    void beforeUpdate(TaxBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the TaxBean pObject.
     *
     * @param pObject the TaxBean pObject to be updated
     */
    //70
    void afterUpdate(TaxBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
