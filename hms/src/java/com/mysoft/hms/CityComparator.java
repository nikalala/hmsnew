// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the CityBean objects.
 */
public class CityComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for CityComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new CityComparator(CityManager.CITYID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>CityManager.ID_CITYID
     *   <li>CityManager.ID_REGIONID
     *   <li>CityManager.ID_NAME
     *   <li>CityManager.ID_CODE
     *   <li>CityManager.ID_EXT
     * </ul>
     */
    public CityComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for CityComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new CityComparator(CityManager.CITYID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>CityManager.ID_CITYID
     *   <li>CityManager.ID_REGIONID
     *   <li>CityManager.ID_NAME
     *   <li>CityManager.ID_CODE
     *   <li>CityManager.ID_EXT
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public CityComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        CityBean b1 = (CityBean)pObj1;
        CityBean b2 = (CityBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case CityManager.ID_CITYID:
                if (b1.getCityid() == null && b2.getCityid() != null) {
                    iReturn = -1;
                } else if (b1.getCityid() == null && b2.getCityid() == null) {
                    iReturn = 0;
                } else if (b1.getCityid() != null && b2.getCityid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCityid().compareTo(b2.getCityid());
                }
                break;
            case CityManager.ID_REGIONID:
                if (b1.getRegionid() == null && b2.getRegionid() != null) {
                    iReturn = -1;
                } else if (b1.getRegionid() == null && b2.getRegionid() == null) {
                    iReturn = 0;
                } else if (b1.getRegionid() != null && b2.getRegionid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegionid().compareTo(b2.getRegionid());
                }
                break;
            case CityManager.ID_NAME:
                if (b1.getName() == null && b2.getName() != null) {
                    iReturn = -1;
                } else if (b1.getName() == null && b2.getName() == null) {
                    iReturn = 0;
                } else if (b1.getName() != null && b2.getName() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getName().compareTo(b2.getName());
                }
                break;
            case CityManager.ID_CODE:
                if (b1.getCode() == null && b2.getCode() != null) {
                    iReturn = -1;
                } else if (b1.getCode() == null && b2.getCode() == null) {
                    iReturn = 0;
                } else if (b1.getCode() != null && b2.getCode() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCode().compareTo(b2.getCode());
                }
                break;
            case CityManager.ID_EXT:
                if (b1.getExt() == null && b2.getExt() != null) {
                    iReturn = -1;
                } else if (b1.getExt() == null && b2.getExt() == null) {
                    iReturn = 0;
                } else if (b1.getExt() != null && b2.getExt() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getExt().compareTo(b2.getExt());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
