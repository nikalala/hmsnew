// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the displaysettings table.
 */
public class DisplaysettingsManager
// extends+ 

// extends- 
{

    /**
     * Column displaysettingsid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_DISPLAYSETTINGSID = 0;
    public static final int TYPE_DISPLAYSETTINGSID = Types.INTEGER;
    public static final String NAME_DISPLAYSETTINGSID = "displaysettingsid";

    /**
     * Column timeformat of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TIMEFORMAT = 1;
    public static final int TYPE_TIMEFORMAT = Types.INTEGER;
    public static final String NAME_TIMEFORMAT = "timeformat";

    /**
     * Column dateformat of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_DATEFORMAT = 2;
    public static final int TYPE_DATEFORMAT = Types.INTEGER;
    public static final String NAME_DATEFORMAT = "dateformat";

    /**
     * Column arrdepformat of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ARRDEPFORMAT = 3;
    public static final int TYPE_ARRDEPFORMAT = Types.INTEGER;
    public static final String NAME_ARRDEPFORMAT = "arrdepformat";

    /**
     * Column timezome of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TIMEZOME = 4;
    public static final int TYPE_TIMEZOME = Types.INTEGER;
    public static final String NAME_TIMEZOME = "timezome";

    /**
     * Column idtypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_IDTYPEID = 5;
    public static final int TYPE_IDTYPEID = Types.INTEGER;
    public static final String NAME_IDTYPEID = "idtypeid";

    /**
     * Column reservationtypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_RESERVATIONTYPEID = 6;
    public static final int TYPE_RESERVATIONTYPEID = Types.INTEGER;
    public static final String NAME_RESERVATIONTYPEID = "reservationtypeid";

    /**
     * Column roundtype of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ROUNDTYPE = 7;
    public static final int TYPE_ROUNDTYPE = Types.INTEGER;
    public static final String NAME_ROUNDTYPE = "roundtype";

    /**
     * Column salutationid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SALUTATIONID = 8;
    public static final int TYPE_SALUTATIONID = Types.INTEGER;
    public static final String NAME_SALUTATIONID = "salutationid";

    /**
     * Column billto of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_BILLTO = 9;
    public static final int TYPE_BILLTO = Types.INTEGER;
    public static final String NAME_BILLTO = "billto";

    /**
     * Column paymentmode of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_PAYMENTMODE = 10;
    public static final int TYPE_PAYMENTMODE = Types.INTEGER;
    public static final String NAME_PAYMENTMODE = "paymentmode";

    /**
     * Column paymentmethodid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_PAYMENTMETHODID = 11;
    public static final int TYPE_PAYMENTMETHODID = Types.INTEGER;
    public static final String NAME_PAYMENTMETHODID = "paymentmethodid";

    /**
     * Column webrate of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_WEBRATE = 12;
    public static final int TYPE_WEBRATE = Types.INTEGER;
    public static final String NAME_WEBRATE = "webrate";

    /**
     * Column webroominvmode of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_WEBROOMINVMODE = 13;
    public static final int TYPE_WEBROOMINVMODE = Types.INTEGER;
    public static final String NAME_WEBROOMINVMODE = "webroominvmode";

    /**
     * Column paymentgateway of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PAYMENTGATEWAY = 14;
    public static final int TYPE_PAYMENTGATEWAY = Types.VARCHAR;
    public static final String NAME_PAYMENTGATEWAY = "paymentgateway";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 15;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 16;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column zip of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ZIP = 17;
    public static final int TYPE_ZIP = Types.VARCHAR;
    public static final String NAME_ZIP = "zip";


    private static final String TABLE_NAME = "displaysettings";

    /**
     * Create an array of type string containing all the fields of the displaysettings table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "displaysettings.displaysettingsid"
        ,"displaysettings.timeformat"
        ,"displaysettings.dateformat"
        ,"displaysettings.arrdepformat"
        ,"displaysettings.timezome"
        ,"displaysettings.idtypeid"
        ,"displaysettings.reservationtypeid"
        ,"displaysettings.roundtype"
        ,"displaysettings.salutationid"
        ,"displaysettings.billto"
        ,"displaysettings.paymentmode"
        ,"displaysettings.paymentmethodid"
        ,"displaysettings.webrate"
        ,"displaysettings.webroominvmode"
        ,"displaysettings.paymentgateway"
        ,"displaysettings.regbyid"
        ,"displaysettings.regdate"
        ,"displaysettings.zip"
    };

    /**
     * Field that contains the comma separated fields of the displaysettings table.
     */
    private static final String ALL_FIELDS = "displaysettings.displaysettingsid"
                            + ",displaysettings.timeformat"
                            + ",displaysettings.dateformat"
                            + ",displaysettings.arrdepformat"
                            + ",displaysettings.timezome"
                            + ",displaysettings.idtypeid"
                            + ",displaysettings.reservationtypeid"
                            + ",displaysettings.roundtype"
                            + ",displaysettings.salutationid"
                            + ",displaysettings.billto"
                            + ",displaysettings.paymentmode"
                            + ",displaysettings.paymentmethodid"
                            + ",displaysettings.webrate"
                            + ",displaysettings.webroominvmode"
                            + ",displaysettings.paymentgateway"
                            + ",displaysettings.regbyid"
                            + ",displaysettings.regdate"
                            + ",displaysettings.zip";

    private static DisplaysettingsManager singleton = new DisplaysettingsManager();

    /**
     * Get the DisplaysettingsManager singleton.
     *
     * @return DisplaysettingsManager 
     */
    synchronized public static DisplaysettingsManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own DisplaysettingsManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(DisplaysettingsManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new DisplaysettingsBean instance.
     *
     * @return the new DisplaysettingsBean 
     */
    public DisplaysettingsBean createDisplaysettingsBean()
    {
        return new DisplaysettingsBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a DisplaysettingsBean from the displaysettings using its key fields.
     *
     * @return a unique DisplaysettingsBean 
     */
    //12
    public DisplaysettingsBean loadByPrimaryKey(Integer displaysettingsid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM displaysettings WHERE displaysettings.displaysettingsid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, displaysettingsid);
            DisplaysettingsBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer displaysettingsid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from displaysettings WHERE displaysettings.displaysettingsid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, displaysettingsid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads DisplaysettingsBean array from the displaysettings table using its idtypeid field.
     *
     * @return an array of DisplaysettingsBean 
     */
    // LOAD BY IMPORTED KEY
    public DisplaysettingsBean[] loadByIdtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM displaysettings WHERE idtypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the displaysettings table by idtypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByIdtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM displaysettings WHERE idtypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads DisplaysettingsBean array from the displaysettings table using its paymentmethodid field.
     *
     * @return an array of DisplaysettingsBean 
     */
    // LOAD BY IMPORTED KEY
    public DisplaysettingsBean[] loadByPaymentmethodid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM displaysettings WHERE paymentmethodid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the displaysettings table by paymentmethodid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByPaymentmethodid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM displaysettings WHERE paymentmethodid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads DisplaysettingsBean array from the displaysettings table using its regbyid field.
     *
     * @return an array of DisplaysettingsBean 
     */
    // LOAD BY IMPORTED KEY
    public DisplaysettingsBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM displaysettings WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the displaysettings table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM displaysettings WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads DisplaysettingsBean array from the displaysettings table using its reservationtypeid field.
     *
     * @return an array of DisplaysettingsBean 
     */
    // LOAD BY IMPORTED KEY
    public DisplaysettingsBean[] loadByReservationtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM displaysettings WHERE reservationtypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the displaysettings table by reservationtypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByReservationtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM displaysettings WHERE reservationtypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads DisplaysettingsBean array from the displaysettings table using its salutationid field.
     *
     * @return an array of DisplaysettingsBean 
     */
    // LOAD BY IMPORTED KEY
    public DisplaysettingsBean[] loadBySalutationid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM displaysettings WHERE salutationid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the displaysettings table by salutationid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySalutationid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM displaysettings WHERE salutationid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the IdtypeBean object from the displaysettings.idtypeid field.
     *
     * @param pObject the DisplaysettingsBean 
     * @return the associated IdtypeBean pObject
     */
    // GET IMPORTED
    public IdtypeBean getIdtypeBean(DisplaysettingsBean pObject) throws SQLException
    {
        IdtypeBean other = IdtypeManager.getInstance().createIdtypeBean();
        other.setIdtypeid(pObject.getIdtypeid());
        return IdtypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the DisplaysettingsBean object to the IdtypeBean object.
     *
     * @param pObject the DisplaysettingsBean object to use
     * @param pObjectToBeSet the IdtypeBean object to associate to the DisplaysettingsBean 
     * @return the associated IdtypeBean pObject
     */
    // SET IMPORTED
    public DisplaysettingsBean setIdtypeBean(DisplaysettingsBean pObject,IdtypeBean pObjectToBeSet)
    {
        pObject.setIdtypeid(pObjectToBeSet.getIdtypeid());
        return pObject;
    }

    /**
     * Retrieves the PaymentmethodBean object from the displaysettings.paymentmethodid field.
     *
     * @param pObject the DisplaysettingsBean 
     * @return the associated PaymentmethodBean pObject
     */
    // GET IMPORTED
    public PaymentmethodBean getPaymentmethodBean(DisplaysettingsBean pObject) throws SQLException
    {
        PaymentmethodBean other = PaymentmethodManager.getInstance().createPaymentmethodBean();
        other.setPaymentmethodid(pObject.getPaymentmethodid());
        return PaymentmethodManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the DisplaysettingsBean object to the PaymentmethodBean object.
     *
     * @param pObject the DisplaysettingsBean object to use
     * @param pObjectToBeSet the PaymentmethodBean object to associate to the DisplaysettingsBean 
     * @return the associated PaymentmethodBean pObject
     */
    // SET IMPORTED
    public DisplaysettingsBean setPaymentmethodBean(DisplaysettingsBean pObject,PaymentmethodBean pObjectToBeSet)
    {
        pObject.setPaymentmethodid(pObjectToBeSet.getPaymentmethodid());
        return pObject;
    }

    /**
     * Retrieves the PersonnelBean object from the displaysettings.personnelid field.
     *
     * @param pObject the DisplaysettingsBean 
     * @return the associated PersonnelBean pObject
     */
    // GET IMPORTED
    public PersonnelBean getPersonnelBean(DisplaysettingsBean pObject) throws SQLException
    {
        PersonnelBean other = PersonnelManager.getInstance().createPersonnelBean();
        other.setPersonnelid(pObject.getRegbyid());
        return PersonnelManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the DisplaysettingsBean object to the PersonnelBean object.
     *
     * @param pObject the DisplaysettingsBean object to use
     * @param pObjectToBeSet the PersonnelBean object to associate to the DisplaysettingsBean 
     * @return the associated PersonnelBean pObject
     */
    // SET IMPORTED
    public DisplaysettingsBean setPersonnelBean(DisplaysettingsBean pObject,PersonnelBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonnelid());
        return pObject;
    }

    /**
     * Retrieves the ReservationtypeBean object from the displaysettings.reservationtypeid field.
     *
     * @param pObject the DisplaysettingsBean 
     * @return the associated ReservationtypeBean pObject
     */
    // GET IMPORTED
    public ReservationtypeBean getReservationtypeBean(DisplaysettingsBean pObject) throws SQLException
    {
        ReservationtypeBean other = ReservationtypeManager.getInstance().createReservationtypeBean();
        other.setReservationtypeid(pObject.getReservationtypeid());
        return ReservationtypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the DisplaysettingsBean object to the ReservationtypeBean object.
     *
     * @param pObject the DisplaysettingsBean object to use
     * @param pObjectToBeSet the ReservationtypeBean object to associate to the DisplaysettingsBean 
     * @return the associated ReservationtypeBean pObject
     */
    // SET IMPORTED
    public DisplaysettingsBean setReservationtypeBean(DisplaysettingsBean pObject,ReservationtypeBean pObjectToBeSet)
    {
        pObject.setReservationtypeid(pObjectToBeSet.getReservationtypeid());
        return pObject;
    }

    /**
     * Retrieves the SalutationBean object from the displaysettings.salutationid field.
     *
     * @param pObject the DisplaysettingsBean 
     * @return the associated SalutationBean pObject
     */
    // GET IMPORTED
    public SalutationBean getSalutationBean(DisplaysettingsBean pObject) throws SQLException
    {
        SalutationBean other = SalutationManager.getInstance().createSalutationBean();
        other.setSalutationid(pObject.getSalutationid());
        return SalutationManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the DisplaysettingsBean object to the SalutationBean object.
     *
     * @param pObject the DisplaysettingsBean object to use
     * @param pObjectToBeSet the SalutationBean object to associate to the DisplaysettingsBean 
     * @return the associated SalutationBean pObject
     */
    // SET IMPORTED
    public DisplaysettingsBean setSalutationBean(DisplaysettingsBean pObject,SalutationBean pObjectToBeSet)
    {
        pObject.setSalutationid(pObjectToBeSet.getSalutationid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from displaysettings.
     *
     * @return an array of DisplaysettingsManager pObject
     */
    //38
    public DisplaysettingsBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM displaysettings",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of DisplaysettingsBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting DisplaysettingsBean table 
     */
    //49
    public DisplaysettingsBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of DisplaysettingsBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting DisplaysettingsBean table 
     */
    //51
    public DisplaysettingsBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from displaysettings " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from displaysettings ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (DisplaysettingsBean[])v.toArray(new DisplaysettingsBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from displaysettings table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the displaysettings table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM displaysettings " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the DisplaysettingsBean pObject into the database.
     *
     * @param pObject the DisplaysettingsBean pObject to be saved
     */
    //100
    public DisplaysettingsBean save(DisplaysettingsBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isDisplaysettingsidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('displaysettingsid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setDisplaysettingsid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into displaysettings (");
    
                if (pObject.isDisplaysettingsidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("displaysettingsid");
                    _dirtyCount++;
                }

                if (pObject.isTimeformatModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("timeformat");
                    _dirtyCount++;
                }

                if (pObject.isDateformatModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("dateformat");
                    _dirtyCount++;
                }

                if (pObject.isArrdepformatModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("arrdepformat");
                    _dirtyCount++;
                }

                if (pObject.isTimezomeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("timezome");
                    _dirtyCount++;
                }

                if (pObject.isIdtypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("idtypeid");
                    _dirtyCount++;
                }

                if (pObject.isReservationtypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("reservationtypeid");
                    _dirtyCount++;
                }

                if (pObject.isRoundtypeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roundtype");
                    _dirtyCount++;
                }

                if (pObject.isSalutationidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("salutationid");
                    _dirtyCount++;
                }

                if (pObject.isBilltoModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("billto");
                    _dirtyCount++;
                }

                if (pObject.isPaymentmodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("paymentmode");
                    _dirtyCount++;
                }

                if (pObject.isPaymentmethodidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("paymentmethodid");
                    _dirtyCount++;
                }

                if (pObject.isWebrateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("webrate");
                    _dirtyCount++;
                }

                if (pObject.isWebroominvmodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("webroominvmode");
                    _dirtyCount++;
                }

                if (pObject.isPaymentgatewayModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("paymentgateway");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isZipModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("zip");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isDisplaysettingsidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDisplaysettingsid());
                }
    
                if (pObject.isTimeformatModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTimeformat());
                }
    
                if (pObject.isDateformatModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDateformat());
                }
    
                if (pObject.isArrdepformatModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getArrdepformat());
                }
    
                if (pObject.isTimezomeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTimezome());
                }
    
                if (pObject.isIdtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getIdtypeid());
                }
    
                if (pObject.isReservationtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationtypeid());
                }
    
                if (pObject.isRoundtypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoundtype());
                }
    
                if (pObject.isSalutationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
                }
    
                if (pObject.isBilltoModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getBillto());
                }
    
                if (pObject.isPaymentmodeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmode());
                }
    
                if (pObject.isPaymentmethodidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
                }
    
                if (pObject.isWebrateModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getWebrate());
                }
    
                if (pObject.isWebroominvmodeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getWebroominvmode());
                }
    
                if (pObject.isPaymentgatewayModified()) {
                    ps.setString(++_dirtyCount, pObject.getPaymentgateway());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isZipModified()) {
                    ps.setString(++_dirtyCount, pObject.getZip());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE displaysettings SET ");
                boolean useComma=false;

                if (pObject.isDisplaysettingsidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("displaysettingsid").append("=?");
                }

                if (pObject.isTimeformatModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("timeformat").append("=?");
                }

                if (pObject.isDateformatModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("dateformat").append("=?");
                }

                if (pObject.isArrdepformatModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("arrdepformat").append("=?");
                }

                if (pObject.isTimezomeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("timezome").append("=?");
                }

                if (pObject.isIdtypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("idtypeid").append("=?");
                }

                if (pObject.isReservationtypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("reservationtypeid").append("=?");
                }

                if (pObject.isRoundtypeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roundtype").append("=?");
                }

                if (pObject.isSalutationidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("salutationid").append("=?");
                }

                if (pObject.isBilltoModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("billto").append("=?");
                }

                if (pObject.isPaymentmodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("paymentmode").append("=?");
                }

                if (pObject.isPaymentmethodidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("paymentmethodid").append("=?");
                }

                if (pObject.isWebrateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("webrate").append("=?");
                }

                if (pObject.isWebroominvmodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("webroominvmode").append("=?");
                }

                if (pObject.isPaymentgatewayModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("paymentgateway").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isZipModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("zip").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("displaysettings.displaysettingsid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isDisplaysettingsidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getDisplaysettingsid());
                }

                if (pObject.isTimeformatModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getTimeformat());
                }

                if (pObject.isDateformatModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getDateformat());
                }

                if (pObject.isArrdepformatModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getArrdepformat());
                }

                if (pObject.isTimezomeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getTimezome());
                }

                if (pObject.isIdtypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getIdtypeid());
                }

                if (pObject.isReservationtypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationtypeid());
                }

                if (pObject.isRoundtypeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRoundtype());
                }

                if (pObject.isSalutationidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
                }

                if (pObject.isBilltoModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getBillto());
                }

                if (pObject.isPaymentmodeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmode());
                }

                if (pObject.isPaymentmethodidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
                }

                if (pObject.isWebrateModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getWebrate());
                }

                if (pObject.isWebroominvmodeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getWebroominvmode());
                }

                if (pObject.isPaymentgatewayModified()) {
                      ps.setString(++_dirtyCount, pObject.getPaymentgateway());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isZipModified()) {
                      ps.setString(++_dirtyCount, pObject.getZip());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getDisplaysettingsid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of DisplaysettingsBean pObjects into the database.
     *
     * @param pObjects the DisplaysettingsBean pObject table to be saved
     * @return the saved DisplaysettingsBean array.
     */
    //65
    public DisplaysettingsBean[] save(DisplaysettingsBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique DisplaysettingsBean pObject from a template one giving a c
     *
     * @param pObject the DisplaysettingsBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public DisplaysettingsBean loadUniqueUsingTemplate(DisplaysettingsBean pObject) throws SQLException
    {
         DisplaysettingsBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of DisplaysettingsBean from a template one.
     *
     * @param pObject the DisplaysettingsBean template to look for
     * @return all the DisplaysettingsBean matching the template
     */
    //88
    public DisplaysettingsBean[] loadUsingTemplate(DisplaysettingsBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from displaysettings WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isDisplaysettingsidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("displaysettingsid= ?");
             }
    
             if (pObject.isTimeformatModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("timeformat= ?");
             }
    
             if (pObject.isDateformatModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("dateformat= ?");
             }
    
             if (pObject.isArrdepformatModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("arrdepformat= ?");
             }
    
             if (pObject.isTimezomeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("timezome= ?");
             }
    
             if (pObject.isIdtypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("idtypeid= ?");
             }
    
             if (pObject.isReservationtypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationtypeid= ?");
             }
    
             if (pObject.isRoundtypeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roundtype= ?");
             }
    
             if (pObject.isSalutationidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("salutationid= ?");
             }
    
             if (pObject.isBilltoModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("billto= ?");
             }
    
             if (pObject.isPaymentmodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentmode= ?");
             }
    
             if (pObject.isPaymentmethodidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentmethodid= ?");
             }
    
             if (pObject.isWebrateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("webrate= ?");
             }
    
             if (pObject.isWebroominvmodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("webroominvmode= ?");
             }
    
             if (pObject.isPaymentgatewayModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentgateway= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isZipModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("zip= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isDisplaysettingsidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getDisplaysettingsid());
             }
    
             if (pObject.isTimeformatModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getTimeformat());
             }
    
             if (pObject.isDateformatModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getDateformat());
             }
    
             if (pObject.isArrdepformatModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getArrdepformat());
             }
    
             if (pObject.isTimezomeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getTimezome());
             }
    
             if (pObject.isIdtypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getIdtypeid());
             }
    
             if (pObject.isReservationtypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationtypeid());
             }
    
             if (pObject.isRoundtypeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRoundtype());
             }
    
             if (pObject.isSalutationidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
             }
    
             if (pObject.isBilltoModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getBillto());
             }
    
             if (pObject.isPaymentmodeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmode());
             }
    
             if (pObject.isPaymentmethodidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
             }
    
             if (pObject.isWebrateModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getWebrate());
             }
    
             if (pObject.isWebroominvmodeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getWebroominvmode());
             }
    
             if (pObject.isPaymentgatewayModified()) {
                 ps.setString(++_dirtyCount, pObject.getPaymentgateway());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isZipModified()) {
                 ps.setString(++_dirtyCount, pObject.getZip());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a DisplaysettingsBean template.
     *
     * @param pObject the DisplaysettingsBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(DisplaysettingsBean pObject) throws SQLException
    {
        if (pObject.isDisplaysettingsidInitialized())
            return deleteByPrimaryKey(pObject.getDisplaysettingsid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM displaysettings WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isDisplaysettingsidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("displaysettingsid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTimeformatInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("timeformat").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDateformatInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("dateformat").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isArrdepformatInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("arrdepformat").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTimezomeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("timezome").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isIdtypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("idtypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isReservationtypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("reservationtypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRoundtypeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roundtype").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSalutationidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("salutationid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBilltoInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("billto").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPaymentmodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("paymentmode").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPaymentmethodidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("paymentmethodid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isWebrateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("webrate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isWebroominvmodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("webroominvmode").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPaymentgatewayInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("paymentgateway").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isZipInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("zip").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isDisplaysettingsidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getDisplaysettingsid());
            }
    
            if (pObject.isTimeformatInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTimeformat());
            }
    
            if (pObject.isDateformatInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getDateformat());
            }
    
            if (pObject.isArrdepformatInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getArrdepformat());
            }
    
            if (pObject.isTimezomeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTimezome());
            }
    
            if (pObject.isIdtypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getIdtypeid());
            }
    
            if (pObject.isReservationtypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationtypeid());
            }
    
            if (pObject.isRoundtypeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRoundtype());
            }
    
            if (pObject.isSalutationidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
            }
    
            if (pObject.isBilltoInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getBillto());
            }
    
            if (pObject.isPaymentmodeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmode());
            }
    
            if (pObject.isPaymentmethodidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
            }
    
            if (pObject.isWebrateInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getWebrate());
            }
    
            if (pObject.isWebroominvmodeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getWebroominvmode());
            }
    
            if (pObject.isPaymentgatewayInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPaymentgateway());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isZipInitialized()) {
                ps.setString(++_dirtyCount, pObject.getZip());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table displaysettings.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table displaysettings with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from displaysettings " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table displaysettings with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific DisplaysettingsBean pObject given a c
     *
     * @param pObject the DisplaysettingsBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(DisplaysettingsBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from displaysettings WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isDisplaysettingsidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("displaysettingsid= ?");
                }
    
                if (pObject.isTimeformatModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("timeformat= ?");
                }
    
                if (pObject.isDateformatModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("dateformat= ?");
                }
    
                if (pObject.isArrdepformatModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("arrdepformat= ?");
                }
    
                if (pObject.isTimezomeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("timezome= ?");
                }
    
                if (pObject.isIdtypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("idtypeid= ?");
                }
    
                if (pObject.isReservationtypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationtypeid= ?");
                }
    
                if (pObject.isRoundtypeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roundtype= ?");
                }
    
                if (pObject.isSalutationidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("salutationid= ?");
                }
    
                if (pObject.isBilltoModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("billto= ?");
                }
    
                if (pObject.isPaymentmodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentmode= ?");
                }
    
                if (pObject.isPaymentmethodidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentmethodid= ?");
                }
    
                if (pObject.isWebrateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("webrate= ?");
                }
    
                if (pObject.isWebroominvmodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("webroominvmode= ?");
                }
    
                if (pObject.isPaymentgatewayModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentgateway= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isZipModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("zip= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isDisplaysettingsidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDisplaysettingsid());
                }
    
                if (pObject.isTimeformatModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTimeformat());
                }
    
                if (pObject.isDateformatModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDateformat());
                }
    
                if (pObject.isArrdepformatModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getArrdepformat());
                }
    
                if (pObject.isTimezomeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTimezome());
                }
    
                if (pObject.isIdtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getIdtypeid());
                }
    
                if (pObject.isReservationtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationtypeid());
                }
    
                if (pObject.isRoundtypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoundtype());
                }
    
                if (pObject.isSalutationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSalutationid());
                }
    
                if (pObject.isBilltoModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getBillto());
                }
    
                if (pObject.isPaymentmodeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmode());
                }
    
                if (pObject.isPaymentmethodidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
                }
    
                if (pObject.isWebrateModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getWebrate());
                }
    
                if (pObject.isWebroominvmodeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getWebroominvmode());
                }
    
                if (pObject.isPaymentgatewayModified()) {
                    ps.setString(++_dirtyCount, pObject.getPaymentgateway());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isZipModified()) {
                    ps.setString(++_dirtyCount, pObject.getZip());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the displaysettings on a DisplaysettingsBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting DisplaysettingsBean pObject
     */
    //72
    public DisplaysettingsBean decodeRow(ResultSet rs) throws SQLException
    {
        DisplaysettingsBean pObject = createDisplaysettingsBean();
        pObject.setDisplaysettingsid(Manager.getInteger(rs, 1));
        pObject.setTimeformat(Manager.getInteger(rs, 2));
        pObject.setDateformat(Manager.getInteger(rs, 3));
        pObject.setArrdepformat(Manager.getInteger(rs, 4));
        pObject.setTimezome(Manager.getInteger(rs, 5));
        pObject.setIdtypeid(Manager.getInteger(rs, 6));
        pObject.setReservationtypeid(Manager.getInteger(rs, 7));
        pObject.setRoundtype(Manager.getInteger(rs, 8));
        pObject.setSalutationid(Manager.getInteger(rs, 9));
        pObject.setBillto(Manager.getInteger(rs, 10));
        pObject.setPaymentmode(Manager.getInteger(rs, 11));
        pObject.setPaymentmethodid(Manager.getInteger(rs, 12));
        pObject.setWebrate(Manager.getInteger(rs, 13));
        pObject.setWebroominvmode(Manager.getInteger(rs, 14));
        pObject.setPaymentgateway(rs.getString(15));
        pObject.setRegbyid(Manager.getInteger(rs, 16));
        pObject.setRegdate(rs.getTimestamp(17));
        pObject.setZip(rs.getString(18));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the displaysettings table on a DisplaysettingsBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting DisplaysettingsBean pObject
     */
    //73
    public DisplaysettingsBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        DisplaysettingsBean pObject = createDisplaysettingsBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_DISPLAYSETTINGSID:
                    ++pos;
                    pObject.setDisplaysettingsid(Manager.getInteger(rs, pos));
                    break;
                case ID_TIMEFORMAT:
                    ++pos;
                    pObject.setTimeformat(Manager.getInteger(rs, pos));
                    break;
                case ID_DATEFORMAT:
                    ++pos;
                    pObject.setDateformat(Manager.getInteger(rs, pos));
                    break;
                case ID_ARRDEPFORMAT:
                    ++pos;
                    pObject.setArrdepformat(Manager.getInteger(rs, pos));
                    break;
                case ID_TIMEZOME:
                    ++pos;
                    pObject.setTimezome(Manager.getInteger(rs, pos));
                    break;
                case ID_IDTYPEID:
                    ++pos;
                    pObject.setIdtypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_RESERVATIONTYPEID:
                    ++pos;
                    pObject.setReservationtypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_ROUNDTYPE:
                    ++pos;
                    pObject.setRoundtype(Manager.getInteger(rs, pos));
                    break;
                case ID_SALUTATIONID:
                    ++pos;
                    pObject.setSalutationid(Manager.getInteger(rs, pos));
                    break;
                case ID_BILLTO:
                    ++pos;
                    pObject.setBillto(Manager.getInteger(rs, pos));
                    break;
                case ID_PAYMENTMODE:
                    ++pos;
                    pObject.setPaymentmode(Manager.getInteger(rs, pos));
                    break;
                case ID_PAYMENTMETHODID:
                    ++pos;
                    pObject.setPaymentmethodid(Manager.getInteger(rs, pos));
                    break;
                case ID_WEBRATE:
                    ++pos;
                    pObject.setWebrate(Manager.getInteger(rs, pos));
                    break;
                case ID_WEBROOMINVMODE:
                    ++pos;
                    pObject.setWebroominvmode(Manager.getInteger(rs, pos));
                    break;
                case ID_PAYMENTGATEWAY:
                    ++pos;
                    pObject.setPaymentgateway(rs.getString(pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_ZIP:
                    ++pos;
                    pObject.setZip(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of DisplaysettingsBean 
     */
    //41
    public DisplaysettingsBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of DisplaysettingsBean 
     */
    public DisplaysettingsBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (DisplaysettingsBean[])v.toArray(new DisplaysettingsBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private DisplaysettingsListener listener = null;

    /**
     * Registers a unique DisplaysettingsListener listener.
     */
    //66.5
    public void registerListener(DisplaysettingsListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the DisplaysettingsBean pObject.
     *
     * @param pObject the DisplaysettingsBean pObject to be saved
     */
    //67
    void beforeInsert(DisplaysettingsBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the DisplaysettingsBean pObject.
     *
     * @param pObject the DisplaysettingsBean pObject to be saved
     */
    //68
    void afterInsert(DisplaysettingsBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the DisplaysettingsBean pObject.
     *
     * @param pObject the DisplaysettingsBean pObject to be updated
     */
    //69
    void beforeUpdate(DisplaysettingsBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the DisplaysettingsBean pObject.
     *
     * @param pObject the DisplaysettingsBean pObject to be updated
     */
    //70
    void afterUpdate(DisplaysettingsBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
