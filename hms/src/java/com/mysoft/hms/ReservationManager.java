// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 


/**
 * Handles database calls for the reservation table.
 */
public class ReservationManager
// extends+ 

// extends- 

{

    /**
     * Column reservationid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_RESERVATIONID = 0;
    public static final int TYPE_RESERVATIONID = Types.BIGINT;
    public static final String NAME_RESERVATIONID = "reservationid";

    /**
     * Column arraivaldate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_ARRAIVALDATE = 1;
    public static final int TYPE_ARRAIVALDATE = Types.TIMESTAMP;
    public static final String NAME_ARRAIVALDATE = "arraivaldate";

    /**
     * Column departuredate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_DEPARTUREDATE = 2;
    public static final int TYPE_DEPARTUREDATE = Types.TIMESTAMP;
    public static final String NAME_DEPARTUREDATE = "departuredate";

    /**
     * Column reservationtypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_RESERVATIONTYPEID = 3;
    public static final int TYPE_RESERVATIONTYPEID = Types.INTEGER;
    public static final String NAME_RESERVATIONTYPEID = "reservationtypeid";

    /**
     * Column ratetype of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_RATETYPE = 4;
    public static final int TYPE_RATETYPE = Types.INTEGER;
    public static final String NAME_RATETYPE = "ratetype";

    /**
     * Column manualrate of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_MANUALRATE = 5;
    public static final int TYPE_MANUALRATE = Types.DOUBLE;
    public static final String NAME_MANUALRATE = "manualrate";

    /**
     * Column contractcontragentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTCONTRAGENTID = 6;
    public static final int TYPE_CONTRACTCONTRAGENTID = Types.BIGINT;
    public static final String NAME_CONTRACTCONTRAGENTID = "contractcontragentid";

    /**
     * Column billto of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_BILLTO = 7;
    public static final int TYPE_BILLTO = Types.INTEGER;
    public static final String NAME_BILLTO = "billto";

    /**
     * Column taxexemptionreason of type Types.VARCHAR mapped to String.
     */
    public static final int ID_TAXEXEMPTIONREASON = 8;
    public static final int TYPE_TAXEXEMPTIONREASON = Types.VARCHAR;
    public static final String NAME_TAXEXEMPTIONREASON = "taxexemptionreason";

    /**
     * Column paymentmode of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_PAYMENTMODE = 9;
    public static final int TYPE_PAYMENTMODE = Types.INTEGER;
    public static final String NAME_PAYMENTMODE = "paymentmode";

    /**
     * Column paymentmethodid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_PAYMENTMETHODID = 10;
    public static final int TYPE_PAYMENTMETHODID = Types.INTEGER;
    public static final String NAME_PAYMENTMETHODID = "paymentmethodid";

    /**
     * Column paymentcontragentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PAYMENTCONTRAGENTID = 11;
    public static final int TYPE_PAYMENTCONTRAGENTID = Types.BIGINT;
    public static final String NAME_PAYMENTCONTRAGENTID = "paymentcontragentid";

    /**
     * Column advancepaymentdate of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_ADVANCEPAYMENTDATE = 12;
    public static final int TYPE_ADVANCEPAYMENTDATE = Types.DATE;
    public static final String NAME_ADVANCEPAYMENTDATE = "advancepaymentdate";

    /**
     * Column advancepaymentamount of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_ADVANCEPAYMENTAMOUNT = 13;
    public static final int TYPE_ADVANCEPAYMENTAMOUNT = Types.DOUBLE;
    public static final String NAME_ADVANCEPAYMENTAMOUNT = "advancepaymentamount";

    /**
     * Column companyid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_COMPANYID = 14;
    public static final int TYPE_COMPANYID = Types.BIGINT;
    public static final String NAME_COMPANYID = "companyid";

    /**
     * Column marketid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_MARKETID = 15;
    public static final int TYPE_MARKETID = Types.INTEGER;
    public static final String NAME_MARKETID = "marketid";

    /**
     * Column bsourceid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_BSOURCEID = 16;
    public static final int TYPE_BSOURCEID = Types.INTEGER;
    public static final String NAME_BSOURCEID = "bsourceid";

    /**
     * Column taid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_TAID = 17;
    public static final int TYPE_TAID = Types.BIGINT;
    public static final String NAME_TAID = "taid";

    /**
     * Column commissionplan of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_COMMISSIONPLAN = 18;
    public static final int TYPE_COMMISSIONPLAN = Types.INTEGER;
    public static final String NAME_COMMISSIONPLAN = "commissionplan";

    /**
     * Column commissionvalue of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_COMMISSIONVALUE = 19;
    public static final int TYPE_COMMISSIONVALUE = Types.DOUBLE;
    public static final String NAME_COMMISSIONVALUE = "commissionvalue";

    /**
     * Column voucher of type Types.VARCHAR mapped to String.
     */
    public static final int ID_VOUCHER = 20;
    public static final int TYPE_VOUCHER = Types.VARCHAR;
    public static final String NAME_VOUCHER = "voucher";

    /**
     * Column discountid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_DISCOUNTID = 21;
    public static final int TYPE_DISCOUNTID = Types.INTEGER;
    public static final String NAME_DISCOUNTID = "discountid";

    /**
     * Column postingtype of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_POSTINGTYPE = 22;
    public static final int TYPE_POSTINGTYPE = Types.INTEGER;
    public static final String NAME_POSTINGTYPE = "postingtype";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 23;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 24;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column postingvalueevery of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_POSTINGVALUEEVERY = 25;
    public static final int TYPE_POSTINGVALUEEVERY = Types.DOUBLE;
    public static final String NAME_POSTINGVALUEEVERY = "postingvalueevery";

    /**
     * Column num of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NUM = 26;
    public static final int TYPE_NUM = Types.VARCHAR;
    public static final String NAME_NUM = "num";

    /**
     * Column nomanualtax of type Types.BIT mapped to Boolean.
     */
    public static final int ID_NOMANUALTAX = 27;
    public static final int TYPE_NOMANUALTAX = Types.BIT;
    public static final String NAME_NOMANUALTAX = "nomanualtax";

    /**
     * Column notax of type Types.BIT mapped to Boolean.
     */
    public static final int ID_NOTAX = 28;
    public static final int TYPE_NOTAX = Types.BIT;
    public static final String NAME_NOTAX = "notax";

    /**
     * Column discountnights of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_DISCOUNTNIGHTS = 29;
    public static final int TYPE_DISCOUNTNIGHTS = Types.INTEGER;
    public static final String NAME_DISCOUNTNIGHTS = "discountnights";

    /**
     * Column status of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_STATUS = 30;
    public static final int TYPE_STATUS = Types.INTEGER;
    public static final String NAME_STATUS = "status";


    private static final String TABLE_NAME = "reservation";

    /**
     * Create an array of type string containing all the fields of the reservation table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "reservation.reservationid"
        ,"reservation.arraivaldate"
        ,"reservation.departuredate"
        ,"reservation.reservationtypeid"
        ,"reservation.ratetype"
        ,"reservation.manualrate"
        ,"reservation.contractcontragentid"
        ,"reservation.billto"
        ,"reservation.taxexemptionreason"
        ,"reservation.paymentmode"
        ,"reservation.paymentmethodid"
        ,"reservation.paymentcontragentid"
        ,"reservation.advancepaymentdate"
        ,"reservation.advancepaymentamount"
        ,"reservation.companyid"
        ,"reservation.marketid"
        ,"reservation.bsourceid"
        ,"reservation.taid"
        ,"reservation.commissionplan"
        ,"reservation.commissionvalue"
        ,"reservation.voucher"
        ,"reservation.discountid"
        ,"reservation.postingtype"
        ,"reservation.regbyid"
        ,"reservation.regdate"
        ,"reservation.postingvalueevery"
        ,"reservation.num"
        ,"reservation.nomanualtax"
        ,"reservation.notax"
        ,"reservation.discountnights"
        ,"reservation.status"
    };

    /**
     * Field that contains the comma separated fields of the reservation table.
     */
    private static final String ALL_FIELDS = "reservation.reservationid"
                            + ",reservation.arraivaldate"
                            + ",reservation.departuredate"
                            + ",reservation.reservationtypeid"
                            + ",reservation.ratetype"
                            + ",reservation.manualrate"
                            + ",reservation.contractcontragentid"
                            + ",reservation.billto"
                            + ",reservation.taxexemptionreason"
                            + ",reservation.paymentmode"
                            + ",reservation.paymentmethodid"
                            + ",reservation.paymentcontragentid"
                            + ",reservation.advancepaymentdate"
                            + ",reservation.advancepaymentamount"
                            + ",reservation.companyid"
                            + ",reservation.marketid"
                            + ",reservation.bsourceid"
                            + ",reservation.taid"
                            + ",reservation.commissionplan"
                            + ",reservation.commissionvalue"
                            + ",reservation.voucher"
                            + ",reservation.discountid"
                            + ",reservation.postingtype"
                            + ",reservation.regbyid"
                            + ",reservation.regdate"
                            + ",reservation.postingvalueevery"
                            + ",reservation.num"
                            + ",reservation.nomanualtax"
                            + ",reservation.notax"
                            + ",reservation.discountnights"
                            + ",reservation.status";

    private static ReservationManager singleton = new ReservationManager();

    /**
     * Get the ReservationManager singleton.
     *
     * @return ReservationManager 
     */
    synchronized public static ReservationManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own ReservationManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(ReservationManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new ReservationBean instance.
     *
     * @return the new ReservationBean 
     */
    public ReservationBean createReservationBean()
    {
        return new ReservationBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ReservationBean from the reservation using its key fields.
     *
     * @return a unique ReservationBean 
     */
    //12
    public ReservationBean loadByPrimaryKey(Long reservationid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservation WHERE reservation.reservationid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, reservationid);
            ReservationBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long reservationid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from reservation WHERE reservation.reservationid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, reservationid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads ReservationBean array from the reservation table using its bsourceid field.
     *
     * @return an array of ReservationBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationBean[] loadByBsourceid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservation WHERE bsourceid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservation table by bsourceid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByBsourceid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservation WHERE bsourceid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ReservationBean array from the reservation table using its contractcontragentid field.
     *
     * @return an array of ReservationBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationBean[] loadByContractcontragentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservation WHERE contractcontragentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservation table by contractcontragentid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByContractcontragentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservation WHERE contractcontragentid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ReservationBean array from the reservation table using its paymentcontragentid field.
     *
     * @return an array of ReservationBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationBean[] loadByPaymentcontragentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservation WHERE paymentcontragentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservation table by paymentcontragentid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByPaymentcontragentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservation WHERE paymentcontragentid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ReservationBean array from the reservation table using its companyid field.
     *
     * @return an array of ReservationBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationBean[] loadByCompanyid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservation WHERE companyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservation table by companyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByCompanyid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservation WHERE companyid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ReservationBean array from the reservation table using its taid field.
     *
     * @return an array of ReservationBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationBean[] loadByTaid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservation WHERE taid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservation table by taid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByTaid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservation WHERE taid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ReservationBean array from the reservation table using its discountid field.
     *
     * @return an array of ReservationBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationBean[] loadByDiscountid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservation WHERE discountid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservation table by discountid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByDiscountid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservation WHERE discountid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ReservationBean array from the reservation table using its marketid field.
     *
     * @return an array of ReservationBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationBean[] loadByMarketid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservation WHERE marketid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservation table by marketid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByMarketid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservation WHERE marketid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ReservationBean array from the reservation table using its paymentmethodid field.
     *
     * @return an array of ReservationBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationBean[] loadByPaymentmethodid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservation WHERE paymentmethodid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservation table by paymentmethodid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByPaymentmethodid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservation WHERE paymentmethodid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ReservationBean array from the reservation table using its regbyid field.
     *
     * @return an array of ReservationBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservation WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservation table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservation WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ReservationBean array from the reservation table using its reservationtypeid field.
     *
     * @return an array of ReservationBean 
     */
    // LOAD BY IMPORTED KEY
    public ReservationBean[] loadByReservationtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservation WHERE reservationtypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reservation table by reservationtypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByReservationtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reservation WHERE reservationtypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the BsourceBean object from the reservation.bsourceid field.
     *
     * @param pObject the ReservationBean 
     * @return the associated BsourceBean pObject
     */
    // GET IMPORTED
    public BsourceBean getBsourceBean(ReservationBean pObject) throws SQLException
    {
        BsourceBean other = BsourceManager.getInstance().createBsourceBean();
        other.setBsourceid(pObject.getBsourceid());
        return BsourceManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ReservationBean object to the BsourceBean object.
     *
     * @param pObject the ReservationBean object to use
     * @param pObjectToBeSet the BsourceBean object to associate to the ReservationBean 
     * @return the associated BsourceBean pObject
     */
    // SET IMPORTED
    public ReservationBean setBsourceBean(ReservationBean pObject,BsourceBean pObjectToBeSet)
    {
        pObject.setBsourceid(pObjectToBeSet.getBsourceid());
        return pObject;
    }

    /**
     * Retrieves the ContragentBean object from the reservation.contragentid field.
     *
     * @param pObject the ReservationBean 
     * @return the associated ContragentBean pObject
     */
    // GET IMPORTED
    public ContragentBean getContragentBean(ReservationBean pObject) throws SQLException
    {
        ContragentBean other = ContragentManager.getInstance().createContragentBean();
        other.setContragentid(pObject.getContractcontragentid());
        return ContragentManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ReservationBean object to the ContragentBean object.
     *
     * @param pObject the ReservationBean object to use
     * @param pObjectToBeSet the ContragentBean object to associate to the ReservationBean 
     * @return the associated ContragentBean pObject
     */
    // SET IMPORTED
    public ReservationBean setContragentBean(ReservationBean pObject,ContragentBean pObjectToBeSet)
    {
        pObject.setContractcontragentid(pObjectToBeSet.getContragentid());
        return pObject;
    }

    /**
     * Retrieves the DiscountBean object from the reservation.discountid field.
     *
     * @param pObject the ReservationBean 
     * @return the associated DiscountBean pObject
     */
    // GET IMPORTED
    public DiscountBean getDiscountBean(ReservationBean pObject) throws SQLException
    {
        DiscountBean other = DiscountManager.getInstance().createDiscountBean();
        other.setDiscountid(pObject.getDiscountid());
        return DiscountManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ReservationBean object to the DiscountBean object.
     *
     * @param pObject the ReservationBean object to use
     * @param pObjectToBeSet the DiscountBean object to associate to the ReservationBean 
     * @return the associated DiscountBean pObject
     */
    // SET IMPORTED
    public ReservationBean setDiscountBean(ReservationBean pObject,DiscountBean pObjectToBeSet)
    {
        pObject.setDiscountid(pObjectToBeSet.getDiscountid());
        return pObject;
    }

    /**
     * Retrieves the MarketBean object from the reservation.marketid field.
     *
     * @param pObject the ReservationBean 
     * @return the associated MarketBean pObject
     */
    // GET IMPORTED
    public MarketBean getMarketBean(ReservationBean pObject) throws SQLException
    {
        MarketBean other = MarketManager.getInstance().createMarketBean();
        other.setMarketid(pObject.getMarketid());
        return MarketManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ReservationBean object to the MarketBean object.
     *
     * @param pObject the ReservationBean object to use
     * @param pObjectToBeSet the MarketBean object to associate to the ReservationBean 
     * @return the associated MarketBean pObject
     */
    // SET IMPORTED
    public ReservationBean setMarketBean(ReservationBean pObject,MarketBean pObjectToBeSet)
    {
        pObject.setMarketid(pObjectToBeSet.getMarketid());
        return pObject;
    }

    /**
     * Retrieves the PaymentmethodBean object from the reservation.paymentmethodid field.
     *
     * @param pObject the ReservationBean 
     * @return the associated PaymentmethodBean pObject
     */
    // GET IMPORTED
    public PaymentmethodBean getPaymentmethodBean(ReservationBean pObject) throws SQLException
    {
        PaymentmethodBean other = PaymentmethodManager.getInstance().createPaymentmethodBean();
        other.setPaymentmethodid(pObject.getPaymentmethodid());
        return PaymentmethodManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ReservationBean object to the PaymentmethodBean object.
     *
     * @param pObject the ReservationBean object to use
     * @param pObjectToBeSet the PaymentmethodBean object to associate to the ReservationBean 
     * @return the associated PaymentmethodBean pObject
     */
    // SET IMPORTED
    public ReservationBean setPaymentmethodBean(ReservationBean pObject,PaymentmethodBean pObjectToBeSet)
    {
        pObject.setPaymentmethodid(pObjectToBeSet.getPaymentmethodid());
        return pObject;
    }

    /**
     * Retrieves the PersonnelBean object from the reservation.personnelid field.
     *
     * @param pObject the ReservationBean 
     * @return the associated PersonnelBean pObject
     */
    // GET IMPORTED
    public PersonnelBean getPersonnelBean(ReservationBean pObject) throws SQLException
    {
        PersonnelBean other = PersonnelManager.getInstance().createPersonnelBean();
        other.setPersonnelid(pObject.getRegbyid());
        return PersonnelManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ReservationBean object to the PersonnelBean object.
     *
     * @param pObject the ReservationBean object to use
     * @param pObjectToBeSet the PersonnelBean object to associate to the ReservationBean 
     * @return the associated PersonnelBean pObject
     */
    // SET IMPORTED
    public ReservationBean setPersonnelBean(ReservationBean pObject,PersonnelBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonnelid());
        return pObject;
    }

    /**
     * Retrieves the ReservationtypeBean object from the reservation.reservationtypeid field.
     *
     * @param pObject the ReservationBean 
     * @return the associated ReservationtypeBean pObject
     */
    // GET IMPORTED
    public ReservationtypeBean getReservationtypeBean(ReservationBean pObject) throws SQLException
    {
        ReservationtypeBean other = ReservationtypeManager.getInstance().createReservationtypeBean();
        other.setReservationtypeid(pObject.getReservationtypeid());
        return ReservationtypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ReservationBean object to the ReservationtypeBean object.
     *
     * @param pObject the ReservationBean object to use
     * @param pObjectToBeSet the ReservationtypeBean object to associate to the ReservationBean 
     * @return the associated ReservationtypeBean pObject
     */
    // SET IMPORTED
    public ReservationBean setReservationtypeBean(ReservationBean pObject,ReservationtypeBean pObjectToBeSet)
    {
        pObject.setReservationtypeid(pObjectToBeSet.getReservationtypeid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from reservation.
     *
     * @return an array of ReservationManager pObject
     */
    //38
    public ReservationBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reservation",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ReservationBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ReservationBean table 
     */
    //49
    public ReservationBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ReservationBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting ReservationBean table 
     */
    //51
    public ReservationBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from reservation " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from reservation ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (ReservationBean[])v.toArray(new ReservationBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from reservation table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the reservation table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM reservation " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the ReservationBean pObject into the database.
     *
     * @param pObject the ReservationBean pObject to be saved
     */
    //100
    public ReservationBean save(ReservationBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isReservationidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('reservationid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setReservationid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into reservation (");
    
                if (pObject.isReservationidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("reservationid");
                    _dirtyCount++;
                }

                if (pObject.isArraivaldateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("arraivaldate");
                    _dirtyCount++;
                }

                if (pObject.isDeparturedateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("departuredate");
                    _dirtyCount++;
                }

                if (pObject.isReservationtypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("reservationtypeid");
                    _dirtyCount++;
                }

                if (pObject.isRatetypeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ratetype");
                    _dirtyCount++;
                }

                if (pObject.isManualrateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("manualrate");
                    _dirtyCount++;
                }

                if (pObject.isContractcontragentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractcontragentid");
                    _dirtyCount++;
                }

                if (pObject.isBilltoModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("billto");
                    _dirtyCount++;
                }

                if (pObject.isTaxexemptionreasonModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("taxexemptionreason");
                    _dirtyCount++;
                }

                if (pObject.isPaymentmodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("paymentmode");
                    _dirtyCount++;
                }

                if (pObject.isPaymentmethodidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("paymentmethodid");
                    _dirtyCount++;
                }

                if (pObject.isPaymentcontragentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("paymentcontragentid");
                    _dirtyCount++;
                }

                if (pObject.isAdvancepaymentdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("advancepaymentdate");
                    _dirtyCount++;
                }

                if (pObject.isAdvancepaymentamountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("advancepaymentamount");
                    _dirtyCount++;
                }

                if (pObject.isCompanyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("companyid");
                    _dirtyCount++;
                }

                if (pObject.isMarketidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("marketid");
                    _dirtyCount++;
                }

                if (pObject.isBsourceidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("bsourceid");
                    _dirtyCount++;
                }

                if (pObject.isTaidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("taid");
                    _dirtyCount++;
                }

                if (pObject.isCommissionplanModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("commissionplan");
                    _dirtyCount++;
                }

                if (pObject.isCommissionvalueModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("commissionvalue");
                    _dirtyCount++;
                }

                if (pObject.isVoucherModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("voucher");
                    _dirtyCount++;
                }

                if (pObject.isDiscountidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("discountid");
                    _dirtyCount++;
                }

                if (pObject.isPostingtypeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("postingtype");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isPostingvalueeveryModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("postingvalueevery");
                    _dirtyCount++;
                }

                if (pObject.isNumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("num");
                    _dirtyCount++;
                }

                if (pObject.isNomanualtaxModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("nomanualtax");
                    _dirtyCount++;
                }

                if (pObject.isNotaxModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("notax");
                    _dirtyCount++;
                }

                if (pObject.isDiscountnightsModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("discountnights");
                    _dirtyCount++;
                }

                if (pObject.isStatusModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("status");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isReservationidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getReservationid());
                }
    
                if (pObject.isArraivaldateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
                }
    
                if (pObject.isDeparturedateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
                }
    
                if (pObject.isReservationtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationtypeid());
                }
    
                if (pObject.isRatetypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRatetype());
                }
    
                if (pObject.isManualrateModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getManualrate());
                }
    
                if (pObject.isContractcontragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractcontragentid());
                }
    
                if (pObject.isBilltoModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getBillto());
                }
    
                if (pObject.isTaxexemptionreasonModified()) {
                    ps.setString(++_dirtyCount, pObject.getTaxexemptionreason());
                }
    
                if (pObject.isPaymentmodeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmode());
                }
    
                if (pObject.isPaymentmethodidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
                }
    
                if (pObject.isPaymentcontragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPaymentcontragentid());
                }
    
                if (pObject.isAdvancepaymentdateModified()) {
                    if (pObject.getAdvancepaymentdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getAdvancepaymentdate().getTime()));
                }
    
                if (pObject.isAdvancepaymentamountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAdvancepaymentamount());
                }
    
                if (pObject.isCompanyidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                if (pObject.isMarketidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getMarketid());
                }
    
                if (pObject.isBsourceidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getBsourceid());
                }
    
                if (pObject.isTaidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getTaid());
                }
    
                if (pObject.isCommissionplanModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCommissionplan());
                }
    
                if (pObject.isCommissionvalueModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getCommissionvalue());
                }
    
                if (pObject.isVoucherModified()) {
                    ps.setString(++_dirtyCount, pObject.getVoucher());
                }
    
                if (pObject.isDiscountidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountid());
                }
    
                if (pObject.isPostingtypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPostingtype());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isPostingvalueeveryModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPostingvalueevery());
                }
    
                if (pObject.isNumModified()) {
                    ps.setString(++_dirtyCount, pObject.getNum());
                }
    
                if (pObject.isNomanualtaxModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getNomanualtax());
                }
    
                if (pObject.isNotaxModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getNotax());
                }
    
                if (pObject.isDiscountnightsModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountnights());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE reservation SET ");
                boolean useComma=false;

                if (pObject.isReservationidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("reservationid").append("=?");
                }

                if (pObject.isArraivaldateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("arraivaldate").append("=?");
                }

                if (pObject.isDeparturedateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("departuredate").append("=?");
                }

                if (pObject.isReservationtypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("reservationtypeid").append("=?");
                }

                if (pObject.isRatetypeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ratetype").append("=?");
                }

                if (pObject.isManualrateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("manualrate").append("=?");
                }

                if (pObject.isContractcontragentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractcontragentid").append("=?");
                }

                if (pObject.isBilltoModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("billto").append("=?");
                }

                if (pObject.isTaxexemptionreasonModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("taxexemptionreason").append("=?");
                }

                if (pObject.isPaymentmodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("paymentmode").append("=?");
                }

                if (pObject.isPaymentmethodidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("paymentmethodid").append("=?");
                }

                if (pObject.isPaymentcontragentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("paymentcontragentid").append("=?");
                }

                if (pObject.isAdvancepaymentdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("advancepaymentdate").append("=?");
                }

                if (pObject.isAdvancepaymentamountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("advancepaymentamount").append("=?");
                }

                if (pObject.isCompanyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("companyid").append("=?");
                }

                if (pObject.isMarketidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("marketid").append("=?");
                }

                if (pObject.isBsourceidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("bsourceid").append("=?");
                }

                if (pObject.isTaidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("taid").append("=?");
                }

                if (pObject.isCommissionplanModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("commissionplan").append("=?");
                }

                if (pObject.isCommissionvalueModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("commissionvalue").append("=?");
                }

                if (pObject.isVoucherModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("voucher").append("=?");
                }

                if (pObject.isDiscountidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("discountid").append("=?");
                }

                if (pObject.isPostingtypeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("postingtype").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isPostingvalueeveryModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("postingvalueevery").append("=?");
                }

                if (pObject.isNumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("num").append("=?");
                }

                if (pObject.isNomanualtaxModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("nomanualtax").append("=?");
                }

                if (pObject.isNotaxModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("notax").append("=?");
                }

                if (pObject.isDiscountnightsModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("discountnights").append("=?");
                }

                if (pObject.isStatusModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("status").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("reservation.reservationid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isReservationidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getReservationid());
                }

                if (pObject.isArraivaldateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
                }

                if (pObject.isDeparturedateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
                }

                if (pObject.isReservationtypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationtypeid());
                }

                if (pObject.isRatetypeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRatetype());
                }

                if (pObject.isManualrateModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getManualrate());
                }

                if (pObject.isContractcontragentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractcontragentid());
                }

                if (pObject.isBilltoModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getBillto());
                }

                if (pObject.isTaxexemptionreasonModified()) {
                      ps.setString(++_dirtyCount, pObject.getTaxexemptionreason());
                }

                if (pObject.isPaymentmodeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmode());
                }

                if (pObject.isPaymentmethodidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
                }

                if (pObject.isPaymentcontragentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getPaymentcontragentid());
                }

                if (pObject.isAdvancepaymentdateModified()) {
                      if (pObject.getAdvancepaymentdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getAdvancepaymentdate().getTime()));
                }

                if (pObject.isAdvancepaymentamountModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getAdvancepaymentamount());
                }

                if (pObject.isCompanyidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getCompanyid());
                }

                if (pObject.isMarketidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getMarketid());
                }

                if (pObject.isBsourceidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getBsourceid());
                }

                if (pObject.isTaidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getTaid());
                }

                if (pObject.isCommissionplanModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCommissionplan());
                }

                if (pObject.isCommissionvalueModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getCommissionvalue());
                }

                if (pObject.isVoucherModified()) {
                      ps.setString(++_dirtyCount, pObject.getVoucher());
                }

                if (pObject.isDiscountidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountid());
                }

                if (pObject.isPostingtypeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getPostingtype());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isPostingvalueeveryModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getPostingvalueevery());
                }

                if (pObject.isNumModified()) {
                      ps.setString(++_dirtyCount, pObject.getNum());
                }

                if (pObject.isNomanualtaxModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getNomanualtax());
                }

                if (pObject.isNotaxModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getNotax());
                }

                if (pObject.isDiscountnightsModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountnights());
                }

                if (pObject.isStatusModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getReservationid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of ReservationBean pObjects into the database.
     *
     * @param pObjects the ReservationBean pObject table to be saved
     * @return the saved ReservationBean array.
     */
    //65
    public ReservationBean[] save(ReservationBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique ReservationBean pObject from a template one giving a c
     *
     * @param pObject the ReservationBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public ReservationBean loadUniqueUsingTemplate(ReservationBean pObject) throws SQLException
    {
         ReservationBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of ReservationBean from a template one.
     *
     * @param pObject the ReservationBean template to look for
     * @return all the ReservationBean matching the template
     */
    //88
    public ReservationBean[] loadUsingTemplate(ReservationBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from reservation WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isReservationidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationid= ?");
             }
    
             if (pObject.isArraivaldateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("arraivaldate= ?");
             }
    
             if (pObject.isDeparturedateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("departuredate= ?");
             }
    
             if (pObject.isReservationtypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationtypeid= ?");
             }
    
             if (pObject.isRatetypeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ratetype= ?");
             }
    
             if (pObject.isManualrateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("manualrate= ?");
             }
    
             if (pObject.isContractcontragentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractcontragentid= ?");
             }
    
             if (pObject.isBilltoModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("billto= ?");
             }
    
             if (pObject.isTaxexemptionreasonModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("taxexemptionreason= ?");
             }
    
             if (pObject.isPaymentmodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentmode= ?");
             }
    
             if (pObject.isPaymentmethodidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentmethodid= ?");
             }
    
             if (pObject.isPaymentcontragentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentcontragentid= ?");
             }
    
             if (pObject.isAdvancepaymentdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("advancepaymentdate= ?");
             }
    
             if (pObject.isAdvancepaymentamountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("advancepaymentamount= ?");
             }
    
             if (pObject.isCompanyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyid= ?");
             }
    
             if (pObject.isMarketidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("marketid= ?");
             }
    
             if (pObject.isBsourceidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bsourceid= ?");
             }
    
             if (pObject.isTaidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("taid= ?");
             }
    
             if (pObject.isCommissionplanModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("commissionplan= ?");
             }
    
             if (pObject.isCommissionvalueModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("commissionvalue= ?");
             }
    
             if (pObject.isVoucherModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("voucher= ?");
             }
    
             if (pObject.isDiscountidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("discountid= ?");
             }
    
             if (pObject.isPostingtypeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("postingtype= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isPostingvalueeveryModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("postingvalueevery= ?");
             }
    
             if (pObject.isNumModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num= ?");
             }
    
             if (pObject.isNomanualtaxModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nomanualtax= ?");
             }
    
             if (pObject.isNotaxModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("notax= ?");
             }
    
             if (pObject.isDiscountnightsModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("discountnights= ?");
             }
    
             if (pObject.isStatusModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isReservationidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getReservationid());
             }
    
             if (pObject.isArraivaldateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
             }
    
             if (pObject.isDeparturedateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
             }
    
             if (pObject.isReservationtypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationtypeid());
             }
    
             if (pObject.isRatetypeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRatetype());
             }
    
             if (pObject.isManualrateModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getManualrate());
             }
    
             if (pObject.isContractcontragentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractcontragentid());
             }
    
             if (pObject.isBilltoModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getBillto());
             }
    
             if (pObject.isTaxexemptionreasonModified()) {
                 ps.setString(++_dirtyCount, pObject.getTaxexemptionreason());
             }
    
             if (pObject.isPaymentmodeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmode());
             }
    
             if (pObject.isPaymentmethodidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
             }
    
             if (pObject.isPaymentcontragentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getPaymentcontragentid());
             }
    
             if (pObject.isAdvancepaymentdateModified()) {
                 if (pObject.getAdvancepaymentdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getAdvancepaymentdate().getTime()));
             }
    
             if (pObject.isAdvancepaymentamountModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getAdvancepaymentamount());
             }
    
             if (pObject.isCompanyidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getCompanyid());
             }
    
             if (pObject.isMarketidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getMarketid());
             }
    
             if (pObject.isBsourceidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getBsourceid());
             }
    
             if (pObject.isTaidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getTaid());
             }
    
             if (pObject.isCommissionplanModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCommissionplan());
             }
    
             if (pObject.isCommissionvalueModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getCommissionvalue());
             }
    
             if (pObject.isVoucherModified()) {
                 ps.setString(++_dirtyCount, pObject.getVoucher());
             }
    
             if (pObject.isDiscountidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountid());
             }
    
             if (pObject.isPostingtypeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getPostingtype());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isPostingvalueeveryModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getPostingvalueevery());
             }
    
             if (pObject.isNumModified()) {
                 ps.setString(++_dirtyCount, pObject.getNum());
             }
    
             if (pObject.isNomanualtaxModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getNomanualtax());
             }
    
             if (pObject.isNotaxModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getNotax());
             }
    
             if (pObject.isDiscountnightsModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountnights());
             }
    
             if (pObject.isStatusModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a ReservationBean template.
     *
     * @param pObject the ReservationBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(ReservationBean pObject) throws SQLException
    {
        if (pObject.isReservationidInitialized())
            return deleteByPrimaryKey(pObject.getReservationid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM reservation WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isReservationidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("reservationid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isArraivaldateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("arraivaldate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeparturedateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("departuredate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isReservationtypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("reservationtypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRatetypeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ratetype").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isManualrateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("manualrate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractcontragentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractcontragentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBilltoInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("billto").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTaxexemptionreasonInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("taxexemptionreason").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPaymentmodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("paymentmode").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPaymentmethodidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("paymentmethodid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPaymentcontragentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("paymentcontragentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAdvancepaymentdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("advancepaymentdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAdvancepaymentamountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("advancepaymentamount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCompanyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("companyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMarketidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("marketid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBsourceidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("bsourceid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTaidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("taid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCommissionplanInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("commissionplan").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCommissionvalueInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("commissionvalue").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isVoucherInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("voucher").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDiscountidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("discountid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPostingtypeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("postingtype").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPostingvalueeveryInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("postingvalueevery").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("num").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNomanualtaxInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("nomanualtax").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNotaxInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("notax").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDiscountnightsInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("discountnights").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStatusInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("status").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isReservationidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getReservationid());
            }
    
            if (pObject.isArraivaldateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
            }
    
            if (pObject.isDeparturedateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
            }
    
            if (pObject.isReservationtypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationtypeid());
            }
    
            if (pObject.isRatetypeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRatetype());
            }
    
            if (pObject.isManualrateInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getManualrate());
            }
    
            if (pObject.isContractcontragentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractcontragentid());
            }
    
            if (pObject.isBilltoInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getBillto());
            }
    
            if (pObject.isTaxexemptionreasonInitialized()) {
                ps.setString(++_dirtyCount, pObject.getTaxexemptionreason());
            }
    
            if (pObject.isPaymentmodeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmode());
            }
    
            if (pObject.isPaymentmethodidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
            }
    
            if (pObject.isPaymentcontragentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getPaymentcontragentid());
            }
    
            if (pObject.isAdvancepaymentdateInitialized()) {
                if (pObject.getAdvancepaymentdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getAdvancepaymentdate().getTime()));
            }
    
            if (pObject.isAdvancepaymentamountInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getAdvancepaymentamount());
            }
    
            if (pObject.isCompanyidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getCompanyid());
            }
    
            if (pObject.isMarketidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getMarketid());
            }
    
            if (pObject.isBsourceidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getBsourceid());
            }
    
            if (pObject.isTaidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getTaid());
            }
    
            if (pObject.isCommissionplanInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCommissionplan());
            }
    
            if (pObject.isCommissionvalueInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getCommissionvalue());
            }
    
            if (pObject.isVoucherInitialized()) {
                ps.setString(++_dirtyCount, pObject.getVoucher());
            }
    
            if (pObject.isDiscountidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountid());
            }
    
            if (pObject.isPostingtypeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPostingtype());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isPostingvalueeveryInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getPostingvalueevery());
            }
    
            if (pObject.isNumInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNum());
            }
    
            if (pObject.isNomanualtaxInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getNomanualtax());
            }
    
            if (pObject.isNotaxInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getNotax());
            }
    
            if (pObject.isDiscountnightsInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountnights());
            }
    
            if (pObject.isStatusInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of ReasonBean using the relation table Reservationreason given a ReservationBean object.
     *
     * @param pObject the ReservationBean pObject to be used
     * @return an array of ReasonBean 
     */
    // MANY TO MANY
    public ReasonBean[] loadReasonViaReservationreason(ReservationBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        reason,reservationreason"
                         + " WHERE "    
                         + "     reservationreason.reservationid = ?"
                         + " AND reservationreason.reasonid = reason.reasonid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getReservationid());
             return ReasonManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of GuestBean using the relation table Reservationroom given a ReservationBean object.
     *
     * @param pObject the ReservationBean pObject to be used
     * @return an array of GuestBean 
     */
    // MANY TO MANY
    public GuestBean[] loadGuestViaReservationroom(ReservationBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        guest,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.reservationid = ?"
                         + " AND reservationroom.guestid = guest.guestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getReservationid());
             return GuestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonnelBean using the relation table Reservationroom given a ReservationBean object.
     *
     * @param pObject the ReservationBean pObject to be used
     * @return an array of PersonnelBean 
     */
    // MANY TO MANY
    public PersonnelBean[] loadPersonnelViaReservationroom(ReservationBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personnel,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.reservationid = ?"
                         + " AND reservationroom.regbyid = personnel.personnelid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getReservationid());
             return PersonnelManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RatetypeBean using the relation table Reservationroom given a ReservationBean object.
     *
     * @param pObject the ReservationBean pObject to be used
     * @return an array of RatetypeBean 
     */
    // MANY TO MANY
    public RatetypeBean[] loadRatetypeViaReservationroom(ReservationBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        ratetype,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.reservationid = ?"
                         + " AND reservationroom.ratetypeid = ratetype.ratetypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getReservationid());
             return RatetypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RoomBean using the relation table Reservationroom given a ReservationBean object.
     *
     * @param pObject the ReservationBean pObject to be used
     * @return an array of RoomBean 
     */
    // MANY TO MANY
    public RoomBean[] loadRoomViaReservationroom(ReservationBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        room,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.reservationid = ?"
                         + " AND reservationroom.roomid = room.roomid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getReservationid());
             return RoomManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RoomtypeBean using the relation table Reservationroom given a ReservationBean object.
     *
     * @param pObject the ReservationBean pObject to be used
     * @return an array of RoomtypeBean 
     */
    // MANY TO MANY
    public RoomtypeBean[] loadRoomtypeViaReservationroom(ReservationBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        roomtype,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.reservationid = ?"
                         + " AND reservationroom.roomtypeid = roomtype.roomtypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getReservationid());
             return RoomtypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table reservation.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table reservation with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from reservation " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table reservation with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific ReservationBean pObject given a c
     *
     * @param pObject the ReservationBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(ReservationBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from reservation WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isReservationidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationid= ?");
                }
    
                if (pObject.isArraivaldateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("arraivaldate= ?");
                }
    
                if (pObject.isDeparturedateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("departuredate= ?");
                }
    
                if (pObject.isReservationtypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reservationtypeid= ?");
                }
    
                if (pObject.isRatetypeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ratetype= ?");
                }
    
                if (pObject.isManualrateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("manualrate= ?");
                }
    
                if (pObject.isContractcontragentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractcontragentid= ?");
                }
    
                if (pObject.isBilltoModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("billto= ?");
                }
    
                if (pObject.isTaxexemptionreasonModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("taxexemptionreason= ?");
                }
    
                if (pObject.isPaymentmodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentmode= ?");
                }
    
                if (pObject.isPaymentmethodidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentmethodid= ?");
                }
    
                if (pObject.isPaymentcontragentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymentcontragentid= ?");
                }
    
                if (pObject.isAdvancepaymentdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("advancepaymentdate= ?");
                }
    
                if (pObject.isAdvancepaymentamountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("advancepaymentamount= ?");
                }
    
                if (pObject.isCompanyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyid= ?");
                }
    
                if (pObject.isMarketidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("marketid= ?");
                }
    
                if (pObject.isBsourceidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bsourceid= ?");
                }
    
                if (pObject.isTaidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("taid= ?");
                }
    
                if (pObject.isCommissionplanModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("commissionplan= ?");
                }
    
                if (pObject.isCommissionvalueModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("commissionvalue= ?");
                }
    
                if (pObject.isVoucherModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("voucher= ?");
                }
    
                if (pObject.isDiscountidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("discountid= ?");
                }
    
                if (pObject.isPostingtypeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("postingtype= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isPostingvalueeveryModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("postingvalueevery= ?");
                }
    
                if (pObject.isNumModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num= ?");
                }
    
                if (pObject.isNomanualtaxModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nomanualtax= ?");
                }
    
                if (pObject.isNotaxModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("notax= ?");
                }
    
                if (pObject.isDiscountnightsModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("discountnights= ?");
                }
    
                if (pObject.isStatusModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isReservationidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getReservationid());
                }
    
                if (pObject.isArraivaldateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getArraivaldate());
                }
    
                if (pObject.isDeparturedateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getDeparturedate());
                }
    
                if (pObject.isReservationtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getReservationtypeid());
                }
    
                if (pObject.isRatetypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRatetype());
                }
    
                if (pObject.isManualrateModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getManualrate());
                }
    
                if (pObject.isContractcontragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractcontragentid());
                }
    
                if (pObject.isBilltoModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getBillto());
                }
    
                if (pObject.isTaxexemptionreasonModified()) {
                    ps.setString(++_dirtyCount, pObject.getTaxexemptionreason());
                }
    
                if (pObject.isPaymentmodeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmode());
                }
    
                if (pObject.isPaymentmethodidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPaymentmethodid());
                }
    
                if (pObject.isPaymentcontragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPaymentcontragentid());
                }
    
                if (pObject.isAdvancepaymentdateModified()) {
                    if (pObject.getAdvancepaymentdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getAdvancepaymentdate().getTime()));
                }
    
                if (pObject.isAdvancepaymentamountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAdvancepaymentamount());
                }
    
                if (pObject.isCompanyidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                if (pObject.isMarketidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getMarketid());
                }
    
                if (pObject.isBsourceidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getBsourceid());
                }
    
                if (pObject.isTaidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getTaid());
                }
    
                if (pObject.isCommissionplanModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCommissionplan());
                }
    
                if (pObject.isCommissionvalueModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getCommissionvalue());
                }
    
                if (pObject.isVoucherModified()) {
                    ps.setString(++_dirtyCount, pObject.getVoucher());
                }
    
                if (pObject.isDiscountidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountid());
                }
    
                if (pObject.isPostingtypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPostingtype());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isPostingvalueeveryModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPostingvalueevery());
                }
    
                if (pObject.isNumModified()) {
                    ps.setString(++_dirtyCount, pObject.getNum());
                }
    
                if (pObject.isNomanualtaxModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getNomanualtax());
                }
    
                if (pObject.isNotaxModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getNotax());
                }
    
                if (pObject.isDiscountnightsModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDiscountnights());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the reservation on a ReservationBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting ReservationBean pObject
     */
    //72
    public ReservationBean decodeRow(ResultSet rs) throws SQLException
    {
        ReservationBean pObject = createReservationBean();
        pObject.setReservationid(Manager.getLong(rs, 1));
        pObject.setArraivaldate(rs.getTimestamp(2));
        pObject.setDeparturedate(rs.getTimestamp(3));
        pObject.setReservationtypeid(Manager.getInteger(rs, 4));
        pObject.setRatetype(Manager.getInteger(rs, 5));
        pObject.setManualrate(Manager.getDouble(rs, 6));
        pObject.setContractcontragentid(Manager.getLong(rs, 7));
        pObject.setBillto(Manager.getInteger(rs, 8));
        pObject.setTaxexemptionreason(rs.getString(9));
        pObject.setPaymentmode(Manager.getInteger(rs, 10));
        pObject.setPaymentmethodid(Manager.getInteger(rs, 11));
        pObject.setPaymentcontragentid(Manager.getLong(rs, 12));
        pObject.setAdvancepaymentdate(rs.getDate(13));
        pObject.setAdvancepaymentamount(Manager.getDouble(rs, 14));
        pObject.setCompanyid(Manager.getLong(rs, 15));
        pObject.setMarketid(Manager.getInteger(rs, 16));
        pObject.setBsourceid(Manager.getInteger(rs, 17));
        pObject.setTaid(Manager.getLong(rs, 18));
        pObject.setCommissionplan(Manager.getInteger(rs, 19));
        pObject.setCommissionvalue(Manager.getDouble(rs, 20));
        pObject.setVoucher(rs.getString(21));
        pObject.setDiscountid(Manager.getInteger(rs, 22));
        pObject.setPostingtype(Manager.getInteger(rs, 23));
        pObject.setRegbyid(Manager.getInteger(rs, 24));
        pObject.setRegdate(rs.getTimestamp(25));
        pObject.setPostingvalueevery(Manager.getDouble(rs, 26));
        pObject.setNum(rs.getString(27));
        pObject.setNomanualtax(Manager.getBoolean(rs, 28));
        pObject.setNotax(Manager.getBoolean(rs, 29));
        pObject.setDiscountnights(Manager.getInteger(rs, 30));
        pObject.setStatus(Manager.getInteger(rs, 31));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the reservation table on a ReservationBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting ReservationBean pObject
     */
    //73
    public ReservationBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        ReservationBean pObject = createReservationBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_RESERVATIONID:
                    ++pos;
                    pObject.setReservationid(Manager.getLong(rs, pos));
                    break;
                case ID_ARRAIVALDATE:
                    ++pos;
                    pObject.setArraivaldate(rs.getTimestamp(pos));
                    break;
                case ID_DEPARTUREDATE:
                    ++pos;
                    pObject.setDeparturedate(rs.getTimestamp(pos));
                    break;
                case ID_RESERVATIONTYPEID:
                    ++pos;
                    pObject.setReservationtypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_RATETYPE:
                    ++pos;
                    pObject.setRatetype(Manager.getInteger(rs, pos));
                    break;
                case ID_MANUALRATE:
                    ++pos;
                    pObject.setManualrate(Manager.getDouble(rs, pos));
                    break;
                case ID_CONTRACTCONTRAGENTID:
                    ++pos;
                    pObject.setContractcontragentid(Manager.getLong(rs, pos));
                    break;
                case ID_BILLTO:
                    ++pos;
                    pObject.setBillto(Manager.getInteger(rs, pos));
                    break;
                case ID_TAXEXEMPTIONREASON:
                    ++pos;
                    pObject.setTaxexemptionreason(rs.getString(pos));
                    break;
                case ID_PAYMENTMODE:
                    ++pos;
                    pObject.setPaymentmode(Manager.getInteger(rs, pos));
                    break;
                case ID_PAYMENTMETHODID:
                    ++pos;
                    pObject.setPaymentmethodid(Manager.getInteger(rs, pos));
                    break;
                case ID_PAYMENTCONTRAGENTID:
                    ++pos;
                    pObject.setPaymentcontragentid(Manager.getLong(rs, pos));
                    break;
                case ID_ADVANCEPAYMENTDATE:
                    ++pos;
                    pObject.setAdvancepaymentdate(rs.getDate(pos));
                    break;
                case ID_ADVANCEPAYMENTAMOUNT:
                    ++pos;
                    pObject.setAdvancepaymentamount(Manager.getDouble(rs, pos));
                    break;
                case ID_COMPANYID:
                    ++pos;
                    pObject.setCompanyid(Manager.getLong(rs, pos));
                    break;
                case ID_MARKETID:
                    ++pos;
                    pObject.setMarketid(Manager.getInteger(rs, pos));
                    break;
                case ID_BSOURCEID:
                    ++pos;
                    pObject.setBsourceid(Manager.getInteger(rs, pos));
                    break;
                case ID_TAID:
                    ++pos;
                    pObject.setTaid(Manager.getLong(rs, pos));
                    break;
                case ID_COMMISSIONPLAN:
                    ++pos;
                    pObject.setCommissionplan(Manager.getInteger(rs, pos));
                    break;
                case ID_COMMISSIONVALUE:
                    ++pos;
                    pObject.setCommissionvalue(Manager.getDouble(rs, pos));
                    break;
                case ID_VOUCHER:
                    ++pos;
                    pObject.setVoucher(rs.getString(pos));
                    break;
                case ID_DISCOUNTID:
                    ++pos;
                    pObject.setDiscountid(Manager.getInteger(rs, pos));
                    break;
                case ID_POSTINGTYPE:
                    ++pos;
                    pObject.setPostingtype(Manager.getInteger(rs, pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_POSTINGVALUEEVERY:
                    ++pos;
                    pObject.setPostingvalueevery(Manager.getDouble(rs, pos));
                    break;
                case ID_NUM:
                    ++pos;
                    pObject.setNum(rs.getString(pos));
                    break;
                case ID_NOMANUALTAX:
                    ++pos;
                    pObject.setNomanualtax(Manager.getBoolean(rs, pos));
                    break;
                case ID_NOTAX:
                    ++pos;
                    pObject.setNotax(Manager.getBoolean(rs, pos));
                    break;
                case ID_DISCOUNTNIGHTS:
                    ++pos;
                    pObject.setDiscountnights(Manager.getInteger(rs, pos));
                    break;
                case ID_STATUS:
                    ++pos;
                    pObject.setStatus(Manager.getInteger(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ReservationBean 
     */
    //41
    public ReservationBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ReservationBean 
     */
    public ReservationBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (ReservationBean[])v.toArray(new ReservationBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private ReservationListener listener = null;

    /**
     * Registers a unique ReservationListener listener.
     */
    //66.5
    public void registerListener(ReservationListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the ReservationBean pObject.
     *
     * @param pObject the ReservationBean pObject to be saved
     */
    //67
    void beforeInsert(ReservationBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the ReservationBean pObject.
     *
     * @param pObject the ReservationBean pObject to be saved
     */
    //68
    void afterInsert(ReservationBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the ReservationBean pObject.
     *
     * @param pObject the ReservationBean pObject to be updated
     */
    //69
    void beforeUpdate(ReservationBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the ReservationBean pObject.
     *
     * @param pObject the ReservationBean pObject to be updated
     */
    //70
    void afterUpdate(ReservationBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 

}
