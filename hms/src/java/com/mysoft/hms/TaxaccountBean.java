// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class TaxaccountBean
// extends+ 

// extends- 

{
    private Integer taxaccount;
    private boolean taxaccount_is_modified = false;
    private boolean taxaccount_is_initialized = false;
    
    private Integer account;
    private boolean account_is_modified = false;
    private boolean account_is_initialized = false;
    
    private Integer payoutid;
    private boolean payoutid_is_modified = false;
    private boolean payoutid_is_initialized = false;
    
    private Integer taxid;
    private boolean taxid_is_modified = false;
    private boolean taxid_is_initialized = false;
    
    private Boolean tax;
    private boolean tax_is_modified = false;
    private boolean tax_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    TaxaccountBean()
    {
    }
    
    /**
     * Getter method for taxaccount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: taxaccount.taxaccount
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of taxaccount
     */
    public Integer getTaxaccount()
    {
        return taxaccount; 
    }

    /**
     * Setter method for taxaccount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to taxaccount
     */
    public void setTaxaccount(Integer newVal) {
        if ((newVal != null && this.taxaccount != null && (newVal.compareTo(this.taxaccount) == 0)) || 
            (newVal == null && this.taxaccount == null && taxaccount_is_initialized)) {
            return; 
        } 
        this.taxaccount = newVal; 
        taxaccount_is_modified = true; 
        taxaccount_is_initialized = true; 
    }

    /**
     * Setter method for taxaccount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to taxaccount
     */
    public void setTaxaccount(int newVal) {
        setTaxaccount(new Integer(newVal));
    }

    /**
     * Determines if the taxaccount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTaxaccountModified() {
        return taxaccount_is_modified; 
    }

    /**
     * Determines if the taxaccount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTaxaccountInitialized() {
        return taxaccount_is_initialized; 
    }

    /**
     * Getter method for account.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: taxaccount.account
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of account
     */
    public Integer getAccount()
    {
        return account; 
    }

    /**
     * Setter method for account.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to account
     */
    public void setAccount(Integer newVal) {
        if ((newVal != null && this.account != null && (newVal.compareTo(this.account) == 0)) || 
            (newVal == null && this.account == null && account_is_initialized)) {
            return; 
        } 
        this.account = newVal; 
        account_is_modified = true; 
        account_is_initialized = true; 
    }

    /**
     * Setter method for account.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to account
     */
    public void setAccount(int newVal) {
        setAccount(new Integer(newVal));
    }

    /**
     * Determines if the account has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAccountModified() {
        return account_is_modified; 
    }

    /**
     * Determines if the account has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAccountInitialized() {
        return account_is_initialized; 
    }

    /**
     * Getter method for payoutid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: taxaccount.payoutid
     * <li> foreign key: payout.payoutid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of payoutid
     */
    public Integer getPayoutid()
    {
        return payoutid; 
    }

    /**
     * Setter method for payoutid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to payoutid
     */
    public void setPayoutid(Integer newVal) {
        if ((newVal != null && this.payoutid != null && (newVal.compareTo(this.payoutid) == 0)) || 
            (newVal == null && this.payoutid == null && payoutid_is_initialized)) {
            return; 
        } 
        this.payoutid = newVal; 
        payoutid_is_modified = true; 
        payoutid_is_initialized = true; 
    }

    /**
     * Setter method for payoutid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to payoutid
     */
    public void setPayoutid(int newVal) {
        setPayoutid(new Integer(newVal));
    }

    /**
     * Determines if the payoutid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPayoutidModified() {
        return payoutid_is_modified; 
    }

    /**
     * Determines if the payoutid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPayoutidInitialized() {
        return payoutid_is_initialized; 
    }

    /**
     * Getter method for taxid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: taxaccount.taxid
     * <li> foreign key: tax.taxid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of taxid
     */
    public Integer getTaxid()
    {
        return taxid; 
    }

    /**
     * Setter method for taxid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to taxid
     */
    public void setTaxid(Integer newVal) {
        if ((newVal != null && this.taxid != null && (newVal.compareTo(this.taxid) == 0)) || 
            (newVal == null && this.taxid == null && taxid_is_initialized)) {
            return; 
        } 
        this.taxid = newVal; 
        taxid_is_modified = true; 
        taxid_is_initialized = true; 
    }

    /**
     * Setter method for taxid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to taxid
     */
    public void setTaxid(int newVal) {
        setTaxid(new Integer(newVal));
    }

    /**
     * Determines if the taxid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTaxidModified() {
        return taxid_is_modified; 
    }

    /**
     * Determines if the taxid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTaxidInitialized() {
        return taxid_is_initialized; 
    }

    /**
     * Getter method for tax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: taxaccount.tax
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of tax
     */
    public Boolean getTax()
    {
        return tax; 
    }

    /**
     * Setter method for tax.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to tax
     */
    public void setTax(Boolean newVal) {
        if ((newVal != null && this.tax != null && newVal.equals(this.tax)) || 
            (newVal == null && this.tax == null && tax_is_initialized)) {
            return; 
        } 
        this.tax = newVal; 
        tax_is_modified = true; 
        tax_is_initialized = true; 
    }

    /**
     * Setter method for tax.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tax
     */
    public void setTax(boolean newVal) {
        setTax(new Boolean(newVal));
    }

    /**
     * Determines if the tax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTaxModified() {
        return tax_is_modified; 
    }

    /**
     * Determines if the tax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTaxInitialized() {
        return tax_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return taxaccount_is_modified || 
		account_is_modified || 
		payoutid_is_modified || 
		taxid_is_modified || 
		tax_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        taxaccount_is_modified = false;
        account_is_modified = false;
        payoutid_is_modified = false;
        taxid_is_modified = false;
        tax_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TaxaccountBean bean) {
        setTaxaccount(bean.getTaxaccount());
        setAccount(bean.getAccount());
        setPayoutid(bean.getPayoutid());
        setTaxid(bean.getTaxid());
        setTax(bean.getTax());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[taxaccount] "
                 + "\n - taxaccount.taxaccount = " + (taxaccount_is_initialized ? ("[" + (taxaccount == null ? null : taxaccount.toString()) + "]") : "not initialized") + ""
                 + "\n - taxaccount.account = " + (account_is_initialized ? ("[" + (account == null ? null : account.toString()) + "]") : "not initialized") + ""
                 + "\n - taxaccount.payoutid = " + (payoutid_is_initialized ? ("[" + (payoutid == null ? null : payoutid.toString()) + "]") : "not initialized") + ""
                 + "\n - taxaccount.taxid = " + (taxid_is_initialized ? ("[" + (taxid == null ? null : taxid.toString()) + "]") : "not initialized") + ""
                 + "\n - taxaccount.tax = " + (tax_is_initialized ? ("[" + (tax == null ? null : tax.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
