// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 

public class CurrencyBean
// extends+ 

// extends- 
{
    private Integer currencyid;
    private boolean currencyid_is_modified = false;
    private boolean currencyid_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private String code;
    private boolean code_is_modified = false;
    private boolean code_is_initialized = false;
    
    private Boolean basic;
    private boolean basic_is_modified = false;
    private boolean basic_is_initialized = false;
    
    private String icon;
    private boolean icon_is_modified = false;
    private boolean icon_is_initialized = false;
    
    private Integer countryid;
    private boolean countryid_is_modified = false;
    private boolean countryid_is_initialized = false;
    
    private Boolean fixedexrate;
    private boolean fixedexrate_is_modified = false;
    private boolean fixedexrate_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    CurrencyBean()
    {
    }
    
    /**
     * Getter method for currencyid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: currency.currencyid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of currencyid
     */
    public Integer getCurrencyid()
    {
        return currencyid; 
    }

    /**
     * Setter method for currencyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to currencyid
     */
    public void setCurrencyid(Integer newVal) {
        if ((newVal != null && this.currencyid != null && (newVal.compareTo(this.currencyid) == 0)) || 
            (newVal == null && this.currencyid == null && currencyid_is_initialized)) {
            return; 
        } 
        this.currencyid = newVal; 
        currencyid_is_modified = true; 
        currencyid_is_initialized = true; 
    }

    /**
     * Setter method for currencyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to currencyid
     */
    public void setCurrencyid(int newVal) {
        setCurrencyid(new Integer(newVal));
    }

    /**
     * Determines if the currencyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCurrencyidModified() {
        return currencyid_is_modified; 
    }

    /**
     * Determines if the currencyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCurrencyidInitialized() {
        return currencyid_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: currency.name
     * <li>comments: დასახელება
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for code.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: currency.code
     * <li>comments: მოკლე სახელწოდება
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of code
     */
    public String getCode()
    {
        return code; 
    }

    /**
     * Setter method for code.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to code
     */
    public void setCode(String newVal) {
        if ((newVal != null && this.code != null && (newVal.compareTo(this.code) == 0)) || 
            (newVal == null && this.code == null && code_is_initialized)) {
            return; 
        } 
        this.code = newVal; 
        code_is_modified = true; 
        code_is_initialized = true; 
    }

    /**
     * Determines if the code has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodeModified() {
        return code_is_modified; 
    }

    /**
     * Determines if the code has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodeInitialized() {
        return code_is_initialized; 
    }

    /**
     * Getter method for basic.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: currency.basic
     * <li>comments: ძირითადი ვალუტა
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of basic
     */
    public Boolean getBasic()
    {
        return basic; 
    }

    /**
     * Setter method for basic.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to basic
     */
    public void setBasic(Boolean newVal) {
        if ((newVal != null && this.basic != null && newVal.equals(this.basic)) || 
            (newVal == null && this.basic == null && basic_is_initialized)) {
            return; 
        } 
        this.basic = newVal; 
        basic_is_modified = true; 
        basic_is_initialized = true; 
    }

    /**
     * Setter method for basic.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to basic
     */
    public void setBasic(boolean newVal) {
        setBasic(new Boolean(newVal));
    }

    /**
     * Determines if the basic has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBasicModified() {
        return basic_is_modified; 
    }

    /**
     * Determines if the basic has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBasicInitialized() {
        return basic_is_initialized; 
    }

    /**
     * Getter method for icon.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: currency.icon
     * <li>comments: ნიშანი
     * <li>column size: 2147483647
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of icon
     */
    public String getIcon()
    {
        return icon; 
    }

    /**
     * Setter method for icon.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to icon
     */
    public void setIcon(String newVal) {
        if ((newVal != null && this.icon != null && (newVal.compareTo(this.icon) == 0)) || 
            (newVal == null && this.icon == null && icon_is_initialized)) {
            return; 
        } 
        this.icon = newVal; 
        icon_is_modified = true; 
        icon_is_initialized = true; 
    }

    /**
     * Determines if the icon has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIconModified() {
        return icon_is_modified; 
    }

    /**
     * Determines if the icon has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIconInitialized() {
        return icon_is_initialized; 
    }

    /**
     * Getter method for countryid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: currency.countryid
     * <li> foreign key: country.countryid
     * <li>comments: ქვეყანა
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of countryid
     */
    public Integer getCountryid()
    {
        return countryid; 
    }

    /**
     * Setter method for countryid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to countryid
     */
    public void setCountryid(Integer newVal) {
        if ((newVal != null && this.countryid != null && (newVal.compareTo(this.countryid) == 0)) || 
            (newVal == null && this.countryid == null && countryid_is_initialized)) {
            return; 
        } 
        this.countryid = newVal; 
        countryid_is_modified = true; 
        countryid_is_initialized = true; 
    }

    /**
     * Setter method for countryid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to countryid
     */
    public void setCountryid(int newVal) {
        setCountryid(new Integer(newVal));
    }

    /**
     * Determines if the countryid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCountryidModified() {
        return countryid_is_modified; 
    }

    /**
     * Determines if the countryid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCountryidInitialized() {
        return countryid_is_initialized; 
    }

    /**
     * Getter method for fixedexrate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: currency.fixedexrate
     * <li>comments: ფიქსირებული გადაცვლის კურსი
     * <li>default value: true
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of fixedexrate
     */
    public Boolean getFixedexrate()
    {
        return fixedexrate; 
    }

    /**
     * Setter method for fixedexrate.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to fixedexrate
     */
    public void setFixedexrate(Boolean newVal) {
        if ((newVal != null && this.fixedexrate != null && newVal.equals(this.fixedexrate)) || 
            (newVal == null && this.fixedexrate == null && fixedexrate_is_initialized)) {
            return; 
        } 
        this.fixedexrate = newVal; 
        fixedexrate_is_modified = true; 
        fixedexrate_is_initialized = true; 
    }

    /**
     * Setter method for fixedexrate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to fixedexrate
     */
    public void setFixedexrate(boolean newVal) {
        setFixedexrate(new Boolean(newVal));
    }

    /**
     * Determines if the fixedexrate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFixedexrateModified() {
        return fixedexrate_is_modified; 
    }

    /**
     * Determines if the fixedexrate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFixedexrateInitialized() {
        return fixedexrate_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return currencyid_is_modified || 
		name_is_modified || 
		code_is_modified || 
		basic_is_modified || 
		icon_is_modified || 
		countryid_is_modified || 
		fixedexrate_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        currencyid_is_modified = false;
        name_is_modified = false;
        code_is_modified = false;
        basic_is_modified = false;
        icon_is_modified = false;
        countryid_is_modified = false;
        fixedexrate_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(CurrencyBean bean) {
        setCurrencyid(bean.getCurrencyid());
        setName(bean.getName());
        setCode(bean.getCode());
        setBasic(bean.getBasic());
        setIcon(bean.getIcon());
        setCountryid(bean.getCountryid());
        setFixedexrate(bean.getFixedexrate());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[currency] "
                 + "\n - currency.currencyid = " + (currencyid_is_initialized ? ("[" + (currencyid == null ? null : currencyid.toString()) + "]") : "not initialized") + ""
                 + "\n - currency.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - currency.code = " + (code_is_initialized ? ("[" + (code == null ? null : code.toString()) + "]") : "not initialized") + ""
                 + "\n - currency.basic = " + (basic_is_initialized ? ("[" + (basic == null ? null : basic.toString()) + "]") : "not initialized") + ""
                 + "\n - currency.icon = " + (icon_is_initialized ? ("[" + (icon == null ? null : icon.toString()) + "]") : "not initialized") + ""
                 + "\n - currency.countryid = " + (countryid_is_initialized ? ("[" + (countryid == null ? null : countryid.toString()) + "]") : "not initialized") + ""
                 + "\n - currency.fixedexrate = " + (fixedexrate_is_initialized ? ("[" + (fixedexrate == null ? null : fixedexrate.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
