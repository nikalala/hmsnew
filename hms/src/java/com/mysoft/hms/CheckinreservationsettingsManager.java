// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the checkinreservationsettings table.
 */
public class CheckinreservationsettingsManager
// extends+ 

// extends- 
{

    /**
     * Column checkinreservationsettingsid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_CHECKINRESERVATIONSETTINGSID = 0;
    public static final int TYPE_CHECKINRESERVATIONSETTINGSID = Types.INTEGER;
    public static final String NAME_CHECKINRESERVATIONSETTINGSID = "checkinreservationsettingsid";

    /**
     * Column hours24 of type Types.BIT mapped to Boolean.
     */
    public static final int ID_HOURS24 = 1;
    public static final int TYPE_HOURS24 = Types.BIT;
    public static final String NAME_HOURS24 = "hours24";

    /**
     * Column checkintime of type Types.TIME mapped to java.util.Date.
     */
    public static final int ID_CHECKINTIME = 2;
    public static final int TYPE_CHECKINTIME = Types.TIME;
    public static final String NAME_CHECKINTIME = "checkintime";

    /**
     * Column checkouttime of type Types.TIME mapped to java.util.Date.
     */
    public static final int ID_CHECKOUTTIME = 3;
    public static final int TYPE_CHECKOUTTIME = Types.TIME;
    public static final String NAME_CHECKOUTTIME = "checkouttime";

    /**
     * Column autopostdayuse of type Types.BIT mapped to Boolean.
     */
    public static final int ID_AUTOPOSTDAYUSE = 4;
    public static final int TYPE_AUTOPOSTDAYUSE = Types.BIT;
    public static final String NAME_AUTOPOSTDAYUSE = "autopostdayuse";

    /**
     * Column graceperioddayuse of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_GRACEPERIODDAYUSE = 5;
    public static final int TYPE_GRACEPERIODDAYUSE = Types.DOUBLE;
    public static final String NAME_GRACEPERIODDAYUSE = "graceperioddayuse";

    /**
     * Column dayusecharge of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_DAYUSECHARGE = 6;
    public static final int TYPE_DAYUSECHARGE = Types.DOUBLE;
    public static final String NAME_DAYUSECHARGE = "dayusecharge";

    /**
     * Column autopostforlatecheckout of type Types.BIT mapped to Boolean.
     */
    public static final int ID_AUTOPOSTFORLATECHECKOUT = 7;
    public static final int TYPE_AUTOPOSTFORLATECHECKOUT = Types.BIT;
    public static final String NAME_AUTOPOSTFORLATECHECKOUT = "autopostforlatecheckout";

    /**
     * Column graceperiodlate of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_GRACEPERIODLATE = 8;
    public static final int TYPE_GRACEPERIODLATE = Types.DOUBLE;
    public static final String NAME_GRACEPERIODLATE = "graceperiodlate";

    /**
     * Column latecheckoutcharge of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_LATECHECKOUTCHARGE = 9;
    public static final int TYPE_LATECHECKOUTCHARGE = Types.DOUBLE;
    public static final String NAME_LATECHECKOUTCHARGE = "latecheckoutcharge";

    /**
     * Column autopostearly of type Types.BIT mapped to Boolean.
     */
    public static final int ID_AUTOPOSTEARLY = 10;
    public static final int TYPE_AUTOPOSTEARLY = Types.BIT;
    public static final String NAME_AUTOPOSTEARLY = "autopostearly";

    /**
     * Column graceperiodearly of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_GRACEPERIODEARLY = 11;
    public static final int TYPE_GRACEPERIODEARLY = Types.DOUBLE;
    public static final String NAME_GRACEPERIODEARLY = "graceperiodearly";

    /**
     * Column earlycheckoutcahrge of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_EARLYCHECKOUTCAHRGE = 12;
    public static final int TYPE_EARLYCHECKOUTCAHRGE = Types.DOUBLE;
    public static final String NAME_EARLYCHECKOUTCAHRGE = "earlycheckoutcahrge";

    /**
     * Column postcancellationfee of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_POSTCANCELLATIONFEE = 13;
    public static final int TYPE_POSTCANCELLATIONFEE = Types.INTEGER;
    public static final String NAME_POSTCANCELLATIONFEE = "postcancellationfee";

    /**
     * Column amountcancell of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_AMOUNTCANCELL = 14;
    public static final int TYPE_AMOUNTCANCELL = Types.DOUBLE;
    public static final String NAME_AMOUNTCANCELL = "amountcancell";

    /**
     * Column totalchargecancell of type Types.BIT mapped to Boolean.
     */
    public static final int ID_TOTALCHARGECANCELL = 15;
    public static final int TYPE_TOTALCHARGECANCELL = Types.BIT;
    public static final String NAME_TOTALCHARGECANCELL = "totalchargecancell";

    /**
     * Column beyond of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_BEYOND = 16;
    public static final int TYPE_BEYOND = Types.INTEGER;
    public static final String NAME_BEYOND = "beyond";

    /**
     * Column within of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_WITHIN = 17;
    public static final int TYPE_WITHIN = Types.INTEGER;
    public static final String NAME_WITHIN = "within";

    /**
     * Column postnoshowfee of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_POSTNOSHOWFEE = 18;
    public static final int TYPE_POSTNOSHOWFEE = Types.INTEGER;
    public static final String NAME_POSTNOSHOWFEE = "postnoshowfee";

    /**
     * Column amountnoshow of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_AMOUNTNOSHOW = 19;
    public static final int TYPE_AMOUNTNOSHOW = Types.DOUBLE;
    public static final String NAME_AMOUNTNOSHOW = "amountnoshow";

    /**
     * Column totalchargenoshow of type Types.BIT mapped to Boolean.
     */
    public static final int ID_TOTALCHARGENOSHOW = 20;
    public static final int TYPE_TOTALCHARGENOSHOW = Types.BIT;
    public static final String NAME_TOTALCHARGENOSHOW = "totalchargenoshow";

    /**
     * Column finstartmonth of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_FINSTARTMONTH = 21;
    public static final int TYPE_FINSTARTMONTH = Types.INTEGER;
    public static final String NAME_FINSTARTMONTH = "finstartmonth";

    /**
     * Column finstartday of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_FINSTARTDAY = 22;
    public static final int TYPE_FINSTARTDAY = Types.INTEGER;
    public static final String NAME_FINSTARTDAY = "finstartday";

    /**
     * Column finendmonth of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_FINENDMONTH = 23;
    public static final int TYPE_FINENDMONTH = Types.INTEGER;
    public static final String NAME_FINENDMONTH = "finendmonth";

    /**
     * Column finendday of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_FINENDDAY = 24;
    public static final int TYPE_FINENDDAY = Types.INTEGER;
    public static final String NAME_FINENDDAY = "finendday";

    /**
     * Column guestnamereserv of type Types.BIT mapped to Boolean.
     */
    public static final int ID_GUESTNAMERESERV = 25;
    public static final int TYPE_GUESTNAMERESERV = Types.BIT;
    public static final String NAME_GUESTNAMERESERV = "guestnamereserv";

    /**
     * Column guestnamewalkin of type Types.BIT mapped to Boolean.
     */
    public static final int ID_GUESTNAMEWALKIN = 26;
    public static final int TYPE_GUESTNAMEWALKIN = Types.BIT;
    public static final String NAME_GUESTNAMEWALKIN = "guestnamewalkin";

    /**
     * Column guestidnreserv of type Types.BIT mapped to Boolean.
     */
    public static final int ID_GUESTIDNRESERV = 27;
    public static final int TYPE_GUESTIDNRESERV = Types.BIT;
    public static final String NAME_GUESTIDNRESERV = "guestidnreserv";

    /**
     * Column guestidnwalkin of type Types.BIT mapped to Boolean.
     */
    public static final int ID_GUESTIDNWALKIN = 28;
    public static final int TYPE_GUESTIDNWALKIN = Types.BIT;
    public static final String NAME_GUESTIDNWALKIN = "guestidnwalkin";

    /**
     * Column marketcodereserv of type Types.BIT mapped to Boolean.
     */
    public static final int ID_MARKETCODERESERV = 29;
    public static final int TYPE_MARKETCODERESERV = Types.BIT;
    public static final String NAME_MARKETCODERESERV = "marketcodereserv";

    /**
     * Column marketcodewalkin of type Types.BIT mapped to Boolean.
     */
    public static final int ID_MARKETCODEWALKIN = 30;
    public static final int TYPE_MARKETCODEWALKIN = Types.BIT;
    public static final String NAME_MARKETCODEWALKIN = "marketcodewalkin";

    /**
     * Column paymenttypereserv of type Types.BIT mapped to Boolean.
     */
    public static final int ID_PAYMENTTYPERESERV = 31;
    public static final int TYPE_PAYMENTTYPERESERV = Types.BIT;
    public static final String NAME_PAYMENTTYPERESERV = "paymenttypereserv";

    /**
     * Column paymenttypewalkin of type Types.BIT mapped to Boolean.
     */
    public static final int ID_PAYMENTTYPEWALKIN = 32;
    public static final int TYPE_PAYMENTTYPEWALKIN = Types.BIT;
    public static final String NAME_PAYMENTTYPEWALKIN = "paymenttypewalkin";

    /**
     * Column tareserv of type Types.BIT mapped to Boolean.
     */
    public static final int ID_TARESERV = 33;
    public static final int TYPE_TARESERV = Types.BIT;
    public static final String NAME_TARESERV = "tareserv";

    /**
     * Column tawalkin of type Types.BIT mapped to Boolean.
     */
    public static final int ID_TAWALKIN = 34;
    public static final int TYPE_TAWALKIN = Types.BIT;
    public static final String NAME_TAWALKIN = "tawalkin";

    /**
     * Column companyreserv of type Types.BIT mapped to Boolean.
     */
    public static final int ID_COMPANYRESERV = 35;
    public static final int TYPE_COMPANYRESERV = Types.BIT;
    public static final String NAME_COMPANYRESERV = "companyreserv";

    /**
     * Column companywalkin of type Types.BIT mapped to Boolean.
     */
    public static final int ID_COMPANYWALKIN = 36;
    public static final int TYPE_COMPANYWALKIN = Types.BIT;
    public static final String NAME_COMPANYWALKIN = "companywalkin";

    /**
     * Column bsourcereserv of type Types.BIT mapped to Boolean.
     */
    public static final int ID_BSOURCERESERV = 37;
    public static final int TYPE_BSOURCERESERV = Types.BIT;
    public static final String NAME_BSOURCERESERV = "bsourcereserv";

    /**
     * Column bsourcewalkin of type Types.BIT mapped to Boolean.
     */
    public static final int ID_BSOURCEWALKIN = 38;
    public static final int TYPE_BSOURCEWALKIN = Types.BIT;
    public static final String NAME_BSOURCEWALKIN = "bsourcewalkin";

    /**
     * Column nationalityreserv of type Types.BIT mapped to Boolean.
     */
    public static final int ID_NATIONALITYRESERV = 39;
    public static final int TYPE_NATIONALITYRESERV = Types.BIT;
    public static final String NAME_NATIONALITYRESERV = "nationalityreserv";

    /**
     * Column nationalitywalkin of type Types.BIT mapped to Boolean.
     */
    public static final int ID_NATIONALITYWALKIN = 40;
    public static final int TYPE_NATIONALITYWALKIN = Types.BIT;
    public static final String NAME_NATIONALITYWALKIN = "nationalitywalkin";

    /**
     * Column emailreservationvoucher of type Types.BIT mapped to Boolean.
     */
    public static final int ID_EMAILRESERVATIONVOUCHER = 41;
    public static final int TYPE_EMAILRESERVATIONVOUCHER = Types.BIT;
    public static final String NAME_EMAILRESERVATIONVOUCHER = "emailreservationvoucher";

    /**
     * Column nightauditdirty of type Types.BIT mapped to Boolean.
     */
    public static final int ID_NIGHTAUDITDIRTY = 42;
    public static final int TYPE_NIGHTAUDITDIRTY = Types.BIT;
    public static final String NAME_NIGHTAUDITDIRTY = "nightauditdirty";

    /**
     * Column overbooking of type Types.BIT mapped to Boolean.
     */
    public static final int ID_OVERBOOKING = 43;
    public static final int TYPE_OVERBOOKING = Types.BIT;
    public static final String NAME_OVERBOOKING = "overbooking";

    /**
     * Column baseoccupancy of type Types.BIT mapped to Boolean.
     */
    public static final int ID_BASEOCCUPANCY = 44;
    public static final int TYPE_BASEOCCUPANCY = Types.BIT;
    public static final String NAME_BASEOCCUPANCY = "baseoccupancy";

    /**
     * Column frontratemoderegular of type Types.BIT mapped to Boolean.
     */
    public static final int ID_FRONTRATEMODEREGULAR = 45;
    public static final int TYPE_FRONTRATEMODEREGULAR = Types.BIT;
    public static final String NAME_FRONTRATEMODEREGULAR = "frontratemoderegular";

    /**
     * Column sendreviewtoall of type Types.BIT mapped to Boolean.
     */
    public static final int ID_SENDREVIEWTOALL = 46;
    public static final int TYPE_SENDREVIEWTOALL = Types.BIT;
    public static final String NAME_SENDREVIEWTOALL = "sendreviewtoall";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 47;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 48;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column addressreserv of type Types.BIT mapped to Boolean.
     */
    public static final int ID_ADDRESSRESERV = 49;
    public static final int TYPE_ADDRESSRESERV = Types.BIT;
    public static final String NAME_ADDRESSRESERV = "addressreserv";

    /**
     * Column addresswalkin of type Types.BIT mapped to Boolean.
     */
    public static final int ID_ADDRESSWALKIN = 50;
    public static final int TYPE_ADDRESSWALKIN = Types.BIT;
    public static final String NAME_ADDRESSWALKIN = "addresswalkin";


    private static final String TABLE_NAME = "checkinreservationsettings";

    /**
     * Create an array of type string containing all the fields of the checkinreservationsettings table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "checkinreservationsettings.checkinreservationsettingsid"
        ,"checkinreservationsettings.hours24"
        ,"checkinreservationsettings.checkintime"
        ,"checkinreservationsettings.checkouttime"
        ,"checkinreservationsettings.autopostdayuse"
        ,"checkinreservationsettings.graceperioddayuse"
        ,"checkinreservationsettings.dayusecharge"
        ,"checkinreservationsettings.autopostforlatecheckout"
        ,"checkinreservationsettings.graceperiodlate"
        ,"checkinreservationsettings.latecheckoutcharge"
        ,"checkinreservationsettings.autopostearly"
        ,"checkinreservationsettings.graceperiodearly"
        ,"checkinreservationsettings.earlycheckoutcahrge"
        ,"checkinreservationsettings.postcancellationfee"
        ,"checkinreservationsettings.amountcancell"
        ,"checkinreservationsettings.totalchargecancell"
        ,"checkinreservationsettings.beyond"
        ,"checkinreservationsettings.within"
        ,"checkinreservationsettings.postnoshowfee"
        ,"checkinreservationsettings.amountnoshow"
        ,"checkinreservationsettings.totalchargenoshow"
        ,"checkinreservationsettings.finstartmonth"
        ,"checkinreservationsettings.finstartday"
        ,"checkinreservationsettings.finendmonth"
        ,"checkinreservationsettings.finendday"
        ,"checkinreservationsettings.guestnamereserv"
        ,"checkinreservationsettings.guestnamewalkin"
        ,"checkinreservationsettings.guestidnreserv"
        ,"checkinreservationsettings.guestidnwalkin"
        ,"checkinreservationsettings.marketcodereserv"
        ,"checkinreservationsettings.marketcodewalkin"
        ,"checkinreservationsettings.paymenttypereserv"
        ,"checkinreservationsettings.paymenttypewalkin"
        ,"checkinreservationsettings.tareserv"
        ,"checkinreservationsettings.tawalkin"
        ,"checkinreservationsettings.companyreserv"
        ,"checkinreservationsettings.companywalkin"
        ,"checkinreservationsettings.bsourcereserv"
        ,"checkinreservationsettings.bsourcewalkin"
        ,"checkinreservationsettings.nationalityreserv"
        ,"checkinreservationsettings.nationalitywalkin"
        ,"checkinreservationsettings.emailreservationvoucher"
        ,"checkinreservationsettings.nightauditdirty"
        ,"checkinreservationsettings.overbooking"
        ,"checkinreservationsettings.baseoccupancy"
        ,"checkinreservationsettings.frontratemoderegular"
        ,"checkinreservationsettings.sendreviewtoall"
        ,"checkinreservationsettings.regbyid"
        ,"checkinreservationsettings.regdate"
        ,"checkinreservationsettings.addressreserv"
        ,"checkinreservationsettings.addresswalkin"
    };

    /**
     * Field that contains the comma separated fields of the checkinreservationsettings table.
     */
    private static final String ALL_FIELDS = "checkinreservationsettings.checkinreservationsettingsid"
                            + ",checkinreservationsettings.hours24"
                            + ",checkinreservationsettings.checkintime"
                            + ",checkinreservationsettings.checkouttime"
                            + ",checkinreservationsettings.autopostdayuse"
                            + ",checkinreservationsettings.graceperioddayuse"
                            + ",checkinreservationsettings.dayusecharge"
                            + ",checkinreservationsettings.autopostforlatecheckout"
                            + ",checkinreservationsettings.graceperiodlate"
                            + ",checkinreservationsettings.latecheckoutcharge"
                            + ",checkinreservationsettings.autopostearly"
                            + ",checkinreservationsettings.graceperiodearly"
                            + ",checkinreservationsettings.earlycheckoutcahrge"
                            + ",checkinreservationsettings.postcancellationfee"
                            + ",checkinreservationsettings.amountcancell"
                            + ",checkinreservationsettings.totalchargecancell"
                            + ",checkinreservationsettings.beyond"
                            + ",checkinreservationsettings.within"
                            + ",checkinreservationsettings.postnoshowfee"
                            + ",checkinreservationsettings.amountnoshow"
                            + ",checkinreservationsettings.totalchargenoshow"
                            + ",checkinreservationsettings.finstartmonth"
                            + ",checkinreservationsettings.finstartday"
                            + ",checkinreservationsettings.finendmonth"
                            + ",checkinreservationsettings.finendday"
                            + ",checkinreservationsettings.guestnamereserv"
                            + ",checkinreservationsettings.guestnamewalkin"
                            + ",checkinreservationsettings.guestidnreserv"
                            + ",checkinreservationsettings.guestidnwalkin"
                            + ",checkinreservationsettings.marketcodereserv"
                            + ",checkinreservationsettings.marketcodewalkin"
                            + ",checkinreservationsettings.paymenttypereserv"
                            + ",checkinreservationsettings.paymenttypewalkin"
                            + ",checkinreservationsettings.tareserv"
                            + ",checkinreservationsettings.tawalkin"
                            + ",checkinreservationsettings.companyreserv"
                            + ",checkinreservationsettings.companywalkin"
                            + ",checkinreservationsettings.bsourcereserv"
                            + ",checkinreservationsettings.bsourcewalkin"
                            + ",checkinreservationsettings.nationalityreserv"
                            + ",checkinreservationsettings.nationalitywalkin"
                            + ",checkinreservationsettings.emailreservationvoucher"
                            + ",checkinreservationsettings.nightauditdirty"
                            + ",checkinreservationsettings.overbooking"
                            + ",checkinreservationsettings.baseoccupancy"
                            + ",checkinreservationsettings.frontratemoderegular"
                            + ",checkinreservationsettings.sendreviewtoall"
                            + ",checkinreservationsettings.regbyid"
                            + ",checkinreservationsettings.regdate"
                            + ",checkinreservationsettings.addressreserv"
                            + ",checkinreservationsettings.addresswalkin";

    private static CheckinreservationsettingsManager singleton = new CheckinreservationsettingsManager();

    /**
     * Get the CheckinreservationsettingsManager singleton.
     *
     * @return CheckinreservationsettingsManager 
     */
    synchronized public static CheckinreservationsettingsManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own CheckinreservationsettingsManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(CheckinreservationsettingsManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new CheckinreservationsettingsBean instance.
     *
     * @return the new CheckinreservationsettingsBean 
     */
    public CheckinreservationsettingsBean createCheckinreservationsettingsBean()
    {
        return new CheckinreservationsettingsBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a CheckinreservationsettingsBean from the checkinreservationsettings using its key fields.
     *
     * @return a unique CheckinreservationsettingsBean 
     */
    //12
    public CheckinreservationsettingsBean loadByPrimaryKey(Integer checkinreservationsettingsid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM checkinreservationsettings WHERE checkinreservationsettings.checkinreservationsettingsid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, checkinreservationsettingsid);
            CheckinreservationsettingsBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer checkinreservationsettingsid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from checkinreservationsettings WHERE checkinreservationsettings.checkinreservationsettingsid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, checkinreservationsettingsid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads CheckinreservationsettingsBean array from the checkinreservationsettings table using its regbyid field.
     *
     * @return an array of CheckinreservationsettingsBean 
     */
    // LOAD BY IMPORTED KEY
    public CheckinreservationsettingsBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM checkinreservationsettings WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the checkinreservationsettings table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM checkinreservationsettings WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the PersonnelBean object from the checkinreservationsettings.personnelid field.
     *
     * @param pObject the CheckinreservationsettingsBean 
     * @return the associated PersonnelBean pObject
     */
    // GET IMPORTED
    public PersonnelBean getPersonnelBean(CheckinreservationsettingsBean pObject) throws SQLException
    {
        PersonnelBean other = PersonnelManager.getInstance().createPersonnelBean();
        other.setPersonnelid(pObject.getRegbyid());
        return PersonnelManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the CheckinreservationsettingsBean object to the PersonnelBean object.
     *
     * @param pObject the CheckinreservationsettingsBean object to use
     * @param pObjectToBeSet the PersonnelBean object to associate to the CheckinreservationsettingsBean 
     * @return the associated PersonnelBean pObject
     */
    // SET IMPORTED
    public CheckinreservationsettingsBean setPersonnelBean(CheckinreservationsettingsBean pObject,PersonnelBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonnelid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from checkinreservationsettings.
     *
     * @return an array of CheckinreservationsettingsManager pObject
     */
    //38
    public CheckinreservationsettingsBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM checkinreservationsettings",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of CheckinreservationsettingsBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting CheckinreservationsettingsBean table 
     */
    //49
    public CheckinreservationsettingsBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of CheckinreservationsettingsBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting CheckinreservationsettingsBean table 
     */
    //51
    public CheckinreservationsettingsBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from checkinreservationsettings " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from checkinreservationsettings ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (CheckinreservationsettingsBean[])v.toArray(new CheckinreservationsettingsBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from checkinreservationsettings table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the checkinreservationsettings table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM checkinreservationsettings " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the CheckinreservationsettingsBean pObject into the database.
     *
     * @param pObject the CheckinreservationsettingsBean pObject to be saved
     */
    //100
    public CheckinreservationsettingsBean save(CheckinreservationsettingsBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isCheckinreservationsettingsidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('checkinreservationsettingsid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setCheckinreservationsettingsid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into checkinreservationsettings (");
    
                if (pObject.isCheckinreservationsettingsidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("checkinreservationsettingsid");
                    _dirtyCount++;
                }

                if (pObject.isHours24Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("hours24");
                    _dirtyCount++;
                }

                if (pObject.isCheckintimeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("checkintime");
                    _dirtyCount++;
                }

                if (pObject.isCheckouttimeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("checkouttime");
                    _dirtyCount++;
                }

                if (pObject.isAutopostdayuseModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("autopostdayuse");
                    _dirtyCount++;
                }

                if (pObject.isGraceperioddayuseModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("graceperioddayuse");
                    _dirtyCount++;
                }

                if (pObject.isDayusechargeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("dayusecharge");
                    _dirtyCount++;
                }

                if (pObject.isAutopostforlatecheckoutModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("autopostforlatecheckout");
                    _dirtyCount++;
                }

                if (pObject.isGraceperiodlateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("graceperiodlate");
                    _dirtyCount++;
                }

                if (pObject.isLatecheckoutchargeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("latecheckoutcharge");
                    _dirtyCount++;
                }

                if (pObject.isAutopostearlyModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("autopostearly");
                    _dirtyCount++;
                }

                if (pObject.isGraceperiodearlyModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("graceperiodearly");
                    _dirtyCount++;
                }

                if (pObject.isEarlycheckoutcahrgeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("earlycheckoutcahrge");
                    _dirtyCount++;
                }

                if (pObject.isPostcancellationfeeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("postcancellationfee");
                    _dirtyCount++;
                }

                if (pObject.isAmountcancellModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("amountcancell");
                    _dirtyCount++;
                }

                if (pObject.isTotalchargecancellModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("totalchargecancell");
                    _dirtyCount++;
                }

                if (pObject.isBeyondModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("beyond");
                    _dirtyCount++;
                }

                if (pObject.isWithinModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("within");
                    _dirtyCount++;
                }

                if (pObject.isPostnoshowfeeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("postnoshowfee");
                    _dirtyCount++;
                }

                if (pObject.isAmountnoshowModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("amountnoshow");
                    _dirtyCount++;
                }

                if (pObject.isTotalchargenoshowModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("totalchargenoshow");
                    _dirtyCount++;
                }

                if (pObject.isFinstartmonthModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("finstartmonth");
                    _dirtyCount++;
                }

                if (pObject.isFinstartdayModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("finstartday");
                    _dirtyCount++;
                }

                if (pObject.isFinendmonthModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("finendmonth");
                    _dirtyCount++;
                }

                if (pObject.isFinenddayModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("finendday");
                    _dirtyCount++;
                }

                if (pObject.isGuestnamereservModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("guestnamereserv");
                    _dirtyCount++;
                }

                if (pObject.isGuestnamewalkinModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("guestnamewalkin");
                    _dirtyCount++;
                }

                if (pObject.isGuestidnreservModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("guestidnreserv");
                    _dirtyCount++;
                }

                if (pObject.isGuestidnwalkinModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("guestidnwalkin");
                    _dirtyCount++;
                }

                if (pObject.isMarketcodereservModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("marketcodereserv");
                    _dirtyCount++;
                }

                if (pObject.isMarketcodewalkinModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("marketcodewalkin");
                    _dirtyCount++;
                }

                if (pObject.isPaymenttypereservModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("paymenttypereserv");
                    _dirtyCount++;
                }

                if (pObject.isPaymenttypewalkinModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("paymenttypewalkin");
                    _dirtyCount++;
                }

                if (pObject.isTareservModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("tareserv");
                    _dirtyCount++;
                }

                if (pObject.isTawalkinModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("tawalkin");
                    _dirtyCount++;
                }

                if (pObject.isCompanyreservModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("companyreserv");
                    _dirtyCount++;
                }

                if (pObject.isCompanywalkinModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("companywalkin");
                    _dirtyCount++;
                }

                if (pObject.isBsourcereservModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("bsourcereserv");
                    _dirtyCount++;
                }

                if (pObject.isBsourcewalkinModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("bsourcewalkin");
                    _dirtyCount++;
                }

                if (pObject.isNationalityreservModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("nationalityreserv");
                    _dirtyCount++;
                }

                if (pObject.isNationalitywalkinModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("nationalitywalkin");
                    _dirtyCount++;
                }

                if (pObject.isEmailreservationvoucherModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("emailreservationvoucher");
                    _dirtyCount++;
                }

                if (pObject.isNightauditdirtyModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("nightauditdirty");
                    _dirtyCount++;
                }

                if (pObject.isOverbookingModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("overbooking");
                    _dirtyCount++;
                }

                if (pObject.isBaseoccupancyModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("baseoccupancy");
                    _dirtyCount++;
                }

                if (pObject.isFrontratemoderegularModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("frontratemoderegular");
                    _dirtyCount++;
                }

                if (pObject.isSendreviewtoallModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sendreviewtoall");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isAddressreservModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("addressreserv");
                    _dirtyCount++;
                }

                if (pObject.isAddresswalkinModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("addresswalkin");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isCheckinreservationsettingsidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCheckinreservationsettingsid());
                }
    
                if (pObject.isHours24Modified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getHours24());
                }
    
                if (pObject.isCheckintimeModified()) {
                    if (pObject.getCheckintime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getCheckintime().getTime()));
                }
    
                if (pObject.isCheckouttimeModified()) {
                    if (pObject.getCheckouttime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getCheckouttime().getTime()));
                }
    
                if (pObject.isAutopostdayuseModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostdayuse());
                }
    
                if (pObject.isGraceperioddayuseModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperioddayuse());
                }
    
                if (pObject.isDayusechargeModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getDayusecharge());
                }
    
                if (pObject.isAutopostforlatecheckoutModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostforlatecheckout());
                }
    
                if (pObject.isGraceperiodlateModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperiodlate());
                }
    
                if (pObject.isLatecheckoutchargeModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getLatecheckoutcharge());
                }
    
                if (pObject.isAutopostearlyModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostearly());
                }
    
                if (pObject.isGraceperiodearlyModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperiodearly());
                }
    
                if (pObject.isEarlycheckoutcahrgeModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getEarlycheckoutcahrge());
                }
    
                if (pObject.isPostcancellationfeeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPostcancellationfee());
                }
    
                if (pObject.isAmountcancellModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountcancell());
                }
    
                if (pObject.isTotalchargecancellModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getTotalchargecancell());
                }
    
                if (pObject.isBeyondModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getBeyond());
                }
    
                if (pObject.isWithinModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getWithin());
                }
    
                if (pObject.isPostnoshowfeeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPostnoshowfee());
                }
    
                if (pObject.isAmountnoshowModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountnoshow());
                }
    
                if (pObject.isTotalchargenoshowModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getTotalchargenoshow());
                }
    
                if (pObject.isFinstartmonthModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFinstartmonth());
                }
    
                if (pObject.isFinstartdayModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFinstartday());
                }
    
                if (pObject.isFinendmonthModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFinendmonth());
                }
    
                if (pObject.isFinenddayModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFinendday());
                }
    
                if (pObject.isGuestnamereservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestnamereserv());
                }
    
                if (pObject.isGuestnamewalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestnamewalkin());
                }
    
                if (pObject.isGuestidnreservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestidnreserv());
                }
    
                if (pObject.isGuestidnwalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestidnwalkin());
                }
    
                if (pObject.isMarketcodereservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getMarketcodereserv());
                }
    
                if (pObject.isMarketcodewalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getMarketcodewalkin());
                }
    
                if (pObject.isPaymenttypereservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getPaymenttypereserv());
                }
    
                if (pObject.isPaymenttypewalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getPaymenttypewalkin());
                }
    
                if (pObject.isTareservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getTareserv());
                }
    
                if (pObject.isTawalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getTawalkin());
                }
    
                if (pObject.isCompanyreservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getCompanyreserv());
                }
    
                if (pObject.isCompanywalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getCompanywalkin());
                }
    
                if (pObject.isBsourcereservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsourcereserv());
                }
    
                if (pObject.isBsourcewalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsourcewalkin());
                }
    
                if (pObject.isNationalityreservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getNationalityreserv());
                }
    
                if (pObject.isNationalitywalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getNationalitywalkin());
                }
    
                if (pObject.isEmailreservationvoucherModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getEmailreservationvoucher());
                }
    
                if (pObject.isNightauditdirtyModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getNightauditdirty());
                }
    
                if (pObject.isOverbookingModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getOverbooking());
                }
    
                if (pObject.isBaseoccupancyModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getBaseoccupancy());
                }
    
                if (pObject.isFrontratemoderegularModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getFrontratemoderegular());
                }
    
                if (pObject.isSendreviewtoallModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getSendreviewtoall());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isAddressreservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getAddressreserv());
                }
    
                if (pObject.isAddresswalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getAddresswalkin());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE checkinreservationsettings SET ");
                boolean useComma=false;

                if (pObject.isCheckinreservationsettingsidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("checkinreservationsettingsid").append("=?");
                }

                if (pObject.isHours24Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("hours24").append("=?");
                }

                if (pObject.isCheckintimeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("checkintime").append("=?");
                }

                if (pObject.isCheckouttimeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("checkouttime").append("=?");
                }

                if (pObject.isAutopostdayuseModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("autopostdayuse").append("=?");
                }

                if (pObject.isGraceperioddayuseModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("graceperioddayuse").append("=?");
                }

                if (pObject.isDayusechargeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("dayusecharge").append("=?");
                }

                if (pObject.isAutopostforlatecheckoutModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("autopostforlatecheckout").append("=?");
                }

                if (pObject.isGraceperiodlateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("graceperiodlate").append("=?");
                }

                if (pObject.isLatecheckoutchargeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("latecheckoutcharge").append("=?");
                }

                if (pObject.isAutopostearlyModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("autopostearly").append("=?");
                }

                if (pObject.isGraceperiodearlyModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("graceperiodearly").append("=?");
                }

                if (pObject.isEarlycheckoutcahrgeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("earlycheckoutcahrge").append("=?");
                }

                if (pObject.isPostcancellationfeeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("postcancellationfee").append("=?");
                }

                if (pObject.isAmountcancellModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("amountcancell").append("=?");
                }

                if (pObject.isTotalchargecancellModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("totalchargecancell").append("=?");
                }

                if (pObject.isBeyondModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("beyond").append("=?");
                }

                if (pObject.isWithinModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("within").append("=?");
                }

                if (pObject.isPostnoshowfeeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("postnoshowfee").append("=?");
                }

                if (pObject.isAmountnoshowModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("amountnoshow").append("=?");
                }

                if (pObject.isTotalchargenoshowModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("totalchargenoshow").append("=?");
                }

                if (pObject.isFinstartmonthModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("finstartmonth").append("=?");
                }

                if (pObject.isFinstartdayModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("finstartday").append("=?");
                }

                if (pObject.isFinendmonthModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("finendmonth").append("=?");
                }

                if (pObject.isFinenddayModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("finendday").append("=?");
                }

                if (pObject.isGuestnamereservModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("guestnamereserv").append("=?");
                }

                if (pObject.isGuestnamewalkinModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("guestnamewalkin").append("=?");
                }

                if (pObject.isGuestidnreservModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("guestidnreserv").append("=?");
                }

                if (pObject.isGuestidnwalkinModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("guestidnwalkin").append("=?");
                }

                if (pObject.isMarketcodereservModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("marketcodereserv").append("=?");
                }

                if (pObject.isMarketcodewalkinModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("marketcodewalkin").append("=?");
                }

                if (pObject.isPaymenttypereservModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("paymenttypereserv").append("=?");
                }

                if (pObject.isPaymenttypewalkinModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("paymenttypewalkin").append("=?");
                }

                if (pObject.isTareservModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("tareserv").append("=?");
                }

                if (pObject.isTawalkinModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("tawalkin").append("=?");
                }

                if (pObject.isCompanyreservModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("companyreserv").append("=?");
                }

                if (pObject.isCompanywalkinModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("companywalkin").append("=?");
                }

                if (pObject.isBsourcereservModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("bsourcereserv").append("=?");
                }

                if (pObject.isBsourcewalkinModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("bsourcewalkin").append("=?");
                }

                if (pObject.isNationalityreservModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("nationalityreserv").append("=?");
                }

                if (pObject.isNationalitywalkinModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("nationalitywalkin").append("=?");
                }

                if (pObject.isEmailreservationvoucherModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("emailreservationvoucher").append("=?");
                }

                if (pObject.isNightauditdirtyModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("nightauditdirty").append("=?");
                }

                if (pObject.isOverbookingModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("overbooking").append("=?");
                }

                if (pObject.isBaseoccupancyModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("baseoccupancy").append("=?");
                }

                if (pObject.isFrontratemoderegularModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("frontratemoderegular").append("=?");
                }

                if (pObject.isSendreviewtoallModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sendreviewtoall").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isAddressreservModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("addressreserv").append("=?");
                }

                if (pObject.isAddresswalkinModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("addresswalkin").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("checkinreservationsettings.checkinreservationsettingsid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isCheckinreservationsettingsidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCheckinreservationsettingsid());
                }

                if (pObject.isHours24Modified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getHours24());
                }

                if (pObject.isCheckintimeModified()) {
                      if (pObject.getCheckintime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getCheckintime().getTime()));
                }

                if (pObject.isCheckouttimeModified()) {
                      if (pObject.getCheckouttime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getCheckouttime().getTime()));
                }

                if (pObject.isAutopostdayuseModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostdayuse());
                }

                if (pObject.isGraceperioddayuseModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperioddayuse());
                }

                if (pObject.isDayusechargeModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getDayusecharge());
                }

                if (pObject.isAutopostforlatecheckoutModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostforlatecheckout());
                }

                if (pObject.isGraceperiodlateModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperiodlate());
                }

                if (pObject.isLatecheckoutchargeModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getLatecheckoutcharge());
                }

                if (pObject.isAutopostearlyModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostearly());
                }

                if (pObject.isGraceperiodearlyModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperiodearly());
                }

                if (pObject.isEarlycheckoutcahrgeModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getEarlycheckoutcahrge());
                }

                if (pObject.isPostcancellationfeeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getPostcancellationfee());
                }

                if (pObject.isAmountcancellModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountcancell());
                }

                if (pObject.isTotalchargecancellModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getTotalchargecancell());
                }

                if (pObject.isBeyondModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getBeyond());
                }

                if (pObject.isWithinModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getWithin());
                }

                if (pObject.isPostnoshowfeeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getPostnoshowfee());
                }

                if (pObject.isAmountnoshowModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountnoshow());
                }

                if (pObject.isTotalchargenoshowModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getTotalchargenoshow());
                }

                if (pObject.isFinstartmonthModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getFinstartmonth());
                }

                if (pObject.isFinstartdayModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getFinstartday());
                }

                if (pObject.isFinendmonthModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getFinendmonth());
                }

                if (pObject.isFinenddayModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getFinendday());
                }

                if (pObject.isGuestnamereservModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestnamereserv());
                }

                if (pObject.isGuestnamewalkinModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestnamewalkin());
                }

                if (pObject.isGuestidnreservModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestidnreserv());
                }

                if (pObject.isGuestidnwalkinModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestidnwalkin());
                }

                if (pObject.isMarketcodereservModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getMarketcodereserv());
                }

                if (pObject.isMarketcodewalkinModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getMarketcodewalkin());
                }

                if (pObject.isPaymenttypereservModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getPaymenttypereserv());
                }

                if (pObject.isPaymenttypewalkinModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getPaymenttypewalkin());
                }

                if (pObject.isTareservModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getTareserv());
                }

                if (pObject.isTawalkinModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getTawalkin());
                }

                if (pObject.isCompanyreservModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getCompanyreserv());
                }

                if (pObject.isCompanywalkinModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getCompanywalkin());
                }

                if (pObject.isBsourcereservModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsourcereserv());
                }

                if (pObject.isBsourcewalkinModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsourcewalkin());
                }

                if (pObject.isNationalityreservModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getNationalityreserv());
                }

                if (pObject.isNationalitywalkinModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getNationalitywalkin());
                }

                if (pObject.isEmailreservationvoucherModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getEmailreservationvoucher());
                }

                if (pObject.isNightauditdirtyModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getNightauditdirty());
                }

                if (pObject.isOverbookingModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getOverbooking());
                }

                if (pObject.isBaseoccupancyModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getBaseoccupancy());
                }

                if (pObject.isFrontratemoderegularModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getFrontratemoderegular());
                }

                if (pObject.isSendreviewtoallModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getSendreviewtoall());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isAddressreservModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getAddressreserv());
                }

                if (pObject.isAddresswalkinModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getAddresswalkin());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCheckinreservationsettingsid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of CheckinreservationsettingsBean pObjects into the database.
     *
     * @param pObjects the CheckinreservationsettingsBean pObject table to be saved
     * @return the saved CheckinreservationsettingsBean array.
     */
    //65
    public CheckinreservationsettingsBean[] save(CheckinreservationsettingsBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique CheckinreservationsettingsBean pObject from a template one giving a c
     *
     * @param pObject the CheckinreservationsettingsBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public CheckinreservationsettingsBean loadUniqueUsingTemplate(CheckinreservationsettingsBean pObject) throws SQLException
    {
         CheckinreservationsettingsBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of CheckinreservationsettingsBean from a template one.
     *
     * @param pObject the CheckinreservationsettingsBean template to look for
     * @return all the CheckinreservationsettingsBean matching the template
     */
    //88
    public CheckinreservationsettingsBean[] loadUsingTemplate(CheckinreservationsettingsBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from checkinreservationsettings WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isCheckinreservationsettingsidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("checkinreservationsettingsid= ?");
             }
    
             if (pObject.isHours24Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("hours24= ?");
             }
    
             if (pObject.isCheckintimeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("checkintime= ?");
             }
    
             if (pObject.isCheckouttimeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("checkouttime= ?");
             }
    
             if (pObject.isAutopostdayuseModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("autopostdayuse= ?");
             }
    
             if (pObject.isGraceperioddayuseModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("graceperioddayuse= ?");
             }
    
             if (pObject.isDayusechargeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("dayusecharge= ?");
             }
    
             if (pObject.isAutopostforlatecheckoutModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("autopostforlatecheckout= ?");
             }
    
             if (pObject.isGraceperiodlateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("graceperiodlate= ?");
             }
    
             if (pObject.isLatecheckoutchargeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("latecheckoutcharge= ?");
             }
    
             if (pObject.isAutopostearlyModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("autopostearly= ?");
             }
    
             if (pObject.isGraceperiodearlyModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("graceperiodearly= ?");
             }
    
             if (pObject.isEarlycheckoutcahrgeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("earlycheckoutcahrge= ?");
             }
    
             if (pObject.isPostcancellationfeeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("postcancellationfee= ?");
             }
    
             if (pObject.isAmountcancellModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amountcancell= ?");
             }
    
             if (pObject.isTotalchargecancellModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("totalchargecancell= ?");
             }
    
             if (pObject.isBeyondModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("beyond= ?");
             }
    
             if (pObject.isWithinModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("within= ?");
             }
    
             if (pObject.isPostnoshowfeeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("postnoshowfee= ?");
             }
    
             if (pObject.isAmountnoshowModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amountnoshow= ?");
             }
    
             if (pObject.isTotalchargenoshowModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("totalchargenoshow= ?");
             }
    
             if (pObject.isFinstartmonthModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("finstartmonth= ?");
             }
    
             if (pObject.isFinstartdayModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("finstartday= ?");
             }
    
             if (pObject.isFinendmonthModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("finendmonth= ?");
             }
    
             if (pObject.isFinenddayModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("finendday= ?");
             }
    
             if (pObject.isGuestnamereservModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestnamereserv= ?");
             }
    
             if (pObject.isGuestnamewalkinModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestnamewalkin= ?");
             }
    
             if (pObject.isGuestidnreservModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestidnreserv= ?");
             }
    
             if (pObject.isGuestidnwalkinModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestidnwalkin= ?");
             }
    
             if (pObject.isMarketcodereservModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("marketcodereserv= ?");
             }
    
             if (pObject.isMarketcodewalkinModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("marketcodewalkin= ?");
             }
    
             if (pObject.isPaymenttypereservModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymenttypereserv= ?");
             }
    
             if (pObject.isPaymenttypewalkinModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymenttypewalkin= ?");
             }
    
             if (pObject.isTareservModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tareserv= ?");
             }
    
             if (pObject.isTawalkinModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tawalkin= ?");
             }
    
             if (pObject.isCompanyreservModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyreserv= ?");
             }
    
             if (pObject.isCompanywalkinModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companywalkin= ?");
             }
    
             if (pObject.isBsourcereservModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bsourcereserv= ?");
             }
    
             if (pObject.isBsourcewalkinModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bsourcewalkin= ?");
             }
    
             if (pObject.isNationalityreservModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nationalityreserv= ?");
             }
    
             if (pObject.isNationalitywalkinModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nationalitywalkin= ?");
             }
    
             if (pObject.isEmailreservationvoucherModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("emailreservationvoucher= ?");
             }
    
             if (pObject.isNightauditdirtyModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nightauditdirty= ?");
             }
    
             if (pObject.isOverbookingModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("overbooking= ?");
             }
    
             if (pObject.isBaseoccupancyModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("baseoccupancy= ?");
             }
    
             if (pObject.isFrontratemoderegularModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("frontratemoderegular= ?");
             }
    
             if (pObject.isSendreviewtoallModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sendreviewtoall= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isAddressreservModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("addressreserv= ?");
             }
    
             if (pObject.isAddresswalkinModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("addresswalkin= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isCheckinreservationsettingsidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCheckinreservationsettingsid());
             }
    
             if (pObject.isHours24Modified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getHours24());
             }
    
             if (pObject.isCheckintimeModified()) {
                 if (pObject.getCheckintime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getCheckintime().getTime()));
             }
    
             if (pObject.isCheckouttimeModified()) {
                 if (pObject.getCheckouttime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getCheckouttime().getTime()));
             }
    
             if (pObject.isAutopostdayuseModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostdayuse());
             }
    
             if (pObject.isGraceperioddayuseModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperioddayuse());
             }
    
             if (pObject.isDayusechargeModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getDayusecharge());
             }
    
             if (pObject.isAutopostforlatecheckoutModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostforlatecheckout());
             }
    
             if (pObject.isGraceperiodlateModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperiodlate());
             }
    
             if (pObject.isLatecheckoutchargeModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getLatecheckoutcharge());
             }
    
             if (pObject.isAutopostearlyModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostearly());
             }
    
             if (pObject.isGraceperiodearlyModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperiodearly());
             }
    
             if (pObject.isEarlycheckoutcahrgeModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getEarlycheckoutcahrge());
             }
    
             if (pObject.isPostcancellationfeeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getPostcancellationfee());
             }
    
             if (pObject.isAmountcancellModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountcancell());
             }
    
             if (pObject.isTotalchargecancellModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getTotalchargecancell());
             }
    
             if (pObject.isBeyondModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getBeyond());
             }
    
             if (pObject.isWithinModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getWithin());
             }
    
             if (pObject.isPostnoshowfeeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getPostnoshowfee());
             }
    
             if (pObject.isAmountnoshowModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountnoshow());
             }
    
             if (pObject.isTotalchargenoshowModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getTotalchargenoshow());
             }
    
             if (pObject.isFinstartmonthModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getFinstartmonth());
             }
    
             if (pObject.isFinstartdayModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getFinstartday());
             }
    
             if (pObject.isFinendmonthModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getFinendmonth());
             }
    
             if (pObject.isFinenddayModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getFinendday());
             }
    
             if (pObject.isGuestnamereservModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestnamereserv());
             }
    
             if (pObject.isGuestnamewalkinModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestnamewalkin());
             }
    
             if (pObject.isGuestidnreservModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestidnreserv());
             }
    
             if (pObject.isGuestidnwalkinModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestidnwalkin());
             }
    
             if (pObject.isMarketcodereservModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getMarketcodereserv());
             }
    
             if (pObject.isMarketcodewalkinModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getMarketcodewalkin());
             }
    
             if (pObject.isPaymenttypereservModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getPaymenttypereserv());
             }
    
             if (pObject.isPaymenttypewalkinModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getPaymenttypewalkin());
             }
    
             if (pObject.isTareservModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getTareserv());
             }
    
             if (pObject.isTawalkinModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getTawalkin());
             }
    
             if (pObject.isCompanyreservModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getCompanyreserv());
             }
    
             if (pObject.isCompanywalkinModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getCompanywalkin());
             }
    
             if (pObject.isBsourcereservModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsourcereserv());
             }
    
             if (pObject.isBsourcewalkinModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsourcewalkin());
             }
    
             if (pObject.isNationalityreservModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getNationalityreserv());
             }
    
             if (pObject.isNationalitywalkinModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getNationalitywalkin());
             }
    
             if (pObject.isEmailreservationvoucherModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getEmailreservationvoucher());
             }
    
             if (pObject.isNightauditdirtyModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getNightauditdirty());
             }
    
             if (pObject.isOverbookingModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getOverbooking());
             }
    
             if (pObject.isBaseoccupancyModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getBaseoccupancy());
             }
    
             if (pObject.isFrontratemoderegularModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getFrontratemoderegular());
             }
    
             if (pObject.isSendreviewtoallModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getSendreviewtoall());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isAddressreservModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getAddressreserv());
             }
    
             if (pObject.isAddresswalkinModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getAddresswalkin());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a CheckinreservationsettingsBean template.
     *
     * @param pObject the CheckinreservationsettingsBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(CheckinreservationsettingsBean pObject) throws SQLException
    {
        if (pObject.isCheckinreservationsettingsidInitialized())
            return deleteByPrimaryKey(pObject.getCheckinreservationsettingsid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM checkinreservationsettings WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isCheckinreservationsettingsidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("checkinreservationsettingsid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isHours24Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("hours24").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCheckintimeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("checkintime").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCheckouttimeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("checkouttime").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAutopostdayuseInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("autopostdayuse").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGraceperioddayuseInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("graceperioddayuse").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDayusechargeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("dayusecharge").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAutopostforlatecheckoutInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("autopostforlatecheckout").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGraceperiodlateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("graceperiodlate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLatecheckoutchargeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("latecheckoutcharge").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAutopostearlyInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("autopostearly").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGraceperiodearlyInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("graceperiodearly").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isEarlycheckoutcahrgeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("earlycheckoutcahrge").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPostcancellationfeeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("postcancellationfee").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAmountcancellInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("amountcancell").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTotalchargecancellInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("totalchargecancell").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBeyondInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("beyond").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isWithinInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("within").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPostnoshowfeeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("postnoshowfee").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAmountnoshowInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("amountnoshow").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTotalchargenoshowInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("totalchargenoshow").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFinstartmonthInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("finstartmonth").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFinstartdayInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("finstartday").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFinendmonthInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("finendmonth").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFinenddayInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("finendday").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGuestnamereservInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("guestnamereserv").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGuestnamewalkinInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("guestnamewalkin").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGuestidnreservInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("guestidnreserv").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGuestidnwalkinInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("guestidnwalkin").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMarketcodereservInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("marketcodereserv").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMarketcodewalkinInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("marketcodewalkin").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPaymenttypereservInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("paymenttypereserv").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPaymenttypewalkinInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("paymenttypewalkin").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTareservInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("tareserv").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTawalkinInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("tawalkin").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCompanyreservInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("companyreserv").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCompanywalkinInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("companywalkin").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBsourcereservInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("bsourcereserv").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBsourcewalkinInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("bsourcewalkin").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNationalityreservInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("nationalityreserv").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNationalitywalkinInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("nationalitywalkin").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isEmailreservationvoucherInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("emailreservationvoucher").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNightauditdirtyInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("nightauditdirty").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isOverbookingInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("overbooking").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBaseoccupancyInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("baseoccupancy").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFrontratemoderegularInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("frontratemoderegular").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSendreviewtoallInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sendreviewtoall").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAddressreservInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("addressreserv").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAddresswalkinInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("addresswalkin").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isCheckinreservationsettingsidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCheckinreservationsettingsid());
            }
    
            if (pObject.isHours24Initialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getHours24());
            }
    
            if (pObject.isCheckintimeInitialized()) {
                if (pObject.getCheckintime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getCheckintime().getTime()));
            }
    
            if (pObject.isCheckouttimeInitialized()) {
                if (pObject.getCheckouttime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getCheckouttime().getTime()));
            }
    
            if (pObject.isAutopostdayuseInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostdayuse());
            }
    
            if (pObject.isGraceperioddayuseInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperioddayuse());
            }
    
            if (pObject.isDayusechargeInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getDayusecharge());
            }
    
            if (pObject.isAutopostforlatecheckoutInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostforlatecheckout());
            }
    
            if (pObject.isGraceperiodlateInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperiodlate());
            }
    
            if (pObject.isLatecheckoutchargeInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getLatecheckoutcharge());
            }
    
            if (pObject.isAutopostearlyInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostearly());
            }
    
            if (pObject.isGraceperiodearlyInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperiodearly());
            }
    
            if (pObject.isEarlycheckoutcahrgeInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getEarlycheckoutcahrge());
            }
    
            if (pObject.isPostcancellationfeeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPostcancellationfee());
            }
    
            if (pObject.isAmountcancellInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountcancell());
            }
    
            if (pObject.isTotalchargecancellInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getTotalchargecancell());
            }
    
            if (pObject.isBeyondInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getBeyond());
            }
    
            if (pObject.isWithinInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getWithin());
            }
    
            if (pObject.isPostnoshowfeeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPostnoshowfee());
            }
    
            if (pObject.isAmountnoshowInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountnoshow());
            }
    
            if (pObject.isTotalchargenoshowInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getTotalchargenoshow());
            }
    
            if (pObject.isFinstartmonthInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getFinstartmonth());
            }
    
            if (pObject.isFinstartdayInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getFinstartday());
            }
    
            if (pObject.isFinendmonthInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getFinendmonth());
            }
    
            if (pObject.isFinenddayInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getFinendday());
            }
    
            if (pObject.isGuestnamereservInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestnamereserv());
            }
    
            if (pObject.isGuestnamewalkinInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestnamewalkin());
            }
    
            if (pObject.isGuestidnreservInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestidnreserv());
            }
    
            if (pObject.isGuestidnwalkinInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestidnwalkin());
            }
    
            if (pObject.isMarketcodereservInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getMarketcodereserv());
            }
    
            if (pObject.isMarketcodewalkinInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getMarketcodewalkin());
            }
    
            if (pObject.isPaymenttypereservInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getPaymenttypereserv());
            }
    
            if (pObject.isPaymenttypewalkinInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getPaymenttypewalkin());
            }
    
            if (pObject.isTareservInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getTareserv());
            }
    
            if (pObject.isTawalkinInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getTawalkin());
            }
    
            if (pObject.isCompanyreservInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getCompanyreserv());
            }
    
            if (pObject.isCompanywalkinInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getCompanywalkin());
            }
    
            if (pObject.isBsourcereservInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsourcereserv());
            }
    
            if (pObject.isBsourcewalkinInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsourcewalkin());
            }
    
            if (pObject.isNationalityreservInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getNationalityreserv());
            }
    
            if (pObject.isNationalitywalkinInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getNationalitywalkin());
            }
    
            if (pObject.isEmailreservationvoucherInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getEmailreservationvoucher());
            }
    
            if (pObject.isNightauditdirtyInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getNightauditdirty());
            }
    
            if (pObject.isOverbookingInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getOverbooking());
            }
    
            if (pObject.isBaseoccupancyInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getBaseoccupancy());
            }
    
            if (pObject.isFrontratemoderegularInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getFrontratemoderegular());
            }
    
            if (pObject.isSendreviewtoallInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getSendreviewtoall());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isAddressreservInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getAddressreserv());
            }
    
            if (pObject.isAddresswalkinInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getAddresswalkin());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table checkinreservationsettings.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table checkinreservationsettings with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from checkinreservationsettings " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table checkinreservationsettings with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific CheckinreservationsettingsBean pObject given a c
     *
     * @param pObject the CheckinreservationsettingsBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(CheckinreservationsettingsBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from checkinreservationsettings WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isCheckinreservationsettingsidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("checkinreservationsettingsid= ?");
                }
    
                if (pObject.isHours24Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("hours24= ?");
                }
    
                if (pObject.isCheckintimeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("checkintime= ?");
                }
    
                if (pObject.isCheckouttimeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("checkouttime= ?");
                }
    
                if (pObject.isAutopostdayuseModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("autopostdayuse= ?");
                }
    
                if (pObject.isGraceperioddayuseModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("graceperioddayuse= ?");
                }
    
                if (pObject.isDayusechargeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("dayusecharge= ?");
                }
    
                if (pObject.isAutopostforlatecheckoutModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("autopostforlatecheckout= ?");
                }
    
                if (pObject.isGraceperiodlateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("graceperiodlate= ?");
                }
    
                if (pObject.isLatecheckoutchargeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("latecheckoutcharge= ?");
                }
    
                if (pObject.isAutopostearlyModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("autopostearly= ?");
                }
    
                if (pObject.isGraceperiodearlyModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("graceperiodearly= ?");
                }
    
                if (pObject.isEarlycheckoutcahrgeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("earlycheckoutcahrge= ?");
                }
    
                if (pObject.isPostcancellationfeeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("postcancellationfee= ?");
                }
    
                if (pObject.isAmountcancellModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amountcancell= ?");
                }
    
                if (pObject.isTotalchargecancellModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("totalchargecancell= ?");
                }
    
                if (pObject.isBeyondModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("beyond= ?");
                }
    
                if (pObject.isWithinModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("within= ?");
                }
    
                if (pObject.isPostnoshowfeeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("postnoshowfee= ?");
                }
    
                if (pObject.isAmountnoshowModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amountnoshow= ?");
                }
    
                if (pObject.isTotalchargenoshowModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("totalchargenoshow= ?");
                }
    
                if (pObject.isFinstartmonthModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("finstartmonth= ?");
                }
    
                if (pObject.isFinstartdayModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("finstartday= ?");
                }
    
                if (pObject.isFinendmonthModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("finendmonth= ?");
                }
    
                if (pObject.isFinenddayModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("finendday= ?");
                }
    
                if (pObject.isGuestnamereservModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestnamereserv= ?");
                }
    
                if (pObject.isGuestnamewalkinModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestnamewalkin= ?");
                }
    
                if (pObject.isGuestidnreservModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestidnreserv= ?");
                }
    
                if (pObject.isGuestidnwalkinModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("guestidnwalkin= ?");
                }
    
                if (pObject.isMarketcodereservModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("marketcodereserv= ?");
                }
    
                if (pObject.isMarketcodewalkinModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("marketcodewalkin= ?");
                }
    
                if (pObject.isPaymenttypereservModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymenttypereserv= ?");
                }
    
                if (pObject.isPaymenttypewalkinModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("paymenttypewalkin= ?");
                }
    
                if (pObject.isTareservModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tareserv= ?");
                }
    
                if (pObject.isTawalkinModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tawalkin= ?");
                }
    
                if (pObject.isCompanyreservModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyreserv= ?");
                }
    
                if (pObject.isCompanywalkinModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companywalkin= ?");
                }
    
                if (pObject.isBsourcereservModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bsourcereserv= ?");
                }
    
                if (pObject.isBsourcewalkinModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bsourcewalkin= ?");
                }
    
                if (pObject.isNationalityreservModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nationalityreserv= ?");
                }
    
                if (pObject.isNationalitywalkinModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nationalitywalkin= ?");
                }
    
                if (pObject.isEmailreservationvoucherModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("emailreservationvoucher= ?");
                }
    
                if (pObject.isNightauditdirtyModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nightauditdirty= ?");
                }
    
                if (pObject.isOverbookingModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("overbooking= ?");
                }
    
                if (pObject.isBaseoccupancyModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("baseoccupancy= ?");
                }
    
                if (pObject.isFrontratemoderegularModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("frontratemoderegular= ?");
                }
    
                if (pObject.isSendreviewtoallModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sendreviewtoall= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isAddressreservModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("addressreserv= ?");
                }
    
                if (pObject.isAddresswalkinModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("addresswalkin= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isCheckinreservationsettingsidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCheckinreservationsettingsid());
                }
    
                if (pObject.isHours24Modified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getHours24());
                }
    
                if (pObject.isCheckintimeModified()) {
                    if (pObject.getCheckintime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getCheckintime().getTime()));
                }
    
                if (pObject.isCheckouttimeModified()) {
                    if (pObject.getCheckouttime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getCheckouttime().getTime()));
                }
    
                if (pObject.isAutopostdayuseModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostdayuse());
                }
    
                if (pObject.isGraceperioddayuseModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperioddayuse());
                }
    
                if (pObject.isDayusechargeModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getDayusecharge());
                }
    
                if (pObject.isAutopostforlatecheckoutModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostforlatecheckout());
                }
    
                if (pObject.isGraceperiodlateModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperiodlate());
                }
    
                if (pObject.isLatecheckoutchargeModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getLatecheckoutcharge());
                }
    
                if (pObject.isAutopostearlyModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getAutopostearly());
                }
    
                if (pObject.isGraceperiodearlyModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getGraceperiodearly());
                }
    
                if (pObject.isEarlycheckoutcahrgeModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getEarlycheckoutcahrge());
                }
    
                if (pObject.isPostcancellationfeeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPostcancellationfee());
                }
    
                if (pObject.isAmountcancellModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountcancell());
                }
    
                if (pObject.isTotalchargecancellModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getTotalchargecancell());
                }
    
                if (pObject.isBeyondModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getBeyond());
                }
    
                if (pObject.isWithinModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getWithin());
                }
    
                if (pObject.isPostnoshowfeeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPostnoshowfee());
                }
    
                if (pObject.isAmountnoshowModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmountnoshow());
                }
    
                if (pObject.isTotalchargenoshowModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getTotalchargenoshow());
                }
    
                if (pObject.isFinstartmonthModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFinstartmonth());
                }
    
                if (pObject.isFinstartdayModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFinstartday());
                }
    
                if (pObject.isFinendmonthModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFinendmonth());
                }
    
                if (pObject.isFinenddayModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFinendday());
                }
    
                if (pObject.isGuestnamereservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestnamereserv());
                }
    
                if (pObject.isGuestnamewalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestnamewalkin());
                }
    
                if (pObject.isGuestidnreservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestidnreserv());
                }
    
                if (pObject.isGuestidnwalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getGuestidnwalkin());
                }
    
                if (pObject.isMarketcodereservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getMarketcodereserv());
                }
    
                if (pObject.isMarketcodewalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getMarketcodewalkin());
                }
    
                if (pObject.isPaymenttypereservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getPaymenttypereserv());
                }
    
                if (pObject.isPaymenttypewalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getPaymenttypewalkin());
                }
    
                if (pObject.isTareservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getTareserv());
                }
    
                if (pObject.isTawalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getTawalkin());
                }
    
                if (pObject.isCompanyreservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getCompanyreserv());
                }
    
                if (pObject.isCompanywalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getCompanywalkin());
                }
    
                if (pObject.isBsourcereservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsourcereserv());
                }
    
                if (pObject.isBsourcewalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getBsourcewalkin());
                }
    
                if (pObject.isNationalityreservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getNationalityreserv());
                }
    
                if (pObject.isNationalitywalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getNationalitywalkin());
                }
    
                if (pObject.isEmailreservationvoucherModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getEmailreservationvoucher());
                }
    
                if (pObject.isNightauditdirtyModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getNightauditdirty());
                }
    
                if (pObject.isOverbookingModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getOverbooking());
                }
    
                if (pObject.isBaseoccupancyModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getBaseoccupancy());
                }
    
                if (pObject.isFrontratemoderegularModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getFrontratemoderegular());
                }
    
                if (pObject.isSendreviewtoallModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getSendreviewtoall());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isAddressreservModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getAddressreserv());
                }
    
                if (pObject.isAddresswalkinModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getAddresswalkin());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the checkinreservationsettings on a CheckinreservationsettingsBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting CheckinreservationsettingsBean pObject
     */
    //72
    public CheckinreservationsettingsBean decodeRow(ResultSet rs) throws SQLException
    {
        CheckinreservationsettingsBean pObject = createCheckinreservationsettingsBean();
        pObject.setCheckinreservationsettingsid(Manager.getInteger(rs, 1));
        pObject.setHours24(Manager.getBoolean(rs, 2));
        pObject.setCheckintime(rs.getTime(3));
        pObject.setCheckouttime(rs.getTime(4));
        pObject.setAutopostdayuse(Manager.getBoolean(rs, 5));
        pObject.setGraceperioddayuse(Manager.getDouble(rs, 6));
        pObject.setDayusecharge(Manager.getDouble(rs, 7));
        pObject.setAutopostforlatecheckout(Manager.getBoolean(rs, 8));
        pObject.setGraceperiodlate(Manager.getDouble(rs, 9));
        pObject.setLatecheckoutcharge(Manager.getDouble(rs, 10));
        pObject.setAutopostearly(Manager.getBoolean(rs, 11));
        pObject.setGraceperiodearly(Manager.getDouble(rs, 12));
        pObject.setEarlycheckoutcahrge(Manager.getDouble(rs, 13));
        pObject.setPostcancellationfee(Manager.getInteger(rs, 14));
        pObject.setAmountcancell(Manager.getDouble(rs, 15));
        pObject.setTotalchargecancell(Manager.getBoolean(rs, 16));
        pObject.setBeyond(Manager.getInteger(rs, 17));
        pObject.setWithin(Manager.getInteger(rs, 18));
        pObject.setPostnoshowfee(Manager.getInteger(rs, 19));
        pObject.setAmountnoshow(Manager.getDouble(rs, 20));
        pObject.setTotalchargenoshow(Manager.getBoolean(rs, 21));
        pObject.setFinstartmonth(Manager.getInteger(rs, 22));
        pObject.setFinstartday(Manager.getInteger(rs, 23));
        pObject.setFinendmonth(Manager.getInteger(rs, 24));
        pObject.setFinendday(Manager.getInteger(rs, 25));
        pObject.setGuestnamereserv(Manager.getBoolean(rs, 26));
        pObject.setGuestnamewalkin(Manager.getBoolean(rs, 27));
        pObject.setGuestidnreserv(Manager.getBoolean(rs, 28));
        pObject.setGuestidnwalkin(Manager.getBoolean(rs, 29));
        pObject.setMarketcodereserv(Manager.getBoolean(rs, 30));
        pObject.setMarketcodewalkin(Manager.getBoolean(rs, 31));
        pObject.setPaymenttypereserv(Manager.getBoolean(rs, 32));
        pObject.setPaymenttypewalkin(Manager.getBoolean(rs, 33));
        pObject.setTareserv(Manager.getBoolean(rs, 34));
        pObject.setTawalkin(Manager.getBoolean(rs, 35));
        pObject.setCompanyreserv(Manager.getBoolean(rs, 36));
        pObject.setCompanywalkin(Manager.getBoolean(rs, 37));
        pObject.setBsourcereserv(Manager.getBoolean(rs, 38));
        pObject.setBsourcewalkin(Manager.getBoolean(rs, 39));
        pObject.setNationalityreserv(Manager.getBoolean(rs, 40));
        pObject.setNationalitywalkin(Manager.getBoolean(rs, 41));
        pObject.setEmailreservationvoucher(Manager.getBoolean(rs, 42));
        pObject.setNightauditdirty(Manager.getBoolean(rs, 43));
        pObject.setOverbooking(Manager.getBoolean(rs, 44));
        pObject.setBaseoccupancy(Manager.getBoolean(rs, 45));
        pObject.setFrontratemoderegular(Manager.getBoolean(rs, 46));
        pObject.setSendreviewtoall(Manager.getBoolean(rs, 47));
        pObject.setRegbyid(Manager.getInteger(rs, 48));
        pObject.setRegdate(rs.getTimestamp(49));
        pObject.setAddressreserv(Manager.getBoolean(rs, 50));
        pObject.setAddresswalkin(Manager.getBoolean(rs, 51));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the checkinreservationsettings table on a CheckinreservationsettingsBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting CheckinreservationsettingsBean pObject
     */
    //73
    public CheckinreservationsettingsBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        CheckinreservationsettingsBean pObject = createCheckinreservationsettingsBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_CHECKINRESERVATIONSETTINGSID:
                    ++pos;
                    pObject.setCheckinreservationsettingsid(Manager.getInteger(rs, pos));
                    break;
                case ID_HOURS24:
                    ++pos;
                    pObject.setHours24(Manager.getBoolean(rs, pos));
                    break;
                case ID_CHECKINTIME:
                    ++pos;
                    pObject.setCheckintime(rs.getTime(pos));
                    break;
                case ID_CHECKOUTTIME:
                    ++pos;
                    pObject.setCheckouttime(rs.getTime(pos));
                    break;
                case ID_AUTOPOSTDAYUSE:
                    ++pos;
                    pObject.setAutopostdayuse(Manager.getBoolean(rs, pos));
                    break;
                case ID_GRACEPERIODDAYUSE:
                    ++pos;
                    pObject.setGraceperioddayuse(Manager.getDouble(rs, pos));
                    break;
                case ID_DAYUSECHARGE:
                    ++pos;
                    pObject.setDayusecharge(Manager.getDouble(rs, pos));
                    break;
                case ID_AUTOPOSTFORLATECHECKOUT:
                    ++pos;
                    pObject.setAutopostforlatecheckout(Manager.getBoolean(rs, pos));
                    break;
                case ID_GRACEPERIODLATE:
                    ++pos;
                    pObject.setGraceperiodlate(Manager.getDouble(rs, pos));
                    break;
                case ID_LATECHECKOUTCHARGE:
                    ++pos;
                    pObject.setLatecheckoutcharge(Manager.getDouble(rs, pos));
                    break;
                case ID_AUTOPOSTEARLY:
                    ++pos;
                    pObject.setAutopostearly(Manager.getBoolean(rs, pos));
                    break;
                case ID_GRACEPERIODEARLY:
                    ++pos;
                    pObject.setGraceperiodearly(Manager.getDouble(rs, pos));
                    break;
                case ID_EARLYCHECKOUTCAHRGE:
                    ++pos;
                    pObject.setEarlycheckoutcahrge(Manager.getDouble(rs, pos));
                    break;
                case ID_POSTCANCELLATIONFEE:
                    ++pos;
                    pObject.setPostcancellationfee(Manager.getInteger(rs, pos));
                    break;
                case ID_AMOUNTCANCELL:
                    ++pos;
                    pObject.setAmountcancell(Manager.getDouble(rs, pos));
                    break;
                case ID_TOTALCHARGECANCELL:
                    ++pos;
                    pObject.setTotalchargecancell(Manager.getBoolean(rs, pos));
                    break;
                case ID_BEYOND:
                    ++pos;
                    pObject.setBeyond(Manager.getInteger(rs, pos));
                    break;
                case ID_WITHIN:
                    ++pos;
                    pObject.setWithin(Manager.getInteger(rs, pos));
                    break;
                case ID_POSTNOSHOWFEE:
                    ++pos;
                    pObject.setPostnoshowfee(Manager.getInteger(rs, pos));
                    break;
                case ID_AMOUNTNOSHOW:
                    ++pos;
                    pObject.setAmountnoshow(Manager.getDouble(rs, pos));
                    break;
                case ID_TOTALCHARGENOSHOW:
                    ++pos;
                    pObject.setTotalchargenoshow(Manager.getBoolean(rs, pos));
                    break;
                case ID_FINSTARTMONTH:
                    ++pos;
                    pObject.setFinstartmonth(Manager.getInteger(rs, pos));
                    break;
                case ID_FINSTARTDAY:
                    ++pos;
                    pObject.setFinstartday(Manager.getInteger(rs, pos));
                    break;
                case ID_FINENDMONTH:
                    ++pos;
                    pObject.setFinendmonth(Manager.getInteger(rs, pos));
                    break;
                case ID_FINENDDAY:
                    ++pos;
                    pObject.setFinendday(Manager.getInteger(rs, pos));
                    break;
                case ID_GUESTNAMERESERV:
                    ++pos;
                    pObject.setGuestnamereserv(Manager.getBoolean(rs, pos));
                    break;
                case ID_GUESTNAMEWALKIN:
                    ++pos;
                    pObject.setGuestnamewalkin(Manager.getBoolean(rs, pos));
                    break;
                case ID_GUESTIDNRESERV:
                    ++pos;
                    pObject.setGuestidnreserv(Manager.getBoolean(rs, pos));
                    break;
                case ID_GUESTIDNWALKIN:
                    ++pos;
                    pObject.setGuestidnwalkin(Manager.getBoolean(rs, pos));
                    break;
                case ID_MARKETCODERESERV:
                    ++pos;
                    pObject.setMarketcodereserv(Manager.getBoolean(rs, pos));
                    break;
                case ID_MARKETCODEWALKIN:
                    ++pos;
                    pObject.setMarketcodewalkin(Manager.getBoolean(rs, pos));
                    break;
                case ID_PAYMENTTYPERESERV:
                    ++pos;
                    pObject.setPaymenttypereserv(Manager.getBoolean(rs, pos));
                    break;
                case ID_PAYMENTTYPEWALKIN:
                    ++pos;
                    pObject.setPaymenttypewalkin(Manager.getBoolean(rs, pos));
                    break;
                case ID_TARESERV:
                    ++pos;
                    pObject.setTareserv(Manager.getBoolean(rs, pos));
                    break;
                case ID_TAWALKIN:
                    ++pos;
                    pObject.setTawalkin(Manager.getBoolean(rs, pos));
                    break;
                case ID_COMPANYRESERV:
                    ++pos;
                    pObject.setCompanyreserv(Manager.getBoolean(rs, pos));
                    break;
                case ID_COMPANYWALKIN:
                    ++pos;
                    pObject.setCompanywalkin(Manager.getBoolean(rs, pos));
                    break;
                case ID_BSOURCERESERV:
                    ++pos;
                    pObject.setBsourcereserv(Manager.getBoolean(rs, pos));
                    break;
                case ID_BSOURCEWALKIN:
                    ++pos;
                    pObject.setBsourcewalkin(Manager.getBoolean(rs, pos));
                    break;
                case ID_NATIONALITYRESERV:
                    ++pos;
                    pObject.setNationalityreserv(Manager.getBoolean(rs, pos));
                    break;
                case ID_NATIONALITYWALKIN:
                    ++pos;
                    pObject.setNationalitywalkin(Manager.getBoolean(rs, pos));
                    break;
                case ID_EMAILRESERVATIONVOUCHER:
                    ++pos;
                    pObject.setEmailreservationvoucher(Manager.getBoolean(rs, pos));
                    break;
                case ID_NIGHTAUDITDIRTY:
                    ++pos;
                    pObject.setNightauditdirty(Manager.getBoolean(rs, pos));
                    break;
                case ID_OVERBOOKING:
                    ++pos;
                    pObject.setOverbooking(Manager.getBoolean(rs, pos));
                    break;
                case ID_BASEOCCUPANCY:
                    ++pos;
                    pObject.setBaseoccupancy(Manager.getBoolean(rs, pos));
                    break;
                case ID_FRONTRATEMODEREGULAR:
                    ++pos;
                    pObject.setFrontratemoderegular(Manager.getBoolean(rs, pos));
                    break;
                case ID_SENDREVIEWTOALL:
                    ++pos;
                    pObject.setSendreviewtoall(Manager.getBoolean(rs, pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_ADDRESSRESERV:
                    ++pos;
                    pObject.setAddressreserv(Manager.getBoolean(rs, pos));
                    break;
                case ID_ADDRESSWALKIN:
                    ++pos;
                    pObject.setAddresswalkin(Manager.getBoolean(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of CheckinreservationsettingsBean 
     */
    //41
    public CheckinreservationsettingsBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of CheckinreservationsettingsBean 
     */
    public CheckinreservationsettingsBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (CheckinreservationsettingsBean[])v.toArray(new CheckinreservationsettingsBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private CheckinreservationsettingsListener listener = null;

    /**
     * Registers a unique CheckinreservationsettingsListener listener.
     */
    //66.5
    public void registerListener(CheckinreservationsettingsListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the CheckinreservationsettingsBean pObject.
     *
     * @param pObject the CheckinreservationsettingsBean pObject to be saved
     */
    //67
    void beforeInsert(CheckinreservationsettingsBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the CheckinreservationsettingsBean pObject.
     *
     * @param pObject the CheckinreservationsettingsBean pObject to be saved
     */
    //68
    void afterInsert(CheckinreservationsettingsBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the CheckinreservationsettingsBean pObject.
     *
     * @param pObject the CheckinreservationsettingsBean pObject to be updated
     */
    //69
    void beforeUpdate(CheckinreservationsettingsBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the CheckinreservationsettingsBean pObject.
     *
     * @param pObject the CheckinreservationsettingsBean pObject to be updated
     */
    //70
    void afterUpdate(CheckinreservationsettingsBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
