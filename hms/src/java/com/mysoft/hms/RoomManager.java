// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the room table.
 */
public class RoomManager
// extends+ 

// extends- 
{

    /**
     * Column roomid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ROOMID = 0;
    public static final int TYPE_ROOMID = Types.INTEGER;
    public static final String NAME_ROOMID = "roomid";

    /**
     * Column code of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CODE = 1;
    public static final int TYPE_CODE = Types.VARCHAR;
    public static final String NAME_CODE = "code";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 2;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column roomtypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ROOMTYPEID = 3;
    public static final int TYPE_ROOMTYPEID = Types.INTEGER;
    public static final String NAME_ROOMTYPEID = "roomtypeid";

    /**
     * Column bedtypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_BEDTYPEID = 4;
    public static final int TYPE_BEDTYPEID = Types.INTEGER;
    public static final String NAME_BEDTYPEID = "bedtypeid";

    /**
     * Column phoneext of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PHONEEXT = 5;
    public static final int TYPE_PHONEEXT = Types.VARCHAR;
    public static final String NAME_PHONEEXT = "phoneext";

    /**
     * Column keycard of type Types.VARCHAR mapped to String.
     */
    public static final int ID_KEYCARD = 6;
    public static final int TYPE_KEYCARD = Types.VARCHAR;
    public static final String NAME_KEYCARD = "keycard";

    /**
     * Column ord of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ORD = 7;
    public static final int TYPE_ORD = Types.INTEGER;
    public static final String NAME_ORD = "ord";

    /**
     * Column nonsmoke of type Types.BIT mapped to Boolean.
     */
    public static final int ID_NONSMOKE = 8;
    public static final int TYPE_NONSMOKE = Types.BIT;
    public static final String NAME_NONSMOKE = "nonsmoke";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 9;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 10;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column active of type Types.BIT mapped to Boolean.
     */
    public static final int ID_ACTIVE = 11;
    public static final int TYPE_ACTIVE = Types.BIT;
    public static final String NAME_ACTIVE = "active";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 12;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";


    private static final String TABLE_NAME = "room";

    /**
     * Create an array of type string containing all the fields of the room table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "room.roomid"
        ,"room.code"
        ,"room.name"
        ,"room.roomtypeid"
        ,"room.bedtypeid"
        ,"room.phoneext"
        ,"room.keycard"
        ,"room.ord"
        ,"room.nonsmoke"
        ,"room.regbyid"
        ,"room.regdate"
        ,"room.active"
        ,"room.deleted"
    };

    /**
     * Field that contains the comma separated fields of the room table.
     */
    private static final String ALL_FIELDS = "room.roomid"
                            + ",room.code"
                            + ",room.name"
                            + ",room.roomtypeid"
                            + ",room.bedtypeid"
                            + ",room.phoneext"
                            + ",room.keycard"
                            + ",room.ord"
                            + ",room.nonsmoke"
                            + ",room.regbyid"
                            + ",room.regdate"
                            + ",room.active"
                            + ",room.deleted";

    private static RoomManager singleton = new RoomManager();

    /**
     * Get the RoomManager singleton.
     *
     * @return RoomManager 
     */
    synchronized public static RoomManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own RoomManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(RoomManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new RoomBean instance.
     *
     * @return the new RoomBean 
     */
    public RoomBean createRoomBean()
    {
        return new RoomBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a RoomBean from the room using its key fields.
     *
     * @return a unique RoomBean 
     */
    //12
    public RoomBean loadByPrimaryKey(Integer roomid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM room WHERE room.roomid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, roomid);
            RoomBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer roomid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from room WHERE room.roomid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, roomid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads RoomBean array from the room table using its bedtypeid field.
     *
     * @return an array of RoomBean 
     */
    // LOAD BY IMPORTED KEY
    public RoomBean[] loadByBedtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM room WHERE bedtypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the room table by bedtypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByBedtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM room WHERE bedtypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads RoomBean array from the room table using its regbyid field.
     *
     * @return an array of RoomBean 
     */
    // LOAD BY IMPORTED KEY
    public RoomBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM room WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the room table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM room WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads RoomBean array from the room table using its roomtypeid field.
     *
     * @return an array of RoomBean 
     */
    // LOAD BY IMPORTED KEY
    public RoomBean[] loadByRoomtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM room WHERE roomtypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the room table by roomtypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRoomtypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM room WHERE roomtypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the BedtypeBean object from the room.bedtypeid field.
     *
     * @param pObject the RoomBean 
     * @return the associated BedtypeBean pObject
     */
    // GET IMPORTED
    public BedtypeBean getBedtypeBean(RoomBean pObject) throws SQLException
    {
        BedtypeBean other = BedtypeManager.getInstance().createBedtypeBean();
        other.setBedtypeid(pObject.getBedtypeid());
        return BedtypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the RoomBean object to the BedtypeBean object.
     *
     * @param pObject the RoomBean object to use
     * @param pObjectToBeSet the BedtypeBean object to associate to the RoomBean 
     * @return the associated BedtypeBean pObject
     */
    // SET IMPORTED
    public RoomBean setBedtypeBean(RoomBean pObject,BedtypeBean pObjectToBeSet)
    {
        pObject.setBedtypeid(pObjectToBeSet.getBedtypeid());
        return pObject;
    }

    /**
     * Retrieves the PersonnelBean object from the room.personnelid field.
     *
     * @param pObject the RoomBean 
     * @return the associated PersonnelBean pObject
     */
    // GET IMPORTED
    public PersonnelBean getPersonnelBean(RoomBean pObject) throws SQLException
    {
        PersonnelBean other = PersonnelManager.getInstance().createPersonnelBean();
        other.setPersonnelid(pObject.getRegbyid());
        return PersonnelManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the RoomBean object to the PersonnelBean object.
     *
     * @param pObject the RoomBean object to use
     * @param pObjectToBeSet the PersonnelBean object to associate to the RoomBean 
     * @return the associated PersonnelBean pObject
     */
    // SET IMPORTED
    public RoomBean setPersonnelBean(RoomBean pObject,PersonnelBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonnelid());
        return pObject;
    }

    /**
     * Retrieves the RoomtypeBean object from the room.roomtypeid field.
     *
     * @param pObject the RoomBean 
     * @return the associated RoomtypeBean pObject
     */
    // GET IMPORTED
    public RoomtypeBean getRoomtypeBean(RoomBean pObject) throws SQLException
    {
        RoomtypeBean other = RoomtypeManager.getInstance().createRoomtypeBean();
        other.setRoomtypeid(pObject.getRoomtypeid());
        return RoomtypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the RoomBean object to the RoomtypeBean object.
     *
     * @param pObject the RoomBean object to use
     * @param pObjectToBeSet the RoomtypeBean object to associate to the RoomBean 
     * @return the associated RoomtypeBean pObject
     */
    // SET IMPORTED
    public RoomBean setRoomtypeBean(RoomBean pObject,RoomtypeBean pObjectToBeSet)
    {
        pObject.setRoomtypeid(pObjectToBeSet.getRoomtypeid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from room.
     *
     * @return an array of RoomManager pObject
     */
    //38
    public RoomBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM room",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of RoomBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting RoomBean table 
     */
    //49
    public RoomBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of RoomBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting RoomBean table 
     */
    //51
    public RoomBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from room " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from room ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (RoomBean[])v.toArray(new RoomBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from room table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the room table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM room " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the RoomBean pObject into the database.
     *
     * @param pObject the RoomBean pObject to be saved
     */
    //100
    public RoomBean save(RoomBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isRoomidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('roomid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setRoomid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into room (");
    
                if (pObject.isRoomidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roomid");
                    _dirtyCount++;
                }

                if (pObject.isCodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("code");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isRoomtypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roomtypeid");
                    _dirtyCount++;
                }

                if (pObject.isBedtypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("bedtypeid");
                    _dirtyCount++;
                }

                if (pObject.isPhoneextModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("phoneext");
                    _dirtyCount++;
                }

                if (pObject.isKeycardModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("keycard");
                    _dirtyCount++;
                }

                if (pObject.isOrdModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ord");
                    _dirtyCount++;
                }

                if (pObject.isNonsmokeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("nonsmoke");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isActiveModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("active");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isRoomidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isRoomtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
                }
    
                if (pObject.isBedtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getBedtypeid());
                }
    
                if (pObject.isPhoneextModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhoneext());
                }
    
                if (pObject.isKeycardModified()) {
                    ps.setString(++_dirtyCount, pObject.getKeycard());
                }
    
                if (pObject.isOrdModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
                }
    
                if (pObject.isNonsmokeModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getNonsmoke());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isActiveModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE room SET ");
                boolean useComma=false;

                if (pObject.isRoomidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roomid").append("=?");
                }

                if (pObject.isCodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("code").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isRoomtypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roomtypeid").append("=?");
                }

                if (pObject.isBedtypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("bedtypeid").append("=?");
                }

                if (pObject.isPhoneextModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("phoneext").append("=?");
                }

                if (pObject.isKeycardModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("keycard").append("=?");
                }

                if (pObject.isOrdModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ord").append("=?");
                }

                if (pObject.isNonsmokeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("nonsmoke").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isActiveModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("active").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("room.roomid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isRoomidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
                }

                if (pObject.isCodeModified()) {
                      ps.setString(++_dirtyCount, pObject.getCode());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isRoomtypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
                }

                if (pObject.isBedtypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getBedtypeid());
                }

                if (pObject.isPhoneextModified()) {
                      ps.setString(++_dirtyCount, pObject.getPhoneext());
                }

                if (pObject.isKeycardModified()) {
                      ps.setString(++_dirtyCount, pObject.getKeycard());
                }

                if (pObject.isOrdModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
                }

                if (pObject.isNonsmokeModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getNonsmoke());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isActiveModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of RoomBean pObjects into the database.
     *
     * @param pObjects the RoomBean pObject table to be saved
     * @return the saved RoomBean array.
     */
    //65
    public RoomBean[] save(RoomBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique RoomBean pObject from a template one giving a c
     *
     * @param pObject the RoomBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public RoomBean loadUniqueUsingTemplate(RoomBean pObject) throws SQLException
    {
         RoomBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of RoomBean from a template one.
     *
     * @param pObject the RoomBean template to look for
     * @return all the RoomBean matching the template
     */
    //88
    public RoomBean[] loadUsingTemplate(RoomBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from room WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isRoomidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomid= ?");
             }
    
             if (pObject.isCodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isRoomtypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomtypeid= ?");
             }
    
             if (pObject.isBedtypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bedtypeid= ?");
             }
    
             if (pObject.isPhoneextModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phoneext= ?");
             }
    
             if (pObject.isKeycardModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("keycard= ?");
             }
    
             if (pObject.isOrdModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ord= ?");
             }
    
             if (pObject.isNonsmokeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nonsmoke= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isActiveModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("active= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isRoomidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
             }
    
             if (pObject.isCodeModified()) {
                 ps.setString(++_dirtyCount, pObject.getCode());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isRoomtypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
             }
    
             if (pObject.isBedtypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getBedtypeid());
             }
    
             if (pObject.isPhoneextModified()) {
                 ps.setString(++_dirtyCount, pObject.getPhoneext());
             }
    
             if (pObject.isKeycardModified()) {
                 ps.setString(++_dirtyCount, pObject.getKeycard());
             }
    
             if (pObject.isOrdModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
             }
    
             if (pObject.isNonsmokeModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getNonsmoke());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isActiveModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a RoomBean template.
     *
     * @param pObject the RoomBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(RoomBean pObject) throws SQLException
    {
        if (pObject.isRoomidInitialized())
            return deleteByPrimaryKey(pObject.getRoomid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM room WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isRoomidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roomid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("code").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRoomtypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roomtypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBedtypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("bedtypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPhoneextInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("phoneext").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isKeycardInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("keycard").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isOrdInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ord").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNonsmokeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("nonsmoke").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isActiveInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("active").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isRoomidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
            }
    
            if (pObject.isCodeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCode());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isRoomtypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
            }
    
            if (pObject.isBedtypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getBedtypeid());
            }
    
            if (pObject.isPhoneextInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPhoneext());
            }
    
            if (pObject.isKeycardInitialized()) {
                ps.setString(++_dirtyCount, pObject.getKeycard());
            }
    
            if (pObject.isOrdInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
            }
    
            if (pObject.isNonsmokeInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getNonsmoke());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isActiveInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Retrieves an array of DiscountBean using the relation table Folioitem given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of DiscountBean 
     */
    // MANY TO MANY
    public DiscountBean[] loadDiscountViaFolioitem(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        discount,folioitem"
                         + " WHERE "    
                         + "     folioitem.roomid = ?"
                         + " AND folioitem.discountid = discount.discountid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return DiscountManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ExtrachargeBean using the relation table Folioitem given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of ExtrachargeBean 
     */
    // MANY TO MANY
    public ExtrachargeBean[] loadExtrachargeViaFolioitem(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        extracharge,folioitem"
                         + " WHERE "    
                         + "     folioitem.roomid = ?"
                         + " AND folioitem.extrachargeid = extracharge.extrachargeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return ExtrachargeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of FolioBean using the relation table Folioitem given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of FolioBean 
     */
    // MANY TO MANY
    public FolioBean[] loadFolioViaFolioitem(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        folio,folioitem"
                         + " WHERE "    
                         + "     folioitem.roomid = ?"
                         + " AND folioitem.folioid = folio.folioid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return FolioManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonnelBean using the relation table Folioitem given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of PersonnelBean 
     */
    // MANY TO MANY
    public PersonnelBean[] loadPersonnelViaFolioitem(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personnel,folioitem"
                         + " WHERE "    
                         + "     folioitem.roomid = ?"
                         + " AND folioitem.regbyid = personnel.personnelid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return PersonnelManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of TaxBean using the relation table Folioitem given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of TaxBean 
     */
    // MANY TO MANY
    public TaxBean[] loadTaxViaFolioitem(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        tax,folioitem"
                         + " WHERE "    
                         + "     folioitem.roomid = ?"
                         + " AND folioitem.taxid = tax.taxid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return TaxManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of GuestBean using the relation table Reservationroom given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of GuestBean 
     */
    // MANY TO MANY
    public GuestBean[] loadGuestViaReservationroom(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        guest,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.roomid = ?"
                         + " AND reservationroom.guestid = guest.guestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return GuestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonnelBean using the relation table Reservationroom given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of PersonnelBean 
     */
    // MANY TO MANY
    public PersonnelBean[] loadPersonnelViaReservationroom(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personnel,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.roomid = ?"
                         + " AND reservationroom.regbyid = personnel.personnelid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return PersonnelManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RatetypeBean using the relation table Reservationroom given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of RatetypeBean 
     */
    // MANY TO MANY
    public RatetypeBean[] loadRatetypeViaReservationroom(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        ratetype,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.roomid = ?"
                         + " AND reservationroom.ratetypeid = ratetype.ratetypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return RatetypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ReservationBean using the relation table Reservationroom given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of ReservationBean 
     */
    // MANY TO MANY
    public ReservationBean[] loadReservationViaReservationroom(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        reservation,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.roomid = ?"
                         + " AND reservationroom.reservationid = reservation.reservationid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return ReservationManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RoomtypeBean using the relation table Reservationroom given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of RoomtypeBean 
     */
    // MANY TO MANY
    public RoomtypeBean[] loadRoomtypeViaReservationroom(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        roomtype,reservationroom"
                         + " WHERE "    
                         + "     reservationroom.roomid = ?"
                         + " AND reservationroom.roomtypeid = roomtype.roomtypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return RoomtypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonnelBean using the relation table Roomimage given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of PersonnelBean 
     */
    // MANY TO MANY
    public PersonnelBean[] loadPersonnelViaRoomimage(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personnel,roomimage"
                         + " WHERE "    
                         + "     roomimage.roomid = ?"
                         + " AND roomimage.regbyid = personnel.personnelid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return PersonnelManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContragentBean using the relation table Roomownerroom given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of ContragentBean 
     */
    // MANY TO MANY
    public ContragentBean[] loadContragentViaRoomownerroom(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contragent,roomownerroom"
                         + " WHERE "    
                         + "     roomownerroom.roomid = ?"
                         + " AND roomownerroom.roomownerid = contragent.contragentid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return ContragentManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonnelBean using the relation table Roomst given a RoomBean object.
     *
     * @param pObject the RoomBean pObject to be used
     * @return an array of PersonnelBean 
     */
    // MANY TO MANY
    public PersonnelBean[] loadPersonnelViaRoomst(RoomBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personnel,roomst"
                         + " WHERE "    
                         + "     roomst.roomid = ?"
                         + " AND roomst.regbyid = personnel.personnelid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getRoomid());
             return PersonnelManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table room.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table room with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from room " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table room with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific RoomBean pObject given a c
     *
     * @param pObject the RoomBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(RoomBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from room WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isRoomidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomid= ?");
                }
    
                if (pObject.isCodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isRoomtypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomtypeid= ?");
                }
    
                if (pObject.isBedtypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bedtypeid= ?");
                }
    
                if (pObject.isPhoneextModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phoneext= ?");
                }
    
                if (pObject.isKeycardModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("keycard= ?");
                }
    
                if (pObject.isOrdModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ord= ?");
                }
    
                if (pObject.isNonsmokeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nonsmoke= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isActiveModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("active= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isRoomidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomid());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isRoomtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRoomtypeid());
                }
    
                if (pObject.isBedtypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getBedtypeid());
                }
    
                if (pObject.isPhoneextModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhoneext());
                }
    
                if (pObject.isKeycardModified()) {
                    ps.setString(++_dirtyCount, pObject.getKeycard());
                }
    
                if (pObject.isOrdModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getOrd());
                }
    
                if (pObject.isNonsmokeModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getNonsmoke());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isActiveModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getActive());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the room on a RoomBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting RoomBean pObject
     */
    //72
    public RoomBean decodeRow(ResultSet rs) throws SQLException
    {
        RoomBean pObject = createRoomBean();
        pObject.setRoomid(Manager.getInteger(rs, 1));
        pObject.setCode(rs.getString(2));
        pObject.setName(rs.getString(3));
        pObject.setRoomtypeid(Manager.getInteger(rs, 4));
        pObject.setBedtypeid(Manager.getInteger(rs, 5));
        pObject.setPhoneext(rs.getString(6));
        pObject.setKeycard(rs.getString(7));
        pObject.setOrd(Manager.getInteger(rs, 8));
        pObject.setNonsmoke(Manager.getBoolean(rs, 9));
        pObject.setRegbyid(Manager.getInteger(rs, 10));
        pObject.setRegdate(rs.getTimestamp(11));
        pObject.setActive(Manager.getBoolean(rs, 12));
        pObject.setDeleted(Manager.getBoolean(rs, 13));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the room table on a RoomBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting RoomBean pObject
     */
    //73
    public RoomBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        RoomBean pObject = createRoomBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_ROOMID:
                    ++pos;
                    pObject.setRoomid(Manager.getInteger(rs, pos));
                    break;
                case ID_CODE:
                    ++pos;
                    pObject.setCode(rs.getString(pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_ROOMTYPEID:
                    ++pos;
                    pObject.setRoomtypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_BEDTYPEID:
                    ++pos;
                    pObject.setBedtypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_PHONEEXT:
                    ++pos;
                    pObject.setPhoneext(rs.getString(pos));
                    break;
                case ID_KEYCARD:
                    ++pos;
                    pObject.setKeycard(rs.getString(pos));
                    break;
                case ID_ORD:
                    ++pos;
                    pObject.setOrd(Manager.getInteger(rs, pos));
                    break;
                case ID_NONSMOKE:
                    ++pos;
                    pObject.setNonsmoke(Manager.getBoolean(rs, pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_ACTIVE:
                    ++pos;
                    pObject.setActive(Manager.getBoolean(rs, pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of RoomBean 
     */
    //41
    public RoomBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of RoomBean 
     */
    public RoomBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (RoomBean[])v.toArray(new RoomBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private RoomListener listener = null;

    /**
     * Registers a unique RoomListener listener.
     */
    //66.5
    public void registerListener(RoomListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the RoomBean pObject.
     *
     * @param pObject the RoomBean pObject to be saved
     */
    //67
    void beforeInsert(RoomBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the RoomBean pObject.
     *
     * @param pObject the RoomBean pObject to be saved
     */
    //68
    void afterInsert(RoomBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the RoomBean pObject.
     *
     * @param pObject the RoomBean pObject to be updated
     */
    //69
    void beforeUpdate(RoomBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the RoomBean pObject.
     *
     * @param pObject the RoomBean pObject to be updated
     */
    //70
    void afterUpdate(RoomBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
