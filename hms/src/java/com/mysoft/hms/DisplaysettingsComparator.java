// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.util.Comparator;
// imports+ 

// imports- 


/**
 * Comparator class is used to sort the DisplaysettingsBean objects.
 */
public class DisplaysettingsComparator implements Comparator
// extends+ 

// extends- 

{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for DisplaysettingsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new DisplaysettingsComparator(DisplaysettingsManager.DISPLAYSETTINGSID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>DisplaysettingsManager.ID_DISPLAYSETTINGSID
     *   <li>DisplaysettingsManager.ID_TIMEFORMAT
     *   <li>DisplaysettingsManager.ID_DATEFORMAT
     *   <li>DisplaysettingsManager.ID_ARRDEPFORMAT
     *   <li>DisplaysettingsManager.ID_TIMEZOME
     *   <li>DisplaysettingsManager.ID_IDTYPEID
     *   <li>DisplaysettingsManager.ID_RESERVATIONTYPEID
     *   <li>DisplaysettingsManager.ID_ROUNDTYPE
     *   <li>DisplaysettingsManager.ID_SALUTATIONID
     *   <li>DisplaysettingsManager.ID_BILLTO
     *   <li>DisplaysettingsManager.ID_PAYMENTMODE
     *   <li>DisplaysettingsManager.ID_PAYMENTMETHODID
     *   <li>DisplaysettingsManager.ID_WEBRATE
     *   <li>DisplaysettingsManager.ID_WEBROOMINVMODE
     *   <li>DisplaysettingsManager.ID_PAYMENTGATEWAY
     *   <li>DisplaysettingsManager.ID_REGBYID
     *   <li>DisplaysettingsManager.ID_REGDATE
     *   <li>DisplaysettingsManager.ID_ZIP
     * </ul>
     */
    public DisplaysettingsComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for DisplaysettingsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new DisplaysettingsComparator(DisplaysettingsManager.DISPLAYSETTINGSID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>DisplaysettingsManager.ID_DISPLAYSETTINGSID
     *   <li>DisplaysettingsManager.ID_TIMEFORMAT
     *   <li>DisplaysettingsManager.ID_DATEFORMAT
     *   <li>DisplaysettingsManager.ID_ARRDEPFORMAT
     *   <li>DisplaysettingsManager.ID_TIMEZOME
     *   <li>DisplaysettingsManager.ID_IDTYPEID
     *   <li>DisplaysettingsManager.ID_RESERVATIONTYPEID
     *   <li>DisplaysettingsManager.ID_ROUNDTYPE
     *   <li>DisplaysettingsManager.ID_SALUTATIONID
     *   <li>DisplaysettingsManager.ID_BILLTO
     *   <li>DisplaysettingsManager.ID_PAYMENTMODE
     *   <li>DisplaysettingsManager.ID_PAYMENTMETHODID
     *   <li>DisplaysettingsManager.ID_WEBRATE
     *   <li>DisplaysettingsManager.ID_WEBROOMINVMODE
     *   <li>DisplaysettingsManager.ID_PAYMENTGATEWAY
     *   <li>DisplaysettingsManager.ID_REGBYID
     *   <li>DisplaysettingsManager.ID_REGDATE
     *   <li>DisplaysettingsManager.ID_ZIP
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public DisplaysettingsComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        DisplaysettingsBean b1 = (DisplaysettingsBean)pObj1;
        DisplaysettingsBean b2 = (DisplaysettingsBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case DisplaysettingsManager.ID_DISPLAYSETTINGSID:
                if (b1.getDisplaysettingsid() == null && b2.getDisplaysettingsid() != null) {
                    iReturn = -1;
                } else if (b1.getDisplaysettingsid() == null && b2.getDisplaysettingsid() == null) {
                    iReturn = 0;
                } else if (b1.getDisplaysettingsid() != null && b2.getDisplaysettingsid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getDisplaysettingsid().compareTo(b2.getDisplaysettingsid());
                }
                break;
            case DisplaysettingsManager.ID_TIMEFORMAT:
                if (b1.getTimeformat() == null && b2.getTimeformat() != null) {
                    iReturn = -1;
                } else if (b1.getTimeformat() == null && b2.getTimeformat() == null) {
                    iReturn = 0;
                } else if (b1.getTimeformat() != null && b2.getTimeformat() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getTimeformat().compareTo(b2.getTimeformat());
                }
                break;
            case DisplaysettingsManager.ID_DATEFORMAT:
                if (b1.getDateformat() == null && b2.getDateformat() != null) {
                    iReturn = -1;
                } else if (b1.getDateformat() == null && b2.getDateformat() == null) {
                    iReturn = 0;
                } else if (b1.getDateformat() != null && b2.getDateformat() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getDateformat().compareTo(b2.getDateformat());
                }
                break;
            case DisplaysettingsManager.ID_ARRDEPFORMAT:
                if (b1.getArrdepformat() == null && b2.getArrdepformat() != null) {
                    iReturn = -1;
                } else if (b1.getArrdepformat() == null && b2.getArrdepformat() == null) {
                    iReturn = 0;
                } else if (b1.getArrdepformat() != null && b2.getArrdepformat() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getArrdepformat().compareTo(b2.getArrdepformat());
                }
                break;
            case DisplaysettingsManager.ID_TIMEZOME:
                if (b1.getTimezome() == null && b2.getTimezome() != null) {
                    iReturn = -1;
                } else if (b1.getTimezome() == null && b2.getTimezome() == null) {
                    iReturn = 0;
                } else if (b1.getTimezome() != null && b2.getTimezome() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getTimezome().compareTo(b2.getTimezome());
                }
                break;
            case DisplaysettingsManager.ID_IDTYPEID:
                if (b1.getIdtypeid() == null && b2.getIdtypeid() != null) {
                    iReturn = -1;
                } else if (b1.getIdtypeid() == null && b2.getIdtypeid() == null) {
                    iReturn = 0;
                } else if (b1.getIdtypeid() != null && b2.getIdtypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getIdtypeid().compareTo(b2.getIdtypeid());
                }
                break;
            case DisplaysettingsManager.ID_RESERVATIONTYPEID:
                if (b1.getReservationtypeid() == null && b2.getReservationtypeid() != null) {
                    iReturn = -1;
                } else if (b1.getReservationtypeid() == null && b2.getReservationtypeid() == null) {
                    iReturn = 0;
                } else if (b1.getReservationtypeid() != null && b2.getReservationtypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getReservationtypeid().compareTo(b2.getReservationtypeid());
                }
                break;
            case DisplaysettingsManager.ID_ROUNDTYPE:
                if (b1.getRoundtype() == null && b2.getRoundtype() != null) {
                    iReturn = -1;
                } else if (b1.getRoundtype() == null && b2.getRoundtype() == null) {
                    iReturn = 0;
                } else if (b1.getRoundtype() != null && b2.getRoundtype() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRoundtype().compareTo(b2.getRoundtype());
                }
                break;
            case DisplaysettingsManager.ID_SALUTATIONID:
                if (b1.getSalutationid() == null && b2.getSalutationid() != null) {
                    iReturn = -1;
                } else if (b1.getSalutationid() == null && b2.getSalutationid() == null) {
                    iReturn = 0;
                } else if (b1.getSalutationid() != null && b2.getSalutationid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getSalutationid().compareTo(b2.getSalutationid());
                }
                break;
            case DisplaysettingsManager.ID_BILLTO:
                if (b1.getBillto() == null && b2.getBillto() != null) {
                    iReturn = -1;
                } else if (b1.getBillto() == null && b2.getBillto() == null) {
                    iReturn = 0;
                } else if (b1.getBillto() != null && b2.getBillto() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getBillto().compareTo(b2.getBillto());
                }
                break;
            case DisplaysettingsManager.ID_PAYMENTMODE:
                if (b1.getPaymentmode() == null && b2.getPaymentmode() != null) {
                    iReturn = -1;
                } else if (b1.getPaymentmode() == null && b2.getPaymentmode() == null) {
                    iReturn = 0;
                } else if (b1.getPaymentmode() != null && b2.getPaymentmode() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPaymentmode().compareTo(b2.getPaymentmode());
                }
                break;
            case DisplaysettingsManager.ID_PAYMENTMETHODID:
                if (b1.getPaymentmethodid() == null && b2.getPaymentmethodid() != null) {
                    iReturn = -1;
                } else if (b1.getPaymentmethodid() == null && b2.getPaymentmethodid() == null) {
                    iReturn = 0;
                } else if (b1.getPaymentmethodid() != null && b2.getPaymentmethodid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPaymentmethodid().compareTo(b2.getPaymentmethodid());
                }
                break;
            case DisplaysettingsManager.ID_WEBRATE:
                if (b1.getWebrate() == null && b2.getWebrate() != null) {
                    iReturn = -1;
                } else if (b1.getWebrate() == null && b2.getWebrate() == null) {
                    iReturn = 0;
                } else if (b1.getWebrate() != null && b2.getWebrate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getWebrate().compareTo(b2.getWebrate());
                }
                break;
            case DisplaysettingsManager.ID_WEBROOMINVMODE:
                if (b1.getWebroominvmode() == null && b2.getWebroominvmode() != null) {
                    iReturn = -1;
                } else if (b1.getWebroominvmode() == null && b2.getWebroominvmode() == null) {
                    iReturn = 0;
                } else if (b1.getWebroominvmode() != null && b2.getWebroominvmode() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getWebroominvmode().compareTo(b2.getWebroominvmode());
                }
                break;
            case DisplaysettingsManager.ID_PAYMENTGATEWAY:
                if (b1.getPaymentgateway() == null && b2.getPaymentgateway() != null) {
                    iReturn = -1;
                } else if (b1.getPaymentgateway() == null && b2.getPaymentgateway() == null) {
                    iReturn = 0;
                } else if (b1.getPaymentgateway() != null && b2.getPaymentgateway() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPaymentgateway().compareTo(b2.getPaymentgateway());
                }
                break;
            case DisplaysettingsManager.ID_REGBYID:
                if (b1.getRegbyid() == null && b2.getRegbyid() != null) {
                    iReturn = -1;
                } else if (b1.getRegbyid() == null && b2.getRegbyid() == null) {
                    iReturn = 0;
                } else if (b1.getRegbyid() != null && b2.getRegbyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegbyid().compareTo(b2.getRegbyid());
                }
                break;
            case DisplaysettingsManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            case DisplaysettingsManager.ID_ZIP:
                if (b1.getZip() == null && b2.getZip() != null) {
                    iReturn = -1;
                } else if (b1.getZip() == null && b2.getZip() == null) {
                    iReturn = 0;
                } else if (b1.getZip() != null && b2.getZip() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getZip().compareTo(b2.getZip());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 

}
