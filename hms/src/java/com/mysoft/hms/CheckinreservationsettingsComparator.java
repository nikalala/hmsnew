// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the CheckinreservationsettingsBean objects.
 */
public class CheckinreservationsettingsComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for CheckinreservationsettingsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new CheckinreservationsettingsComparator(CheckinreservationsettingsManager.CHECKINRESERVATIONSETTINGSID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>CheckinreservationsettingsManager.ID_CHECKINRESERVATIONSETTINGSID
     *   <li>CheckinreservationsettingsManager.ID_CHECKINTIME
     *   <li>CheckinreservationsettingsManager.ID_CHECKOUTTIME
     *   <li>CheckinreservationsettingsManager.ID_GRACEPERIODDAYUSE
     *   <li>CheckinreservationsettingsManager.ID_DAYUSECHARGE
     *   <li>CheckinreservationsettingsManager.ID_GRACEPERIODLATE
     *   <li>CheckinreservationsettingsManager.ID_LATECHECKOUTCHARGE
     *   <li>CheckinreservationsettingsManager.ID_GRACEPERIODEARLY
     *   <li>CheckinreservationsettingsManager.ID_EARLYCHECKOUTCAHRGE
     *   <li>CheckinreservationsettingsManager.ID_POSTCANCELLATIONFEE
     *   <li>CheckinreservationsettingsManager.ID_AMOUNTCANCELL
     *   <li>CheckinreservationsettingsManager.ID_BEYOND
     *   <li>CheckinreservationsettingsManager.ID_WITHIN
     *   <li>CheckinreservationsettingsManager.ID_POSTNOSHOWFEE
     *   <li>CheckinreservationsettingsManager.ID_AMOUNTNOSHOW
     *   <li>CheckinreservationsettingsManager.ID_FINSTARTMONTH
     *   <li>CheckinreservationsettingsManager.ID_FINSTARTDAY
     *   <li>CheckinreservationsettingsManager.ID_FINENDMONTH
     *   <li>CheckinreservationsettingsManager.ID_FINENDDAY
     *   <li>CheckinreservationsettingsManager.ID_REGBYID
     *   <li>CheckinreservationsettingsManager.ID_REGDATE
     * </ul>
     */
    public CheckinreservationsettingsComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for CheckinreservationsettingsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new CheckinreservationsettingsComparator(CheckinreservationsettingsManager.CHECKINRESERVATIONSETTINGSID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>CheckinreservationsettingsManager.ID_CHECKINRESERVATIONSETTINGSID
     *   <li>CheckinreservationsettingsManager.ID_HOURS24
     *   <li>CheckinreservationsettingsManager.ID_CHECKINTIME
     *   <li>CheckinreservationsettingsManager.ID_CHECKOUTTIME
     *   <li>CheckinreservationsettingsManager.ID_AUTOPOSTDAYUSE
     *   <li>CheckinreservationsettingsManager.ID_GRACEPERIODDAYUSE
     *   <li>CheckinreservationsettingsManager.ID_DAYUSECHARGE
     *   <li>CheckinreservationsettingsManager.ID_AUTOPOSTFORLATECHECKOUT
     *   <li>CheckinreservationsettingsManager.ID_GRACEPERIODLATE
     *   <li>CheckinreservationsettingsManager.ID_LATECHECKOUTCHARGE
     *   <li>CheckinreservationsettingsManager.ID_AUTOPOSTEARLY
     *   <li>CheckinreservationsettingsManager.ID_GRACEPERIODEARLY
     *   <li>CheckinreservationsettingsManager.ID_EARLYCHECKOUTCAHRGE
     *   <li>CheckinreservationsettingsManager.ID_POSTCANCELLATIONFEE
     *   <li>CheckinreservationsettingsManager.ID_AMOUNTCANCELL
     *   <li>CheckinreservationsettingsManager.ID_TOTALCHARGECANCELL
     *   <li>CheckinreservationsettingsManager.ID_BEYOND
     *   <li>CheckinreservationsettingsManager.ID_WITHIN
     *   <li>CheckinreservationsettingsManager.ID_POSTNOSHOWFEE
     *   <li>CheckinreservationsettingsManager.ID_AMOUNTNOSHOW
     *   <li>CheckinreservationsettingsManager.ID_TOTALCHARGENOSHOW
     *   <li>CheckinreservationsettingsManager.ID_FINSTARTMONTH
     *   <li>CheckinreservationsettingsManager.ID_FINSTARTDAY
     *   <li>CheckinreservationsettingsManager.ID_FINENDMONTH
     *   <li>CheckinreservationsettingsManager.ID_FINENDDAY
     *   <li>CheckinreservationsettingsManager.ID_GUESTNAMERESERV
     *   <li>CheckinreservationsettingsManager.ID_GUESTNAMEWALKIN
     *   <li>CheckinreservationsettingsManager.ID_GUESTIDNRESERV
     *   <li>CheckinreservationsettingsManager.ID_GUESTIDNWALKIN
     *   <li>CheckinreservationsettingsManager.ID_MARKETCODERESERV
     *   <li>CheckinreservationsettingsManager.ID_MARKETCODEWALKIN
     *   <li>CheckinreservationsettingsManager.ID_PAYMENTTYPERESERV
     *   <li>CheckinreservationsettingsManager.ID_PAYMENTTYPEWALKIN
     *   <li>CheckinreservationsettingsManager.ID_TARESERV
     *   <li>CheckinreservationsettingsManager.ID_TAWALKIN
     *   <li>CheckinreservationsettingsManager.ID_COMPANYRESERV
     *   <li>CheckinreservationsettingsManager.ID_COMPANYWALKIN
     *   <li>CheckinreservationsettingsManager.ID_BSOURCERESERV
     *   <li>CheckinreservationsettingsManager.ID_BSOURCEWALKIN
     *   <li>CheckinreservationsettingsManager.ID_NATIONALITYRESERV
     *   <li>CheckinreservationsettingsManager.ID_NATIONALITYWALKIN
     *   <li>CheckinreservationsettingsManager.ID_EMAILRESERVATIONVOUCHER
     *   <li>CheckinreservationsettingsManager.ID_NIGHTAUDITDIRTY
     *   <li>CheckinreservationsettingsManager.ID_OVERBOOKING
     *   <li>CheckinreservationsettingsManager.ID_BASEOCCUPANCY
     *   <li>CheckinreservationsettingsManager.ID_FRONTRATEMODEREGULAR
     *   <li>CheckinreservationsettingsManager.ID_SENDREVIEWTOALL
     *   <li>CheckinreservationsettingsManager.ID_REGBYID
     *   <li>CheckinreservationsettingsManager.ID_REGDATE
     *   <li>CheckinreservationsettingsManager.ID_ADDRESSRESERV
     *   <li>CheckinreservationsettingsManager.ID_ADDRESSWALKIN
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public CheckinreservationsettingsComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        CheckinreservationsettingsBean b1 = (CheckinreservationsettingsBean)pObj1;
        CheckinreservationsettingsBean b2 = (CheckinreservationsettingsBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case CheckinreservationsettingsManager.ID_CHECKINRESERVATIONSETTINGSID:
                if (b1.getCheckinreservationsettingsid() == null && b2.getCheckinreservationsettingsid() != null) {
                    iReturn = -1;
                } else if (b1.getCheckinreservationsettingsid() == null && b2.getCheckinreservationsettingsid() == null) {
                    iReturn = 0;
                } else if (b1.getCheckinreservationsettingsid() != null && b2.getCheckinreservationsettingsid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCheckinreservationsettingsid().compareTo(b2.getCheckinreservationsettingsid());
                }
                break;
            case CheckinreservationsettingsManager.ID_CHECKINTIME:
                if (b1.getCheckintime() == null && b2.getCheckintime() != null) {
                    iReturn = -1;
                } else if (b1.getCheckintime() == null && b2.getCheckintime() == null) {
                    iReturn = 0;
                } else if (b1.getCheckintime() != null && b2.getCheckintime() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCheckintime().compareTo(b2.getCheckintime());
                }
                break;
            case CheckinreservationsettingsManager.ID_CHECKOUTTIME:
                if (b1.getCheckouttime() == null && b2.getCheckouttime() != null) {
                    iReturn = -1;
                } else if (b1.getCheckouttime() == null && b2.getCheckouttime() == null) {
                    iReturn = 0;
                } else if (b1.getCheckouttime() != null && b2.getCheckouttime() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCheckouttime().compareTo(b2.getCheckouttime());
                }
                break;
            case CheckinreservationsettingsManager.ID_GRACEPERIODDAYUSE:
                if (b1.getGraceperioddayuse() == null && b2.getGraceperioddayuse() != null) {
                    iReturn = -1;
                } else if (b1.getGraceperioddayuse() == null && b2.getGraceperioddayuse() == null) {
                    iReturn = 0;
                } else if (b1.getGraceperioddayuse() != null && b2.getGraceperioddayuse() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getGraceperioddayuse().compareTo(b2.getGraceperioddayuse());
                }
                break;
            case CheckinreservationsettingsManager.ID_DAYUSECHARGE:
                if (b1.getDayusecharge() == null && b2.getDayusecharge() != null) {
                    iReturn = -1;
                } else if (b1.getDayusecharge() == null && b2.getDayusecharge() == null) {
                    iReturn = 0;
                } else if (b1.getDayusecharge() != null && b2.getDayusecharge() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getDayusecharge().compareTo(b2.getDayusecharge());
                }
                break;
            case CheckinreservationsettingsManager.ID_GRACEPERIODLATE:
                if (b1.getGraceperiodlate() == null && b2.getGraceperiodlate() != null) {
                    iReturn = -1;
                } else if (b1.getGraceperiodlate() == null && b2.getGraceperiodlate() == null) {
                    iReturn = 0;
                } else if (b1.getGraceperiodlate() != null && b2.getGraceperiodlate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getGraceperiodlate().compareTo(b2.getGraceperiodlate());
                }
                break;
            case CheckinreservationsettingsManager.ID_LATECHECKOUTCHARGE:
                if (b1.getLatecheckoutcharge() == null && b2.getLatecheckoutcharge() != null) {
                    iReturn = -1;
                } else if (b1.getLatecheckoutcharge() == null && b2.getLatecheckoutcharge() == null) {
                    iReturn = 0;
                } else if (b1.getLatecheckoutcharge() != null && b2.getLatecheckoutcharge() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getLatecheckoutcharge().compareTo(b2.getLatecheckoutcharge());
                }
                break;
            case CheckinreservationsettingsManager.ID_GRACEPERIODEARLY:
                if (b1.getGraceperiodearly() == null && b2.getGraceperiodearly() != null) {
                    iReturn = -1;
                } else if (b1.getGraceperiodearly() == null && b2.getGraceperiodearly() == null) {
                    iReturn = 0;
                } else if (b1.getGraceperiodearly() != null && b2.getGraceperiodearly() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getGraceperiodearly().compareTo(b2.getGraceperiodearly());
                }
                break;
            case CheckinreservationsettingsManager.ID_EARLYCHECKOUTCAHRGE:
                if (b1.getEarlycheckoutcahrge() == null && b2.getEarlycheckoutcahrge() != null) {
                    iReturn = -1;
                } else if (b1.getEarlycheckoutcahrge() == null && b2.getEarlycheckoutcahrge() == null) {
                    iReturn = 0;
                } else if (b1.getEarlycheckoutcahrge() != null && b2.getEarlycheckoutcahrge() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getEarlycheckoutcahrge().compareTo(b2.getEarlycheckoutcahrge());
                }
                break;
            case CheckinreservationsettingsManager.ID_POSTCANCELLATIONFEE:
                if (b1.getPostcancellationfee() == null && b2.getPostcancellationfee() != null) {
                    iReturn = -1;
                } else if (b1.getPostcancellationfee() == null && b2.getPostcancellationfee() == null) {
                    iReturn = 0;
                } else if (b1.getPostcancellationfee() != null && b2.getPostcancellationfee() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPostcancellationfee().compareTo(b2.getPostcancellationfee());
                }
                break;
            case CheckinreservationsettingsManager.ID_AMOUNTCANCELL:
                if (b1.getAmountcancell() == null && b2.getAmountcancell() != null) {
                    iReturn = -1;
                } else if (b1.getAmountcancell() == null && b2.getAmountcancell() == null) {
                    iReturn = 0;
                } else if (b1.getAmountcancell() != null && b2.getAmountcancell() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAmountcancell().compareTo(b2.getAmountcancell());
                }
                break;
            case CheckinreservationsettingsManager.ID_BEYOND:
                if (b1.getBeyond() == null && b2.getBeyond() != null) {
                    iReturn = -1;
                } else if (b1.getBeyond() == null && b2.getBeyond() == null) {
                    iReturn = 0;
                } else if (b1.getBeyond() != null && b2.getBeyond() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getBeyond().compareTo(b2.getBeyond());
                }
                break;
            case CheckinreservationsettingsManager.ID_WITHIN:
                if (b1.getWithin() == null && b2.getWithin() != null) {
                    iReturn = -1;
                } else if (b1.getWithin() == null && b2.getWithin() == null) {
                    iReturn = 0;
                } else if (b1.getWithin() != null && b2.getWithin() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getWithin().compareTo(b2.getWithin());
                }
                break;
            case CheckinreservationsettingsManager.ID_POSTNOSHOWFEE:
                if (b1.getPostnoshowfee() == null && b2.getPostnoshowfee() != null) {
                    iReturn = -1;
                } else if (b1.getPostnoshowfee() == null && b2.getPostnoshowfee() == null) {
                    iReturn = 0;
                } else if (b1.getPostnoshowfee() != null && b2.getPostnoshowfee() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPostnoshowfee().compareTo(b2.getPostnoshowfee());
                }
                break;
            case CheckinreservationsettingsManager.ID_AMOUNTNOSHOW:
                if (b1.getAmountnoshow() == null && b2.getAmountnoshow() != null) {
                    iReturn = -1;
                } else if (b1.getAmountnoshow() == null && b2.getAmountnoshow() == null) {
                    iReturn = 0;
                } else if (b1.getAmountnoshow() != null && b2.getAmountnoshow() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAmountnoshow().compareTo(b2.getAmountnoshow());
                }
                break;
            case CheckinreservationsettingsManager.ID_FINSTARTMONTH:
                if (b1.getFinstartmonth() == null && b2.getFinstartmonth() != null) {
                    iReturn = -1;
                } else if (b1.getFinstartmonth() == null && b2.getFinstartmonth() == null) {
                    iReturn = 0;
                } else if (b1.getFinstartmonth() != null && b2.getFinstartmonth() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getFinstartmonth().compareTo(b2.getFinstartmonth());
                }
                break;
            case CheckinreservationsettingsManager.ID_FINSTARTDAY:
                if (b1.getFinstartday() == null && b2.getFinstartday() != null) {
                    iReturn = -1;
                } else if (b1.getFinstartday() == null && b2.getFinstartday() == null) {
                    iReturn = 0;
                } else if (b1.getFinstartday() != null && b2.getFinstartday() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getFinstartday().compareTo(b2.getFinstartday());
                }
                break;
            case CheckinreservationsettingsManager.ID_FINENDMONTH:
                if (b1.getFinendmonth() == null && b2.getFinendmonth() != null) {
                    iReturn = -1;
                } else if (b1.getFinendmonth() == null && b2.getFinendmonth() == null) {
                    iReturn = 0;
                } else if (b1.getFinendmonth() != null && b2.getFinendmonth() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getFinendmonth().compareTo(b2.getFinendmonth());
                }
                break;
            case CheckinreservationsettingsManager.ID_FINENDDAY:
                if (b1.getFinendday() == null && b2.getFinendday() != null) {
                    iReturn = -1;
                } else if (b1.getFinendday() == null && b2.getFinendday() == null) {
                    iReturn = 0;
                } else if (b1.getFinendday() != null && b2.getFinendday() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getFinendday().compareTo(b2.getFinendday());
                }
                break;
            case CheckinreservationsettingsManager.ID_REGBYID:
                if (b1.getRegbyid() == null && b2.getRegbyid() != null) {
                    iReturn = -1;
                } else if (b1.getRegbyid() == null && b2.getRegbyid() == null) {
                    iReturn = 0;
                } else if (b1.getRegbyid() != null && b2.getRegbyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegbyid().compareTo(b2.getRegbyid());
                }
                break;
            case CheckinreservationsettingsManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
