// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.hms;

// imports+ 

// imports- 


public class ExtrachargefolioBean
// extends+ 

// extends- 

{
    private Long folioitemid;
    private boolean folioitemid_is_modified = false;
    private boolean folioitemid_is_initialized = false;
    
    private Integer extrachargeid;
    private boolean extrachargeid_is_modified = false;
    private boolean extrachargeid_is_initialized = false;
    
    private Double rate;
    private boolean rate_is_modified = false;
    private boolean rate_is_initialized = false;
    
    private Integer postingtype;
    private boolean postingtype_is_modified = false;
    private boolean postingtype_is_initialized = false;
    
    private Integer chargeapplyrieson;
    private boolean chargeapplyrieson_is_modified = false;
    private boolean chargeapplyrieson_is_initialized = false;
    
    private Integer adult;
    private boolean adult_is_modified = false;
    private boolean adult_is_initialized = false;
    
    private Integer child;
    private boolean child_is_modified = false;
    private boolean child_is_initialized = false;
    
    private Integer qty;
    private boolean qty_is_modified = false;
    private boolean qty_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ExtrachargefolioBean()
    {
    }
    
    /**
     * Getter method for folioitemid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extrachargefolio.folioitemid
     * <li>column size: 19
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of folioitemid
     */
    public Long getFolioitemid()
    {
        return folioitemid; 
    }

    /**
     * Setter method for folioitemid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to folioitemid
     */
    public void setFolioitemid(Long newVal) {
        if ((newVal != null && this.folioitemid != null && (newVal.compareTo(this.folioitemid) == 0)) || 
            (newVal == null && this.folioitemid == null && folioitemid_is_initialized)) {
            return; 
        } 
        this.folioitemid = newVal; 
        folioitemid_is_modified = true; 
        folioitemid_is_initialized = true; 
    }

    /**
     * Setter method for folioitemid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to folioitemid
     */
    public void setFolioitemid(long newVal) {
        setFolioitemid(new Long(newVal));
    }

    /**
     * Determines if the folioitemid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFolioitemidModified() {
        return folioitemid_is_modified; 
    }

    /**
     * Determines if the folioitemid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFolioitemidInitialized() {
        return folioitemid_is_initialized; 
    }

    /**
     * Getter method for extrachargeid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extrachargefolio.extrachargeid
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of extrachargeid
     */
    public Integer getExtrachargeid()
    {
        return extrachargeid; 
    }

    /**
     * Setter method for extrachargeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to extrachargeid
     */
    public void setExtrachargeid(Integer newVal) {
        if ((newVal != null && this.extrachargeid != null && (newVal.compareTo(this.extrachargeid) == 0)) || 
            (newVal == null && this.extrachargeid == null && extrachargeid_is_initialized)) {
            return; 
        } 
        this.extrachargeid = newVal; 
        extrachargeid_is_modified = true; 
        extrachargeid_is_initialized = true; 
    }

    /**
     * Setter method for extrachargeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to extrachargeid
     */
    public void setExtrachargeid(int newVal) {
        setExtrachargeid(new Integer(newVal));
    }

    /**
     * Determines if the extrachargeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExtrachargeidModified() {
        return extrachargeid_is_modified; 
    }

    /**
     * Determines if the extrachargeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExtrachargeidInitialized() {
        return extrachargeid_is_initialized; 
    }

    /**
     * Getter method for rate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extrachargefolio.rate
     * <li>column size: 17
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of rate
     */
    public Double getRate()
    {
        return rate; 
    }

    /**
     * Setter method for rate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rate
     */
    public void setRate(Double newVal) {
        if ((newVal != null && this.rate != null && (newVal.compareTo(this.rate) == 0)) || 
            (newVal == null && this.rate == null && rate_is_initialized)) {
            return; 
        } 
        this.rate = newVal; 
        rate_is_modified = true; 
        rate_is_initialized = true; 
    }

    /**
     * Setter method for rate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to rate
     */
    public void setRate(double newVal) {
        setRate(new Double(newVal));
    }

    /**
     * Determines if the rate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRateModified() {
        return rate_is_modified; 
    }

    /**
     * Determines if the rate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRateInitialized() {
        return rate_is_initialized; 
    }

    /**
     * Getter method for postingtype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extrachargefolio.postingtype
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of postingtype
     */
    public Integer getPostingtype()
    {
        return postingtype; 
    }

    /**
     * Setter method for postingtype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to postingtype
     */
    public void setPostingtype(Integer newVal) {
        if ((newVal != null && this.postingtype != null && (newVal.compareTo(this.postingtype) == 0)) || 
            (newVal == null && this.postingtype == null && postingtype_is_initialized)) {
            return; 
        } 
        this.postingtype = newVal; 
        postingtype_is_modified = true; 
        postingtype_is_initialized = true; 
    }

    /**
     * Setter method for postingtype.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to postingtype
     */
    public void setPostingtype(int newVal) {
        setPostingtype(new Integer(newVal));
    }

    /**
     * Determines if the postingtype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPostingtypeModified() {
        return postingtype_is_modified; 
    }

    /**
     * Determines if the postingtype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPostingtypeInitialized() {
        return postingtype_is_initialized; 
    }

    /**
     * Getter method for chargeapplyrieson.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extrachargefolio.chargeapplyrieson
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of chargeapplyrieson
     */
    public Integer getChargeapplyrieson()
    {
        return chargeapplyrieson; 
    }

    /**
     * Setter method for chargeapplyrieson.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to chargeapplyrieson
     */
    public void setChargeapplyrieson(Integer newVal) {
        if ((newVal != null && this.chargeapplyrieson != null && (newVal.compareTo(this.chargeapplyrieson) == 0)) || 
            (newVal == null && this.chargeapplyrieson == null && chargeapplyrieson_is_initialized)) {
            return; 
        } 
        this.chargeapplyrieson = newVal; 
        chargeapplyrieson_is_modified = true; 
        chargeapplyrieson_is_initialized = true; 
    }

    /**
     * Setter method for chargeapplyrieson.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to chargeapplyrieson
     */
    public void setChargeapplyrieson(int newVal) {
        setChargeapplyrieson(new Integer(newVal));
    }

    /**
     * Determines if the chargeapplyrieson has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isChargeapplyriesonModified() {
        return chargeapplyrieson_is_modified; 
    }

    /**
     * Determines if the chargeapplyrieson has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isChargeapplyriesonInitialized() {
        return chargeapplyrieson_is_initialized; 
    }

    /**
     * Getter method for adult.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extrachargefolio.adult
     * <li>default value: 0
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of adult
     */
    public Integer getAdult()
    {
        return adult; 
    }

    /**
     * Setter method for adult.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to adult
     */
    public void setAdult(Integer newVal) {
        if ((newVal != null && this.adult != null && (newVal.compareTo(this.adult) == 0)) || 
            (newVal == null && this.adult == null && adult_is_initialized)) {
            return; 
        } 
        this.adult = newVal; 
        adult_is_modified = true; 
        adult_is_initialized = true; 
    }

    /**
     * Setter method for adult.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to adult
     */
    public void setAdult(int newVal) {
        setAdult(new Integer(newVal));
    }

    /**
     * Determines if the adult has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAdultModified() {
        return adult_is_modified; 
    }

    /**
     * Determines if the adult has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAdultInitialized() {
        return adult_is_initialized; 
    }

    /**
     * Getter method for child.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extrachargefolio.child
     * <li>default value: 0
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of child
     */
    public Integer getChild()
    {
        return child; 
    }

    /**
     * Setter method for child.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to child
     */
    public void setChild(Integer newVal) {
        if ((newVal != null && this.child != null && (newVal.compareTo(this.child) == 0)) || 
            (newVal == null && this.child == null && child_is_initialized)) {
            return; 
        } 
        this.child = newVal; 
        child_is_modified = true; 
        child_is_initialized = true; 
    }

    /**
     * Setter method for child.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to child
     */
    public void setChild(int newVal) {
        setChild(new Integer(newVal));
    }

    /**
     * Determines if the child has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isChildModified() {
        return child_is_modified; 
    }

    /**
     * Determines if the child has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isChildInitialized() {
        return child_is_initialized; 
    }

    /**
     * Getter method for qty.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extrachargefolio.qty
     * <li>default value: 0
     * <li>column size: 10
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of qty
     */
    public Integer getQty()
    {
        return qty; 
    }

    /**
     * Setter method for qty.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to qty
     */
    public void setQty(Integer newVal) {
        if ((newVal != null && this.qty != null && (newVal.compareTo(this.qty) == 0)) || 
            (newVal == null && this.qty == null && qty_is_initialized)) {
            return; 
        } 
        this.qty = newVal; 
        qty_is_modified = true; 
        qty_is_initialized = true; 
    }

    /**
     * Setter method for qty.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to qty
     */
    public void setQty(int newVal) {
        setQty(new Integer(newVal));
    }

    /**
     * Determines if the qty has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isQtyModified() {
        return qty_is_modified; 
    }

    /**
     * Determines if the qty has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isQtyInitialized() {
        return qty_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return folioitemid_is_modified || 
		extrachargeid_is_modified || 
		rate_is_modified || 
		postingtype_is_modified || 
		chargeapplyrieson_is_modified || 
		adult_is_modified || 
		child_is_modified || 
		qty_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        folioitemid_is_modified = false;
        extrachargeid_is_modified = false;
        rate_is_modified = false;
        postingtype_is_modified = false;
        chargeapplyrieson_is_modified = false;
        adult_is_modified = false;
        child_is_modified = false;
        qty_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ExtrachargefolioBean bean) {
        setFolioitemid(bean.getFolioitemid());
        setExtrachargeid(bean.getExtrachargeid());
        setRate(bean.getRate());
        setPostingtype(bean.getPostingtype());
        setChargeapplyrieson(bean.getChargeapplyrieson());
        setAdult(bean.getAdult());
        setChild(bean.getChild());
        setQty(bean.getQty());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[extrachargefolio] "
                 + "\n - extrachargefolio.folioitemid = " + (folioitemid_is_initialized ? ("[" + (folioitemid == null ? null : folioitemid.toString()) + "]") : "not initialized") + ""
                 + "\n - extrachargefolio.extrachargeid = " + (extrachargeid_is_initialized ? ("[" + (extrachargeid == null ? null : extrachargeid.toString()) + "]") : "not initialized") + ""
                 + "\n - extrachargefolio.rate = " + (rate_is_initialized ? ("[" + (rate == null ? null : rate.toString()) + "]") : "not initialized") + ""
                 + "\n - extrachargefolio.postingtype = " + (postingtype_is_initialized ? ("[" + (postingtype == null ? null : postingtype.toString()) + "]") : "not initialized") + ""
                 + "\n - extrachargefolio.chargeapplyrieson = " + (chargeapplyrieson_is_initialized ? ("[" + (chargeapplyrieson == null ? null : chargeapplyrieson.toString()) + "]") : "not initialized") + ""
                 + "\n - extrachargefolio.adult = " + (adult_is_initialized ? ("[" + (adult == null ? null : adult.toString()) + "]") : "not initialized") + ""
                 + "\n - extrachargefolio.child = " + (child_is_initialized ? ("[" + (child == null ? null : child.toString()) + "]") : "not initialized") + ""
                 + "\n - extrachargefolio.qty = " + (qty_is_initialized ? ("[" + (qty == null ? null : qty.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 

}
